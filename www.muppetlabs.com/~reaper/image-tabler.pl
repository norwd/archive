#!/usr/bin/perl -w
# vi:set wm=0 ai shiftwidth=4 tabstop=4:

use strict;
#=======================================================================
# usage: table-ifier.pl -w 3 -h 4 directoryname
# [note that directoryname must come last]
#
# this program will take a directory name as an argument.  that
# directory should contain a set of images, (jpg or gif) with image
# pairs being something like "stuff001.gif" and "stuff001-sm.gif".  the
# "-sm" is very important, and should be the thumbnail you want in the
# index page(s).  
# 
# it will output a number of index pages (index.html, index-1.html,
# index-2.html, etc.) depending on how many images you have, and how
# many images are placed per page.  these pages will get placed in the
# current directory, with relative path links to the images. (ie, i
# usually have an "images" directory, and want the indexes to be a
# level below that directory.)
#=======================================================================
#-----------------------------------------------------------------------

$| = 1;

print "Ian's Image-tabler, v0.1\n$0 -help for help\n";
my ($width, $height, $dir) = parse_args(@ARGV);

print "Working.";
opendir(DIR, "$dir") or die "can't open directory $dir\n";
my @dir = readdir(DIR);
closedir DIR;

my %images;
my $num_pages = get_indexes($width, $height, \@dir, \%images);

for(my $i=0; $i<=$num_pages; $i++)
{
	print ".";
	my $filename;
	if ($i == 0)
	{
		$filename = "index.html";
	}
	else
	{
		$filename = "index-$i.html";
	}

	print ".";
	print_html_header($filename, $i, $num_pages);

	print_table($filename, $dir, $width, $height, $images{$i});

	print_html_footer($filename, $i, $num_pages);
}

print "\nFinished.\n";

#=======================================================================
# subroutines
#=======================================================================

#-----------------------------------------------------------------------
# this function figures out which navigation links to put on the page,
# and prints out the HTML header along with those links.
#-----------------------------------------------------------------------
sub print_html_header
{
	my ($filename, $curr, $total) = @_;
	my ($humancurr, $humantotal) = ($curr+1, $total+1);

	open (OUT, ">$filename") or 
		die "can't open $filename in print_html_header\n";

	my $link = get_links($curr, $total);

	print OUT<<EOT;
<html>
<head>
<title> Generic image table, $humancurr out of $humantotal </title>
<body bgcolor="#000000" text="#ffffff" vlink="#999999" link="#0077ff">

<p> $link
EOT

	close(OUT);
}

#-----------------------------------------------------------------------
# takes in a number of variables, and creates the actual HTML table.
#-----------------------------------------------------------------------
sub print_table
{
	my ($indexname, $dir, $width, $height, $images) = @_;
	my @files = split(/::/, $images);
	my $i;

	$dir =~ s/\///g;

	open (OUT, ">>$indexname") or 
		die "can't open $indexname in print_table\n";

	print OUT "<p> <table border=\"0\" cellpadding=\"4\">\n";
	#print OUT "<tr>\n";
	foreach my $filename (@files)
	{
		my ($file, $ext) = split(/\./, $filename);

		if ($i++ % $width == 0)
		{
			print OUT "</tr><tr>\n";
		}

		print OUT "<td>\n";
		print OUT "<a href=\"$dir/$file.$ext\"><img src=\"$dir/$file-sm.$ext\"></a>\n";
		print OUT "</td>\n";
	}

	print OUT "</tr></table>\n";

	close(OUT);
}

#-----------------------------------------------------------------------
# print out the post-table information
#-----------------------------------------------------------------------
sub print_html_footer
{
	my ($filename, $curr, $total) = @_;
	my ($humancurr, $humantotal) = ($curr+1, $total+1);

	open (OUT, ">>$filename") or 
		die "can't open $filename in print_html_footer\n";

	my $link = get_links($curr, $total);

	print OUT "<p> $link\n";
	print OUT "<p><hr>Automatically generated by Ian's table-izing script\n";
	#print OUT "<br> Script is available <a href=\"http://mandible.sea.adobe.com/~ijohnsto/tools/image-tabler/index.html\">here</a>.\n";
	print OUT "<br> Script is available <a href=\"http://www.muppetlabs.com/~reaper/image-tabler.pl\">here</a>.\n";
	print OUT "</body></html>\n";
}

#-----------------------------------------------------------------------
# figure out what the various arguments are, and specify defaults if
# none are given  CHANGE DEFAULTS HERE
#-----------------------------------------------------------------------
sub parse_args
{
	my @args = @_;
	my ($width, $height, $dir);

	# some nice default values.  note that $dir is the directory,
	# contained in the current working directory, that holds the image
	# files.
	$width = 3;
	$height = 4;
	$dir = "images";

	for(my $i=0; $i<=$#args; $i++)
	{
		usage($height, $width, $dir) if $args[$i] =~ /-help/;
		$width = $args[++$i] if $args[$i] eq '-w';
		$height = $args[++$i] if $args[$i] eq '-h';
		$dir = $args[$i] if $i == $#args;
	}

	return($width, $height, $dir);
}

#-----------------------------------------------------------------------
# this function figures out how to break up the images into separate
# pages, and puts them into the referenced hash.  it returns the number
# of pages (also known as the highest value in the hash)
#-----------------------------------------------------------------------
sub get_indexes
{
	my ($width, $height, $dir, $index) = @_;

	my @non_sm_files;

	foreach my $file (@{$dir})
	{
		next if ($file =~ /^\./);
		next if ($file =~ /.+-sm\./);

		push(@non_sm_files, $file) if $file =~ /jpg$/i;
		push(@non_sm_files, $file) if $file =~ /gif$/i;
	}
	my $size = $width * $height;
	my $num_pages = ($#non_sm_files)/$size;
	$num_pages = int($num_pages);


	for (my $i=0; $i<=$num_pages; $i++)
	{
		print ".";
		my $start = $i * $size;
		my $end = $start+($size-1);
		$end = $#non_sm_files if $end > $#non_sm_files;
		$index -> {$i} = join('::', @non_sm_files[$start..$end]);
	}

	return($num_pages);
}


#-----------------------------------------------------------------------
# print a quaint message (assuming the user can figure out how to
# spell "-help") and quit
#-----------------------------------------------------------------------
sub usage
{
	my ($height, $width, $dir) = @_;
	print STDERR "Usage: $0 [-h n] [-w n] [-help] directoryname \n";
	print STDERR "\tdirectoryname must appear last in the argument list (default: \"$dir\")\n";
	print STDERR "\t-h Height of tables in number of pictures (default: $height)\n";
	print STDERR "\t-w Width of tables in number of pictures (default: $width)\n";
	print STDERR "\t-help This message\n";

	exit(0);
}

#-----------------------------------------------------------------------
# this function figures out which navigational links to put on the page
# (ie, first page, last page, and second page are all special cases)
#-----------------------------------------------------------------------
sub get_links
{
	my ($curr, $total) = @_;
	my $link = "<font size=\"+1\">\n";
	my $next = $curr+1;
	my $prev = $curr-1;

	if ($curr == 0)
	{
		$link .= "<a href=\"index.html\">Top page</a> ";
	}
	elsif ($curr == 1)
	{
		$link .= "<a href=\"index.html\">Back to page 1</a> ";
		$link .= "- <a href=\"index.html\">Top page</a> ";
	}
	else
	{
		my $prev = $curr - 1;
		$link .= "<a href=\"index-$prev.html\">Back to page $curr</a> ";
		$link .= "- <a href=\"index.html\">Top page</a> ";
	}

	if ($curr < $total)
	{
		my $human_next = $next + 1;
		$link .= "- <a href=\"index-$next.html\">On to page $human_next</a>";
	}

	$link .= "</font>\n";

	return ($link);
}
