<script type="text/javascript">
  var disqus_identifier = "quakeSource";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake engine, Documented Quake source, Quake code review, idtech1"/>
		<meta name="Description" content="Quake source code review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       March 9th, 2009</div>
   <h1>Quake Engine code review : Architecture (1/4)</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quakeEngine.jpg"" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         		
					I happily dove into <a href="https://github.com/id-Software">Quake World source code</a>. Here is what I understood, hopefully it will help someone to swim. <br/>
					<br/>
					This article is in four parts :<br/>
					<br/>
					<a href="index.php">Architecture section</a><br/>
<a href="quakeSourceNetWork.php">Network section</a><br/>
<a href="quakeSourcePrediction.php">Prediction section</a><br/>
<a href="quakeSourceRendition.php">Rendition section</a><br/>

					<br/>				<div style="clear:both;"></div>
			</p>
					
			
			
			<h3>Quake Client
			</h3>
			<p id="paperbox">	
				A good starting point to study Quake is the <code>qwcl</code> (client) project. The entry point <code>WinMain</code> can be found in <b>sys_win.c</b>. A quick summary of the code is as follows:<br/>		
				
			<pre class="long">
			
	WinMain
	{
		while (1)
		{
				newtime = Sys_DoubleTime ();
				time = newtime - oldtime;
				Host_Frame (time)
				{
					setjmp
					Sys_SendKeyEvents
					IN_Commands
					Cbuf_Execute
					
					/* Network */
					CL_ReadPackets
					CL_SendCmd
					
					/* Prediction//Collision */
					CL_SetUpPlayerPrediction(false)
					CL_PredictMove
					CL_SetUpPlayerPrediction(true)
					CL_EmitEntities
					
					/* Rendition */
					SCR_UpdateScreen
				}
				oldtime = newtime;
		}
	}
	</pre>
				
			</p>
			<br/>
		<p>
			From here, we can identify the three key elements of Quake World:<br/>
			<ul>
				<li> <b>Network</b>&nbsp;&nbsp;&nbsp;&nbsp;<code>CL_ReadPackets</code> and <code>CL_SendCmd</code> </li/>
				<li> <b>Prediction</b>&nbsp;&nbsp;<code>CL_SetUpPlayerPrediction</code>, <code>CL_PredictMove</code> and <code>CL_EmitEntities</code></li>
				<li> <b>Rendition</b>&nbsp;&nbsp;&nbsp;<code>SCR_UpdateScreen</code></li>
			</ul>
			<br/>
			<p  id="paperbox">
			The <b>network</b> layer (also called Net Channel) outputs world information into the <code>frames</code> variable ( An array of <code>frame_t</code>). They are picked up by the <b>prediction</b> layer, where collisions are also taken care of and data are outputted under the form of Visibility Edicts (<code>cl_visedicts</code>) and the POV definition. VisEdicts are used by the rendition layer, in addition to the POV (<code>cl.sim*</code>) variables to render the scene.
			</p>
			<img style="display: block; margin-left: auto; margin-right: auto;" src="QuakeEngineOverView.jpg"/>
			<br/>
			<p  id="paperbox">
			<code>setjmp</code> :<br/>
			<br/>
				Setup a code waypoint, if anything bad happens, program jumps back here.<br/>
			<br/>
			<br/>
			
			
			<code>Sys_SendKeyEvents</code> :<br/>
			<br/>
				Retrieve Windows OS messages, minimizing etc... Update engine variable accordingly (world is not rendered if window is minimized for example).<br/>
			<br/>
			<br/>
			
			<code>IN_Commands</code> :<br/>
			<br/>
				Get joystick  inputs.<br/>
			<br/>
			<br/>
			
			
			<code>Cbuf_Execute</code> :<br/>
			<br/>
				 In every game loop, commands in the buffer are executed. Commands are generated mostly via the console, but can also come from the server or even direct keystroke.<br/>
				 <br/>
				 The game starts with a <code>exec quake.rc</code> in the command buffer.
			<br/>
			<br/>

			<code id="netchannel">CL_ReadPackets</code> and <code>CL_SendCmd</code> :<br/>
			<br/>
				Take care of the <b>Network</b> piece of the engine. 
				<code>CL_SendCmd</code> grabs the mouse/keyboard inputs, generates a command, which is then sent. 
				As Quake World used UDP, the reliability is mainly replicated via a set of sequence/sequenceACK in the netChannel packet headers. Additionally, the last sent command is systematically re-sent.
				Regarding the flow control, there is no limitation on client side, updates are sent as fast as possible. On server side, a message is sent to a client only if a packet has been received and if the sending rate is below a "choke" limit. This limit is set from client side and sent to the server.
				<br/><br/>
				An entire <a href="quakeSourceNetWork.php">section</a> is dedicated to this part.
			<br/>
			<br/>
		
		
			<code id="prediction">CL_SetUpPlayerPrediction</code> , <code>CL_PredictMove</code> and <code>CL_EmitEntities</code> :<br/>
			<br/>
				Take care of the <b>Prediction</b> piece of the engine as well as collisions.  The goal is mainly to fight network communication latency.<br/>
				<br/>
				An entire <a href="quakeSourcePrediction.php">section</a> is dedicated to this part.
		<br/>
		<br/>	
		
			<code id="rendition">SCR_UpdateScreen</code> :<br/>
			<br/>
				Take care of the <b>Rendition</b> piece of the engine. In this part, the BSP/PVS is extensively used. This is also where a fork occurs in the code based on <code>include</code>/<code>define</code>. Quake engine can render the world either with pure software or hardware accelerated. <br/>
				<br/>
				An entire <a href="quakeSourceRendition.php">section</a> is dedicated to this part.
		<br/>
		<br/>	

			
			
			
			
			<h3>Opening the zip and compiling</h3>
			<p id="paperbox">	
				
				<u>Opening the zip:</u><br/><br/>
				Upon opening q1sources.zip, there is two folders/Visual Studio projects: <code>QW</code> and <code>WinQuake</code>.
				<ul>
					<li><code>WinQuake</code> is the code with client and server code melted together, running within one single process (Ideally, they would have been two different processes if DOS had supported them). Network gaming was still possible via LAN only.</li>
					<li><code>QW</code> is "Quake World" project, where Server and Client are meant to run on different machine (notice the client staring point is <code>WinMain</code> (in <code>sys_win.c</code>), whereas the Server stating point is <code>main</code> (also in <code>sys_win.c</code>)).</li>
				</ul>
				<br/>
			</p>
			<p>	
				I studied Quake World, openGL rendered ; Upon opening the solution, 4 sub-projects can be seen:
				<ul>
					<li><code>gas2asm</code> - Utility to port assembler code from GNU ASM to x86 ASM</li>
					<li><code>qwcl</code> - The client part of Quake</li>
					<li><code>QWFwd</code> - Proxy sitting in front of Quake Servers</li>
					<li><code>qwsv</code> - The server part of Quake</li>
				</ul>	
			</p>
			<p>	
						<br/>
				<br/>
				<u>Compiling:</u><br/><br/>
				After installation of Windows and DirectX SDKs, compilation with Visual Studio 2008 raised one error :<br/>
			
			<pre class="long">
			
			
		.\net_wins.c(178) : error C2072: '_errno' : initialization of a function
		
			</pre>
			</p>

			<br/>

			<p>

				Nowadays, <code>_errno</code> is a Microsoft macro used for something else. You can fix these errors by changing the name of the variable from <code>_errno</code> to <code>qerrno</code> for example.

			</p>

			<br/>

			<p>

				<code>net_wins.c</code>

			<pre  class="long">
			
	if (ret == -1)

	{

		int qerrno = WSAGetLastError();



		if (qerrno == WSAEWOULDBLOCK)

			return false;

		if (qerrno == WSAEMSGSIZE) {

			Con_Printf ("Warning:  Oversize packet from %s\n",

				NET_AdrToString (net_from));

			return false;

		}





		Sys_Error ("NET_GetPacket: %s", strerror(qerrno));

	}
		</pre>
	</p>
			<p>	
				The linker will complain about LIBC.lib in qwcl project, just add it to the list of "Ignored Library", the 4 projects should build.
			</p>

			
			
			
			
			
			
			
			
			
			
			
			<h3>Tools</h3>
			<p id="paperbox">
				For the IDE, Visual Studio Express (free), was awesome.<br/>
				A few books I highly recommend to read if you want to dig further into BSP/PVS based engine, Id Software and Quake:<br/>
				<br/>
				<a href="index.php"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-left:15px;" src="../books/realTime.jpg"></a>
				<a href="index.php"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-left:15px;" src="../books/cProgrammingLanguage.jpg"></a>
				<a href="index.php"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-left:15px;" src="../books/BlackBookGfxProg.jpg"></a>
				<a href="index.php"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-left:15px;" src="../books/mastersDoom.jpg"></a>
				<br/>
				<br/> My bookshelf during the Quake Source Code week:<br/> <br/><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-left:15px;margin-left:auto;margin-right:auto;display:block;"  src="myBookShelf.jpg"/>	
			</p>
			
			
			
			
			
			
		
		
		
<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

