<script type="text/javascript">
  var disqus_identifier = "quakeSource";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake engine, Documented Quake source, Quake code review, idtech1"/>
		<meta name="Description" content="Quake source code review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       March 9th, 2009</div>
   <h1>Quake Engine code review : Network (2/4)</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quakeEngine.jpg"" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         				
			QuakeWorld network architecture was considered a ground breaking innovation at the time. 
			All network game successor used the same approach. Here are the details.
			<br/>
			<br/>
			This article is in four parts :<br/>
			<br/>
					<a href="index.php">Architecture section</a><br/>
<a href="quakeSourceNetWork.php">Network section</a><br/>
<a href="quakeSourcePrediction.php">Prediction section</a><br/>
<a href="quakeSourceRendition.php">Rendition section</a><br/>

					<br/>					<div style="clear:both;"></div>
			</p>
				
			<h3>Network stack
			</h3>
			
			<p id="paperbox">	
				Quake's elementary unit of communication is the <code>command</code>. They are used to update a player position, orientation, health, damage, etc.
				TCP/IP features a lot of great functionalities that would be nice to have in a real time simulation ( flow-control, reliability, packet sequencing) but could not be used for Quake World Engine (it was in the original Quake). In a FPS, information that is not received ASAP is not worth re-sending.
				So UDP/IP was selected and in order to implement reliability and packet sequencing, the network abstraction layer "<code>NetChannel</code>" was created.<br/>
				<br/>
				From an OSI perspective, <code>NetChannel</code> sits very nicely on top of UDP :<br/>
				<br/>
				
				
				<img  style="display: block; margin-left: auto; margin-right: auto; " src="stack.jpg" />
				
				<br/>
				So, to summarize: The engine deals mostly with <code>commands</code>. When it needs to send or receive, it delegates the task to methods <code>Netchan_Transmit</code> and <code>Netchan_Process</code> from <code>netchan.c </code> (those methods are the same on client and server).
			</p>	
			
			<h3>NetChannel Header
			</h3>
			<p id="paperbox">
				Here is the structure of a NetChannel header:<br/>
				<br/>
				<link type="text/css" rel="stylesheet" href="schemas.css">
				<table class="packet">
					<tr>
						<th>Bit offset</th>
						<th>Bits 0-15</th>
						<th>16-31</th>
					</tr>
					<tr>
						<td>0</td>
						<td colspan="2">Sequence</td>
					</tr>
					<tr>
						<td>32</td>
						<td colspan="2">ACK Sequence</td>
					</tr>
					<tr>
						<td width="20%">64</td>
						<td width="40%">QPort</td>
						<td width="40%">Commands</td>
					</tr>
					
					<tr>
						<td>94</td>
						<td colspan="2">...</td>
					</tr>
				</table>
				<br/>
				<ul>
					<li>Sequence is an <code>int</code> initialized by the sender and incremented by one every times a packet is sent. The purpose of <code>sequence</code> is multiple but the most important is to provide the receiver with a way to recognized lost/duplicate/out of order UDP packets. The strongest bit of the int is not part of the sequence but a flag indicated that the payload (<code>commands</code>) contains <u>reliable data</u> (more about this later).</li>
					<li>ACK Sequence is also an <code>int</code>, it is equal to the last sequence number received. With this, the other end of the NetChannel can see if a packet was lost.
					<li>QPort is here to circumvent a bug with NAT routers (Read more at the end of this page). The value is a random number set when the client starts up.
					<li>Commands: Is the payload</li>
				</ul>
				</p>
				
				<h3>Reliable messages
			</h3>
			<p id="paperbox">
				<br/>
				Unreliable commands are grouped in a UDP packet, marked with the last outgoing sequence number and sent ; it doesn't matter to the sender if they get lost.<br/>
				Reliable commands are dealt with differently, the key is to understand that there can be only one reliable UDP packet unacknowledged between a sender and a receiver.<br/>
				<br/>
				Every game loops, if a new reliable command is generated it is added to the <code>message_buf</code> array (piloted via the <code>message</code> variable) (<b>1</b>).
				The set of reliable commands is then moved from <code>message</code> to the <code>reliable_buf</code> array  (<b>2</b>). This happens only if <code>reliable_buf</code> is empty (if it is not empty, this means that an other set of commands was sent before and has not yet been acknowledged). <br/>
				<br/>
				The final UDP datagram is then created: NetChannel header is added  (<b>3</b>) then <code>reliable_buf</code> content and unreliable commands of the moment, if there is enough space available.<br/>
				<br/>
				On the receiving end, the UDP message is parsed, the incoming <code>sequence</code> number is transfered to the outgoing <code>sequence ACK</code>  (<b>4</b>),  (along with the bit flag indicating the packet contained reliable data).
				<br/>
				<br/>
				On the next message received:<br/>
				<ul>
					<li>If the reliable bit flag is set to true, the UDP packet made it to the receiver. NetChannel can clean <code>reliable_buf</code>  (<b>5</b>) and is ready to send a new set of commands.<br/> </li>
					<li>If the reliable bit flag is set to false, the UDP did not made it to the receiver. NetChannel will try to send the content of <code>reliable_buf</code> again. New commands will pile up in <code>message_buf</code>, if this array overflows, the client is dropped.</li>
				</ul>
				<br/>
				<img style="display: block; margin-left: auto; margin-right: auto; " src="reliable.jpg"/>
				<br/>
			</p>
			
			<h3>Flow-Control
			</h3>
			<p id="paperbox">
				As far as I could read, there is flow-control on server side only ; A client sends its state updates as fast as it can.<br/>
				The first flow control rule, active on the server is to send a datagram only if a datagram was received from the client. The second form of control flow is "choke", a parameter the client is able to set via the <code>rate</code> command in the console.
				This will make the server skip update messages, lowering the amount of data sent to the client.
			</p>
			





			<h3>Important commands
			</h3>
			<p id="paperbox">
				Commands have a type code stored in a <code>byte</code>, followed by the payload of the command. Probably the most important are the commands giving information about the state of the game (<code>frame_t</code>):<br/>
				
				<ul>
					<li><code>svc_packetentities</code> and <code>svc_deltapacketentities</code>: Update entities such as rocket trail, explosion, particles etc...</li>
					<li><code>svc_playerinfo</code>: Send update about players position, last command and command duration in msec</u></li>
				</ul>		
				
			</p>
			
			<h3>More on the qport
			</h3>
			<p id="paperbox">
				Qport was added to the NetChannel header to fix a bug. Before the qport, Quake server identified a client by the combination (remote IP,remote UDP port). This worked fine most of the time but certain NAT router can change their schema of port translation (remote UDP port) sporadically. UDP port being unreliable, John Carmack explained in one of his plans that he decided to identify a client by (remote IP, Qport in NetChannel header).
				This fixed the confusion and also allowed the server to adjust the target UDP response port on the fly. 
			</p>
			
			<h3>Latency calculation
			</h3>
			<p id="paperbox">
				Quake engine stores the 64 last sent commands ( in a <code>frame_t</code> array: <code>frames</code>) along with the <code>senttime</code>, they are directly accessible via the sequence number used to transfer them (<code>outgoing_sequence</code>).
				
			</p>
			<pre  class="long">
			
			
	frame = &cl.frames[cls.netchan.outgoing_sequence & UPDATE_MASK];
	frame->senttime = realtime;
				
	//Send packet to server
		
			</pre>
			<p>
				Upon aknowledgment from the server, the time the command was sent is retrieved via <code>sequenceACK</code>.
				Latency is calculated as follows:<br/>
			
				<pre  class="long">
				
	//Receive response from server 
				
	frame = &cl.frames[cls.netchan.incoming_acknowledged & UPDATE_MASK];
	frame->receivedtime = realtime;
	latency = frame->receivedtime - frame->senttime;
		
				 </pre>
			
			<br/><br/>
			
			
			<br/>	
			<h3>Some elegant things
			</h3>
			<p id="paperbox">

				<u>Array index cycling</u><br/>

				<br/>

				The network part of the engine stores the 64 last received UDP datagrams. The naive approach to cycle through the array would have been to use the modulo operator:<br/>

				<br/>

				<code>

				arrayIndex = (oldArrayIndex+1) % 64 ;

				</code>

				<br/><br/>

				Instead the new value is calculated with an "AND" binary operation on an UPDATE_MASK, UPDATE_MASK being equal to 64-1.<br/>

				<br/>

				<code>

				arrayIndex = (oldArrayIndex+1) & UPDATE_MASK;

				</code>

				<br/>

				<br/>

				The real code is actually:

			</p>

			<p id="codebox">

				<code>
				
		frame_t *newpacket; 
				
		newpacket = &frames[cls.netchan.incoming_sequence&UPDATE_MASK];
				
				</code>
			
			</p>
			<br/>
			<b><u>Update: Here is a response I received from "Dietrich Epp", regarding modulo optimization:</u></b><br/>
			<pre  class="long">
			
There is a problem with the final section where using the modulo operator is called "naive". 
Here is an example of the difference between the modulo and the "and" operator:

Create a file.c:
unsigned int modulo(unsigned int x) { return x % 64; }
unsigned int and(unsigned int x) { return x & 63; }

Run gcc -S file.c, and look at the output file.s. 
You'll see that the functions are line for line identical -- even though optimization is turned off! 
Same things go for "clever" things like doing << 5 instead of *32. 
These changes make the code less readable with no benefit whatsoever, 
so I've taken to considering the << 5 or & 63 versions to be "naive" and the *32 or %64 versions to be more intelligent.

--Dietrich

.globl modulo
    .type    modulo, @function
modulo:
    pushl    %ebp
    movl    %esp, %ebp
    movl    8(%ebp), %eax
    andl    $63, %eax
    popl    %ebp
    ret
    .size    modulo, .-modulo
.globl and
    .type    and, @function
and:
    pushl    %ebp
    movl    %esp, %ebp
    movl    8(%ebp), %eax
    andl    $63, %eax
    popl    %ebp
    ret
    .size    and, .-and
			</pre>
			
			
			<br/>			
			<br/>
			<p>
				<a  style="display: block; text-align: center;" href="index.php#netchannel"> Return to main Quake Source Exploration page.</a>
			</p>
			</p>

<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

