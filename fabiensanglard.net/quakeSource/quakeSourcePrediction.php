<script type="text/javascript">
  var disqus_identifier = "quakeSource";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake engine, Documented Quake source, Quake code review, idtech1"/>
		<meta name="Description" content="Quake source code review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       March 9th, 2009</div>
   <h1>Quake Engine code review : Prediction (3/4)</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quakeEngine.jpg"" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         			We just saw the NetChannel abstraction for network communication. Now are are going to
			see how lacenty was compensated via Predictions. Here is some additional material: <br/>
			<br/>
			<ul>
			<li>An <a href="johnc-log.aug.htm">article </a> by John Carmack himself.<br/>
			<li>An other <a href="http://developer.valvesoftware.com/wiki/Latency_Compensating_Methods_in_Client/Server_In-game_Protocol_Design_and_Optimization">article</a> (<a href="Lag_Compensation.zip" >archive</a>) by Valve describing Half-life engine (Half-life uses Quake engine).
			</ul>
			<p>
			This article is in four parts :<br/>
			<br/>
					<a href="index.php">Architecture section</a><br/>
<a href="quakeSourceNetWork.php">Network section</a><br/>
<a href="quakeSourcePrediction.php">Prediction section</a><br/>
<a href="quakeSourceRendition.php">Rendition section</a><br/>

					<br/>				<div style="clear:both;"></div>
			</p>
					
			
			<h3>Prediction</h3>
			
			<p id="paperbox">
				Prediction is probably the hardest, the least documented and the most important piece of Quake World Engine. The goal of the prediction is to beat latency, namely compensate the delay it takes for the medium to transmit informations. This is done on client side, the process is called "Client Side Prediction", there is no Lag Compensation technique on server side.
				<br/><br/>The issue:<br/><br/>
				<br/>
				<img style="display: block; margin-left: auto; margin-right: auto;" src="prediction.jpg"   />
				<br/>
				<br/>
				So gamestate is latency/2 old. If we include the time to sent the command, we have to wait a round trip (latency) to see the result of our actions:<br/>
				<img style="display: block; margin-left: auto; margin-right: auto;" src="prediction2.jpg"   />
				<br/>
				<br/>
				The key to understand Quake prediction system is to understand how NetChannel populate the "<code>frames</code>" variable (an array of <code>frame_t</code>).
				<br/><br/>
				<br/>
				<img style="display: block; margin-left: auto; margin-right: auto;" src="frameQuestion.jpg"   />
				<br/><br/>
				Every command sent to the server is saved in <code>frames</code>, along with the <code>senttime</code>, at index <code>netchannel.outgoingsequence</code>.<br/>
				When the server acknowledge the reception of the command via <code>sequenceACK</code>, we can retrieve the sent command and calculate latency:<br/>
				<br/>
				<code>latency = senttime-receivedtime;</code><br/>
				<br/>
				At this point, we have the world the way it was a <u>latency/2</u> ago. On a NAT latency is fine (&lt;50ms) but on Interet, it's huge (>200ms) and prediction have to be done to simulate the world <u>right now</u>.
				This is done differently for local player and other players
			</p>
				
				



			<h3>Local player
			</h3>
			<p id="paperbox">
				For local player, latency is pretty much reduced to 0, by extrapolating what will be the server state. This is done by using the last received state from the server and play all commands sent since.
				<img style="display: block; margin-left: auto; margin-right: auto;"  src="prediction3.jpg"/><br/>
				The client hence predict what will be its position on the server at t+latency/2. <br/>
				<br/><br/>
				From a code perspective, this is done in the <code>CL_PredictMove</code> method, first Quake engine decide the sentime limit for playable commands:<br/>
				<br/>
				<code>cl.time = realtime - cls.latency - cl_pushlatency.value*0.001;</code>
				<br/>
				<br/>
				<b>Note:</b> <code>cl_pushlatency</code> is a cvar set on client side, equals to minus the client latency in milliseconds. Hence we can pretty much conclude: <code> cl.time = realtime </code>.
				<br/><br/>
				Then every other players are turned solid via <code>CL_SetSolidPlayers (cl.playernum);</code> (so collision can be tested) and commands sent since the last received state are played until: <code>cl.time <= to->senttime</code> (collision are tested each iteration via <code>CL_PredictUsercmd</code>).
				<br/>
			</p>
			



			<h3>Other players
			</h3>
			<p id="paperbox">
				For other players, Quake engine doesn't have the "commands-sent-but-not-yet-acknowledged" so extrapolation is used instead. Starting from the last known position, <code>cmd</code> are extended to predict used position. Angle rotation are not predicted, only position.<br/>
				<br/>
				<br/>
				Quake World also takes into account other player's latency. Each client's latency is sent along with worldupdate.
			</p>
			
			
			<h3>Code</h3>
			<p id="paperbox">
				The prediction and collision code can be summarized as follow:<br/>
			</p>
			<pre  class="long">
				
		CL_SetUpPlayerPrediction(false)
		CL_PredictMove 
		|	/* Local player is moved */
		|	CL_SetSolidPlayers
		|	|	CL_PredictUsercmd
		|	|		PlayerMove
		|	Interpolate linearely
		CL_SetUpPlayerPrediction(true)
		CL_EmitEntities 
			CL_LinkPlayers
			|	/* Other players is moved */
			|	for every players
			|	|	CL_SetSolidPlayers
			|	|	CL_PredictUsercmd
			|	|		PlayerMove
			CL_LinkPacketEntities
			CL_LinkProjectiles
			CL_UpdateTEnts
			
			</pre>	
			<p>
				This part is complicated because not only Quake Work perform predictions on players but also it has to perform collision detection on predictions.<br/>
			<br/>
				<u><code>CL_SetUpPlayerPrediction(false)</code></u><br/><br/>
				The first call do not perform any prediction, it only setup other players as they were received from server (so in the past at t-latency/2).
				<br/>
				<br/>
				<br/>
				<u><code>CL_PredictMove()</code></u><br/><br/>
				This is where the local player movement is performed:<br/>
					<ul>
						<li> Orientation is not interpolated and is full realtime.</li>
						<li> Position and velocity: all commands sent until now (<code>cl.time <= to->senttime</code>) are applied to the last position/velocity received from the server.</li>
					</ul>
				</p>
				<p id="paperbox">
				<br/>
				More on Position and velocity update:</br>
					<ul>
						<li> Other players are first turned solid (in there last know position, set in <code>CL_SetUpPlayerPrediction(false)</code> ) via <code>CL_SetSolidPlayers</code>.</li>
						<li> Engine loops against sent commands, checking for collision and predicting the position via <code>CL_PredictUsercmd</code>, collision against other players are also tested.</li>
						<li> Resulting position and velocity are stored in <code>cl.sim*</code>, this will be used later for POV setup.</li>
					</ul>
				<br/>
				</p>
				<p id="paperbox">
				<br/>
				<u><code>CL_SetUpPlayerPrediction(true)</code></u><br/><br/>
				In the second call, other players position are predicted at the current time on server side(but no movement is performed yet). Position is extrapolated with the last known commands and last know position.<br/>
				<br/>
				<b>Note:</b> There is a bit of a problem here: Valve recommendations (for <code>cl_pushlatency</code>), end up having local player predicted at t+latency/2 on server side. However, other players position is predicted at t on server side. Maybe <code>cl_pushlatency</code> best setting for QW was -latency/2 ? <br/>
				<br/>
				<br/>
				<u><code>CL_EmitEntities</code></u><br/><br/>
					Here is where visibiliy edicts are generated. They will feed the rendered.<br/>
					<ul>
						<li><b>CL_LinkPlayers :</b> Other players movment is performed, other players are turned solid in turn and collision detection is performed against their predicted position.</li>
						<li><b>CL_LinkPacketEntitiesPacket :</b> entities from last state received from server are predicted and linked to visibility edicts. This is why the missile you fire is lagged.</li>
						<li><b>CL_LinkProjectiles :</b> Nails and stuff</li>
						<li><b>CL_UpdateTEnts :</b>Standard Light beams and entities update.</li>
						<br/>
					</ul>
				<br/>
				
			</p>
			

			
			<br/>	
						<br/>	
			
			
				<a  style="display: block; text-align: center;" href="index.php#prediction"> Return to main Quake Source Exploration page.</a>
			</p>
			</p>


<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

