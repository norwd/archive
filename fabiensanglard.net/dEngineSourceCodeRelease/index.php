<script type="text/javascript">
  var disqus_identifier = "dEngineSourceCodeRelease";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="iPhone 3D engine, openGL ES 1.1, openGL ES 2.0, bumpMapping, shadowMapping, tutorial, specularMapping, Source Code"/>
		<meta name="Description" content="Iphone 3D engine"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>iOS 3D engine source code</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       April 28th, 2011</div>
   <h1>dEngine: iOS 3D renderer source code</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="../dEngine/dEngine.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
	
				I've decided to release the source code of the OpenGS ES 1.0/2.0 renderers I wrote in the summer of 2009 nicknamed "dEngine". It was the first renderer to feature Shadow Mapping and Bump Mapping on iPhone at the time. Note that shadow mapping was achieved by packing the depth informations in a color texture but now you have access to <code>GL_OES_depth_texture</code> so you should be able to gain some speed.<br/>
				<br/>
				The overall code quality is far from exceptionnal (support for two object types WTF ?!?)but I consider it a good tutorial for OpenGL ES 2.0, you can read about bump-mapping and shadow-mapping with a fun example from a Doom 3 level.<br/>
				<br/>
				The OpenGL ES 2.0 renderer feature uber-shaders: Depending on the material currently renderered a shader is recompiled on the fly in order to avoid branching.<br/>
				<br/>
				Enjoy:<br/>
				<br/>


				<table border="1" style="border:2px solid ;  border-collapse:collapse;width:100%; text-align:center;"  cellspacing="5" cellpadding="0" style=""> 
					<tr style="border:1px solid ;">   
						<td style="border:2px solid ;padding:5px;border-color:#555555;">
							Screenshot
						</td>
						<td style="border:2px solid ;padding:5px;border-color:#555555;">
							Source Code on GitHub
						</td>
					</tr>
					<tr style="border:2px solid ;">
						<td style="border:1px solid ;padding:5px;border-color:#555555;">
							<img style="margin-right: 10px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;" src="../dEngine/shadowMapping.JPG"/>
						</td>
						<td style="border:2px solid ;border-color:#555555;">
							<u>Browse the source code on gitHub :</u> <br/>
							<br/><br/>
							<a href="https://github.com/fabiensanglard/dEngine"><img style="" src="../images/xcode-icon.png" /></a><br/>
							<br/>
							<br/>
							<br/>
							<br/>
							<br/>

							<br/>
							<u>Get it from GIT command line :</u><br/><br/>
							<br/>
							<pre class="long" style="width:95%; margin-left:10px;">


   git clone https://github.com/fabiensanglard/dEngine.git

							</pre>
						</td>
					</tr>
				</table>
				
			<div style="clear:both;"></div>

			<br/>
</p>


			
<h3>A few videos</h3>
			<p id="paperbox">

			The following videos show characters from Doom3 that I used to test the engine, the HellKnight is 2200 poly, the rest of the room visible is 1000.
			The materials all feature a diffuse map, a normal map and a specular map ( up to 512x512 ). The shadow is generated via a shadowmap ( because render to depth texture is not supported on iPhone (<code>GL_OES_depth_texture</code>), depth value are packed in a R8G8B8A8 color texture twice the size of the screen).<br/>
			<br/><br/>
<table>
<tr>
<td style="text-align: center">
			<b>iPHone 3GS programmable pipeline, running at 27fps.<br/></b>
</td>
<td style="text-align: center">
			<b>iPhone 2G/3G fixed pipeline, running at 45fps.<br/><b>
</td>
</tr>
<tr>
<td>

<video width="480" height="336" preload="none" poster="../dEngine/doomRotated-poster.jpg" controls>
  <source src="../fd_proxy/dEngine/doomRotated.mov" type="video/mp4">
  Your browser does not support the video tag.
</video>
</td>
<td>

<video width="480" height="336" preload="none" poster="../dEngine/doom3GRotated-poster.jpg" controls>
  <source src="../fd_proxy/dEngine/doom3GRotated.mov" type="video/mp4">
  Your browser does not support the video tag.
</video>
</td>
</tr>
</table>








			<h3>Polymorphism</h3>

			<p id="paperbox">
				 The rendering path is abstracted via a C struct containing function pointers a la Quake 2.<br/>
				<pre class="long">

	typedef struc renderer_t
	{
		uchar type;
		void (*Set3D)(void); 
		void (*StartRendition  )(void); 
		void (*StopRendition  )(void); 
		void (*SetTexture)(unsigned int);
		void (*RenderEntities)(void);
		void (*UpLoadTextureToGpu)(texture_t* texture);
		void (*Set2D)(void);
		//...
	} renderer_t

				
	//	renderer_fixed.h
	void initFixedRenderer(renderer_t* renderer);

	//   renderer_progr.h
	void initProgrRenderer(renderer_t* renderer);

				</pre>	

				<br/>
                <p>
				The "implementation" of every function is hidden in the .c of each renderer, <code>initFixedRenderer</code> and <code>initProgrRenderer</code> only expose the function address via the pointer.<br/>
				</p>
                </p>
            </p>
			<h3>A few optimizations...</h3>
			
			<p id="paperbox">	
				<u>Texture compression</u> is a big win as a 32bits per texel RGBA textures is a pig with no real reason to exist when working with a small display. OpenGS ES 1.1 and 2.0 do not require the GPU to support any texture compression but the good guys at Imagination Technologies provided support for PVRTC which bring down consumption to as low at 2bits per pixel with alpha support !<br/>
                <br/>
                <u>Vertex metadatas</u> can be slimmed down as well:<br/>
				<br/>
				A "regular" vertex is:<br/>
<pre class="long">

	Vertex Elementary unit:

	position   	3 floats
	normal		3 floats
	tangent		3 floats
	textureCoo	2 floats
	-------------------
	            44 bytes

</pre>
<p>By packing the components in "shorts" instead of "floats" via normalization, you end up having:<br/></p>
<pre class="long">

	Vertex Elementary unit:

	position   	3 floats
	normal		3 shorts
	tangent		3 shorts
	textureCoo	2 shorts
	-------------------
	            28 bytes

</pre>
    <p>It's almost like we "compress" the data on the CPU, send it to the GPU where they are "decompressed". Abusing normalization divide bandwidth consumption by almost 50% and help to slightly improve performances.<br/>
    <br/>
	<br/>
</br>
    <u>Compiler tuning</u> is also important. Xcode is setup by default to generate ARM binaries using the Thumb instruction set, which is 16 bits instead of 32 bits. This reduce the size of the binary and the cost for Apple but it's bad for 3D as Thumb instruction have to be translated to 32bits.
    Uncheck this option for an instant gain of performances.<br/>
    <br/>
    <u>Framebuffer refresh</u> can also be improved a lot with 3.1 firmware. This is an issue I mentionned in my <a href="../wolf3d/index.php">article</a> about Wolfenstein for iPhone: NSTimer is an abomination and I was trilled to find we can now use <code>CADisplayLink</code> to perform vsync and get adaptative framerate ( although I'm experimenting some nasty touchesMoved on non 2G v3.X devices, if you have any info about this, email me !).<br/>
    <br/>
    <u>Reduze Framebuffer colorspace</u> is an other way to improve performances by reducing the amount of written data. Move from 24bits color space to 16 bits provides some good improvements.<br/>
    <br/>
    <pre class="long">
    
    CAEAGLLayer *eaglLayer = (CAEAGLLayer *)self.layer;
		
    eaglLayer.opaque = YES;
    eaglLayer.drawableProperties = [NSDictionary dictionaryWithObjectsAndKeys:
        [NSNumber numberWithBool:YES], 
        kEAGLDrawablePropertyRetainedBacking, 
        
        //FTW
        //kEAGLColorFormatRGBA8, 
        kEAGLColorFormatRGB565,


        kEAGLDrawablePropertyColorFormat, nil];
        
	</pre>
        <p>
			Stating the obvious here, but <u>reduce texture & blending mode</u> switches are very important ( Forget about good perf if you do more than 60 textures changes). The material approach of the engine can very handy in this regard.</br>
			<br/>
			Reduce blending of your polygons is PARAMOUNT: PowerVR performs TBDR (tile-based deferred rendering) which mean that one pixel is rendered only once via hidden surface removal, blending is defeating the purpose. My take is that a blended polygon is rendere regardless of the culling outcome and it destroys perfs.<br/><br/>
            And last but not least, <u>optimize the vertice indices</u> so GPU fetches will hit the cache as much as possible.<br/>
        </p>

		
			</p>


<h3>Uber shader</h3>
		
			<p id="paperbox">
			 Depending on the materials properties used in a scene , the shader is re-compiled at runtime and then cached. This approach allow to reduce branching operation in the shader. I was very pleased with the result, if I stay below 10/15 shader switches per frame there is no significant performance drop.
			 <br/>
<pre class="long">

    //snipet of the fragment shader

    #ifdef BUMP_MAPPING
        bump		=  texture2D(s_bumpMap, v_texcoord).rgb * 2.0 - 1.0;
        lamberFactor  =  max(0.0,dot(lightVec, bump) );
        specularFactor = max(0.0,pow(dot(halfVec,bump),materialShininess)) ;
    #else
        lamberFactor  =  max(0.0,dot(lightVec, v_normal) );
        specularFactor = max(0.0,pow(dot(halfVec,v_normal),materialShininess)) ;
    #endif
	
    #ifdef SPEC_MAPPING
        vec3 matTextColor = texture2D(s_specularMap, v_texcoord).rgb; 
    #else
        vec3 matTextColor = matColorSpecular;
    #endif

</pre>
      
        
	</p>
    
   <h3>The now obsolete depth packing into a color buffer.</h3>
        
			<p id="paperbox">
            I love shadows effects, I think the realism and ambiance you get totally justify the cycles and bandwidth cost. It doesn't come for free in openGL and it's quite ugly to do with the fixed pipeline but I was trilled to have it working on mobile shaders. Unfortunatly as of today, iPhones don't support <code>GL_OES_depth_texture</code>, which mean you cannot render directly to the a depth texture. The workaround is to pack a 32 floating point value into 4x4 bytes color (RGBA) texture:<br/>
			<pre class="long">

	// This is the shadowmap generator shader

	const vec4 packFactors = vec4( 256.0 * 256.0 * 256.0,256.0 * 256.0,256.0,1.0);
	const vec4 bitMask     = vec4(0.0,1.0/256.0,1.0/256.0,1.0/256.0);

	void main(void)
	{
		float normalizedDistance  = position.z / position.w;
		normalizedDistance = (normalizedDistance + 1.0) / 2.0;

		vec4 packedValue = vec4(fract(packFactors*normalizedDistance));
		packedValue -= packedValue.xxyz * bitMask;

		gl_FragColor  = packedValue;
	}

			</pre>
			<p>
				This method to pack float in bytes is pretty clever (not mine) because it accounts for the internal accuracy of any GPU ( via the substraction line) and hence can be used on any kind of GPU (PowerVR,ATI,NVidia). Gratz to however came up with this.</br>
				Note: Since the publication of this article, iOS devices have added support for <code>GL_OES_depth_texture</code>.
			</p>

<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

