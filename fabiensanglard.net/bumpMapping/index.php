<script type="text/javascript">
  var disqus_identifier = "bumpMapping";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="c++, GLSL, Shaders, Bump Mapping, Tangent Space, Parallax mapping"/>
		<meta name="Description" content="BumpMapping and Parallax Mapping Tutorial"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>BumpMapping with GLSL</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       March 19th, 2009</div>
   <h1>BumpMapping with GLSL</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="thumb.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
		When I got started learning bump mapping and parallax mapping, I found a lot of tutorial involving a simple rectangle but nothing close to real life usage:<br/> 
		<br/>This is my attemps to fill the gap.<br/>
		<div style="clear:both;"></div> 
		</p>
				
				
		
		


			
			
			<h3>Concept</h3>
			<p id="paperbox">
				BumpMapping allows designers to express their creativity through a 100,000+ polygons creature. Once art is done, a low poly model (5000 polygons) is automatically generated along with a normal map.
				<img src="maxTomd5.jpg"  style="display: block; margin-left: auto; margin-right: auto; "/><br/>
				<br/>
				
				
				At runtime, details are added back by combining the low model with the normal map.<br/>
			</p>
			
			<br/>
			<h3>Illumination model.
			</h3>
			<p id="paperbox">
				Details are added back to the low poly via surface reaction to the light. The illumination equation is Blinn-Phong where:<br/><br/>
				<code>pixelColor= Ambient + (Diffuse + Specular) * Shadow</code> ( but let's forget about shadow).<br/>
				<br/>
				<br/>
				<code>Ambient = ambientMaterial * ambientLight </code><br/>
				<br/>
				<br/>
				<code>Diffuse = diffuseMaterial * diffuseLight * lamberFactor</code><br/>
				<code>lamberFactor = max (dot (lightVec, normal), 0.0) </code>
				<br/>
				<br/>
				<code>Specular = specularMaterial * specularLight * speculatCoef</code><br/>
				<code>speculatCoef = pow (max (dot (halfVec, normal), 0.0), shininess)</code>  <br/>
				<br/>
				
				<br/>
				<u>Details:</u><br/>
				<ul>
					<li>Ambient is pretty much a constant.</li>
					<li>Diffuse depends on the angle between the light vector and the surface normal vector.</li>
					<li>Specular depends on the angle between the eye vector and the surface normal vector.</li>
				</ul>
				<p>
				<br/>
				<u>Note:</u> As we deal with normal vectors, a cosinus can be obtained with a simple dot product.<br/>
				<br/>
				Usually, every calculations are done in eye space, but in bump mapping the normal vector from the normal map are expressed in Tangent space. 
				We hence need to transform all of the vectors requiered . In order to do this, we use a matrix: Eye space -> Tangent space.
				</p>
			</p>
			
			<br/>
			<h3>Tangent space maths.
			</h3>
			<p id="paperbox">
				The matrix for each vertex is as follow:
				<pre  class="long">
				
				
	[	Normal.x 	Normal.y 	Normal.z	]
	[	BiNormal.x	BiNormal.y	BiNormal.z	]
	[	Tangent.x	Tangent.y	Tangent.z	]
	
				</pre>
			
				<p>
				
				Normal is easy to calculate. A simple cross-product per face. The normal for a vertex is equal to the sum of normals (all faces related to this vertex), normalized at the end.<br/>
				
			<pre  class="long">
			
	for each faces in model
	{
		generate the face's normal via cross product
		fore each vertex in the face, add the normal vector
	}
	
	for each vertices in model
		normalize normal vector
					
					
			</pre>			
			<br/>
			<p>
				For the tangent and binormal, you can find the solution in any good math book ( I highly recommend <a href="index.php">Mathematics for 3D Game Programming </a> ). Here is a code sample:<br/>
			</p>
			<pre  class="long">
			
	generateNormalAndTangent(float3 v1, float3 v2, text2 st1, text2 st2)
	{
		float3 normal = v1.crossProduct(v2);
		
		float coef = 1/ (st1.u * st2.v - st2.u * st1.v);
		float3 tangent;

		tangent.x = coef * ((v1.x * st2.v)  + (v2.x * -st1.v));
		tangent.y = coef * ((v1.y * st2.v)  + (v2.y * -st1.v));
		tangent.z = coef * ((v1.z * st2.v)  + (v2.z * -st1.v));
		
		float3 binormal = normal.crossProduct(tangent);
	}
				
			</pre>		
			<br/>
			<p>
			Just like normals: tangents and binormals are accumulated for each faces connected to this vertex and then averaged via normalization.<br/>
			<br/>
			In your implementation, try to visualize the vectors you generate, they need to be consistant because they will be interpolated by the GPU.
			
				<br/>
				<br/>
				<img src="normalVis.jpg" style="box-shadow: rgb(119, 119, 119) 3px 3px 3px; display: block; margin-left: auto; margin-right: auto; "/>
				<br/>			
				
			</p>
			<h3>CPU side</h3>
			
			<p id="paperbox">
				On the openGL side, a few things have to be done:
				<ul>
					<li>Bind the vertex array</li>
					<li>Bind the normal array</li>				
					<li>Bind the texture coordinate array</li>		
					<li>Bind the elements index array</li>				
					<li>Bind the tangent array to the shader</li>
					<li>Bind the color texture</li>		
					<li>Bind the normalmap texture (bump mapping)</li>		
					<li>Bind the heightmap texture (parallax mapping)</li>		
				</ul>
			<pre  class="long">
	
	// The vertex VBO is updated every frame for animation purpose
	glBindBufferARB(GL_ARRAY_BUFFER_ARB,vboVertexId);
	glVertexPointer (3, GL_FLOAT, 0, 0);

	// Same as vertex VBO: updated every frames
	glBindBufferARB(GL_ARRAY_BUFFER_ARB,vboNormalId);
	glNormalPointer(GL_FLOAT,0, 0);

	// VBO, created and populated once, texture coordinate never change
	glBindBufferARB(GL_ARRAY_BUFFER_ARB,vboTexturId);
	glTexCoordPointer(2,GL_FLOAT,0,0);

	// Tangent generated previously, no need to pass the binormal, a cross product will generate it
	glVertexAttribPointerARB(tangentLoc, 3, GL_FLOAT,GL_FALSE, 0, tangentArraySkinPointer);

	// VBO, created and populated once, elements to draw never change 
	glBindBufferARB(GL_ELEMENT_ARRAY_BUFFER_ARB,vboElementsId);
	glDrawElements (GL_TRIANGLES, meshes[i].facesCount * 3 , GL_UNSIGNED_INT, 0);

	
	glActiveTextureARB(GL_TEXTURE0);
	glBindTexture(diffuseTextureId);
	glUniform1iARB(diffuseTextureUniform,0);
	
	glActiveTextureARB(GL_TEXTURE1);
	glBindTexture(normalTextureId);
	glUniform1iARB(normalTextureUniform,0);
	
	glActiveTextureARB(GL_TEXTURE2);
	glBindTexture(heightTextureId);
	glUniform1iARB(heightTextureUniform,0);
			
			</pre>
			</p>
			
			<h3>GPU side</h3>
			<p id="paperbox">
				The role of the vertex shader is to build the matrix and rotate vectors used in Blinn-Phong model, hence:
				<ul>
					<li>Generate the bi-tangent with a cross-product from normal and tangent.</li>
					<li>Assemble the three vectors to form a rotation matrix, from camera space to tangent space.</li>
					<li>Rotate light and camera vectors.</li>
				</ul>
				<br/>
				In the fragment shader:<br/>
				<ul>
					<li>Retrieve the normal coordinate from the normal map texture.</li>
					<li>Convert value from [-1,1] to [0,1].</li>
					<li>Calculate angles, generate ambiant, diffuse and specular.</li>
					<li>Add ambiant, diffuse and specular component.</li>
				</ul>
			
			<u> Vertex shader</u>	
			<pre  class="long">

	
	attribute vec3 tangent;
	varying vec3 lightVec;
	varying vec3 halfVec;
	varying vec3 eyeVec;
	

  void main()
  {

	gl_TexCoord[0] =  gl_MultiTexCoord0;
	
	// Building the matrix Eye Space -> Tangent Space
	vec3 n = normalize (gl_NormalMatrix * gl_Normal);
	vec3 t = normalize (gl_NormalMatrix * tangent);
	vec3 b = cross (n, t);
	
	vec3 vertexPosition = vec3(gl_ModelViewMatrix *  gl_Vertex);
	vec3 lightDir = normalize(gl_LightSource[0].position.xyz - vertexPosition);
		
		
	// transform light and half angle vectors by tangent basis
	vec3 v;
	v.x = dot (lightDir, t);
	v.y = dot (lightDir, b);
	v.z = dot (lightDir, n);
	lightVec = normalize (v);
	
	  
	v.x = dot (vertexPosition, t);
	v.y = dot (vertexPosition, b);
	v.z = dot (vertexPosition, n);
	eyeVec = normalize (v);
	
	
	vertexPosition = normalize(vertexPosition);
	
	/* Normalize the halfVector to pass it to the fragment shader */

	// No need to divide by two, the result is normalized anyway.
	// vec3 halfVector = normalize((vertexPosition + lightDir) / 2.0); 
	vec3 halfVector = normalize(vertexPosition + lightDir);
	v.x = dot (halfVector, t);
	v.y = dot (halfVector, b);
	v.z = dot (halfVector, n);

	// No need to normalize, t,b,n and halfVector are normal vectors.
	//normalize (v);
	halfVec = v ; 
	  
	  
	gl_Position = ftransform();

  }

	
			</pre>
			<p>

			<u>Fragment shader</u>
			<pre  class="long">
			
	uniform sampler2D diffuseTexture;
	uniform sampler2D normalTexture;
	
	// New bumpmapping
	varying vec3 lightVec;
	varying vec3 halfVec;
	varying vec3 eyeVec;


  void main()
  { 

	// lookup normal from normal map, move from [0,1] to  [-1, 1] range, normalize
	vec3 normal = 2.0 * texture2D (normalTexture, gl_TexCoord[0].st).rgb - 1.0;
	normal = normalize (normal);
	
	// compute diffuse lighting
	float lamberFactor= max (dot (lightVec, normal), 0.0) ;
	vec4 diffuseMaterial = 0.0;
	vec4 diffuseLight  = 0.0;
	
	// compute specular lighting
	vec4 specularMaterial ;
	vec4 specularLight ;
	float shininess ;
  
	// compute ambient
	vec4 ambientLight = gl_LightSource[0].ambient;	
	
	if (lamberFactor > 0.0)
	{
		diffuseMaterial = texture2D (diffuseTexture, gl_TexCoord[0].st);
		diffuseLight  = gl_LightSource[0].diffuse;
		
		// In doom3, specular value comes from a texture 
		specularMaterial =  vec4(1.0)  ;
		specularLight = gl_LightSource[0].specular;
		shininess = pow (max (dot (halfVec, normal), 0.0), 2.0)  ;
		 
		gl_FragColor =	diffuseMaterial * diffuseLight * lamberFactor ;
		gl_FragColor +=	specularMaterial * specularLight * shininess ;				
	
	}
	
	gl_FragColor +=	ambientLight;
	
  }			
			</pre>
			
			</p>
			
			<h3>Results</h3>
			<p >
				<a href="normal.jpg">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-right:20px;" src="normalT.jpg" style="display:inline;"/></a>
				<a href="normalMapped.jpg">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-right:20px;" src="normalMappedT.jpg" style="display:inline;"/></a>
					<br/>
				<a href="normalMappedColor.jpg">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-right:20px;" src="normalMappedColorT.jpg" style="display:inline;"/></a>
				<a href="normalMappedColorShadow.jpg">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-right:20px;" src="normalMappedColorShadowT.jpg" style="display:inline;"/></a>
			</p>
			<br/>
			Note: The shadow component is not in the shader snippet but you can find it in the downloaded code.
			</p>







		<h3>Video</h3>
				<p>	 
			The video shows a 2000 polygons Hellknight:<br/>	
							<ul>
								<li>Raw model.</li>
								<li>Model with 512x512 bump mapping.</li>
								<li>Model with 512x512 bump mapping and diffuse/specular mapping.</li>
								<li>Model with 512x512 bump mapping and diffuse/specular mapping and shadow.</li>
								
							</ul>
							<br/>
				
						
				<object style="display: block; margin-left: auto; margin-right: auto; " width="700" height="400">
								<param name="movie" value="//www.youtube.com/v/njFurl4uwm8&hl=en&fs=1"></param>
								<param name="allowFullScreen" value="true"></param>
								<param name="allowscriptaccess" value="false"></param>
								<embed src="http://www.youtube.com/v/njFurl4uwm8&hl=en&fs=1" type="application/x-shockwave-flash" allowscriptaccess="false" allowfullscreen="true" width="700" height="400">
								</embed>
							</object>
				<br/><br/>	
				The code features a C++ md5 model viewer, you can configure a lot via config.cfg and define the scene in scene.cfg. I included the hellknight md5 so anybody can run the demo, I hope this will be tolerated as a matter of educationnal purpose.<br/>
				<br/>
				
				<br/><br/>
				<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px; display: block; margin-left: auto; margin-right: auto; " src="zenGraf.jpg"/<br/>
				<div style="text-align:center; ">An example of configuration for ZenFrag engine.</div>
				<br/>
				<br/>
			</p>
			





<h3>Downloads</h3>
				<p>	 	
					<ul>
						<li><a href="src.zip">Source</a>.</li>
						<li><a href="hellknight_linux_src.zip">Source cleaned up for linux.</a>.</li>
						<li><a href="win32.zip">Windows build</a>.</li>
						<li><a href="macosx.zip">Mac OSX build</a>.</li>
					</ul>	
				<p>
<u><b>April, 5 2010 :</b></u> It seems the binary distribution doesn't work with Windows 7. I'll have to take a look at this as soon as I have some time.
		</p>






			<h3>Recommended reading</h3>

			<p id="paperbox">

				A few books to learn more about bump mapping and parallax mapping. Doom3 is a great ressource to learn as well, every models are easily accessible and in plain text.<br/>

				<br/>

				<a href="index.php"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-right:20px;" src="../books/maths3D.jpg"></a>
				<a href="index.php"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-right:20px;" src="../books/shaderx3.jpg"></a>
				<a href="index.php"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin-right:20px;" src="../books/doom3.jpg"></a>
				<br/>

			</p>

<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>


