<script type="text/javascript">
  var disqus_identifier = "wolf3d";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="iphone, Objectice-C, ANSI C, C++, Wolfeinstein 3D, John Carmack"/>
		<meta name="Description" content="Wolfenstein 3D code review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Wolfenstein 3D for iPhone</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       April 20th, 2009</div>
   <h1>Wolfenstein 3D for iPhone</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="wold3Dthumb.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         	
				For once, developers were able to read the source code of an id software product just a few days after its release. I spent a week in my spare time reading the internal of the Wolfenstein 3D for iPhone engine. It is by far the cleanest and easiest id source code release to date.<br/>
<br/>	
	This review is far from being exhaustive but it provides answers to a few of the questions I asked myself:<br/>
	<ul>	
	<li>How was the absence of direct framebuffer access addressed ?</li>
		<li>How is the engine (ANSI C) coupled with Objective-C ?</li>
		<li>How was the absence of Immediate mode in openGL ES addressed ?</li>
		<li>Is <code>NSTimer</code> the only way to perform animation on this #*! iphone ?</li>
	</ul>
	<div style="clear:both;"></div>
			</p>



<h3>
Download</h3>
			
			<p id="paperbox">	
				<a href="ftp://www.idsoftware.com/idstuff/wolf3d/wolf3d_iphone_v1.0_src.zip"><img src="../images/xcode-icon.png"/></a>&nbsp;<a href="http://itunes.apple.com/WebObjects/MZStore.woa/wa/viewSoftware?id=309470478&mt=8"><img src="../fluide/avail_on_app_store.png" /></a>&nbsp;<br/>
			</p>




			<h3>Overall design</h3>
<p id="paperbox">	
	If you are not familiar with iPhone development, in a nutshell: You don't control it, it controls you ! The big picture does not look like the classic:<br/>
	<pre  class="long">

	int main(int argc,char* argv[])
	{
		while(gameOn)
		{
			getUserInputs();
			updateTimer();
			updateWorld();
			renderWorld();
			swapBuffer();
		}
	}

	</pre>
	<p>
	<br/>
	With something like this, you would have total control of the thread/process and it's just not the way the iPhone works. Everything is based on events, you define callback methods and function pointers that will be used by the iPhone when it needs it:<br/>
	<br/>
	<ul>
		<li>The "while loop", updateWorld  and renderWorld for instance are replaced by an object <code>NSTimer</code> that will call your rendering/update method at a FIXED rate.</li>
		<li>User inputs are handled via callbacks method, that your main class is supposed to overwrite.</li>
	</ul>
	<p>
	You end up having the following block to setup the <code>NSTimer</code> in <code>EAGLView.m</code>:<br/>
	<br/>
	</p>
	<pre  class="long">
		
	self.animationTimer = 

			[NSTimer scheduledTimerWithTimeInterval:0.032
			target:self 
			selector:@selector(drawView) 
			userInfo:nil repeats:YES];

	</pre>
	<p>
	<br/>
	As you can see, the method called by <code>NSTimer</code> is named <code>drawView</code>, the refresh rate is set to 1/0.032 (30Hz). The method <code>drawView</code> will update the world, calls the C rendering method (<code>iPhoneFrame</code>) and finally swap the buffer to the screen. 
	Most of the engine is ANSI C, Objective-C is just being used to host the windows, load textures and grab the users input.
	The following block shows the Objective-C method overwrite needed to grab user input. <br/><br/>
	</p>
<pre  class="long">

	- (void) touchesBegan:(NSSet*)touches withEvent:(UIEvent*)event {
		[self handleTouches:touches withEvent:event];
	}

	- (void) touchesEnded:(NSSet*)touches withEvent:(UIEvent*)event {
		[self handleTouches:touches withEvent:event];
	}

	- (void)touchesMoved:(NSSet *)touches withEvent:(UIEvent *)event {
		[self handleTouches:touches withEvent:event];
	}	

</pre>	
	<p>
		For any finger on the screen, the method <code>handleTouches</code> is called with data as parameters. The core of the ANSI C engine is then updated with new position and angles.
	</p>
	<br/>
</p>




			<h3>Engine</h3>
<p id="paperbox">

	<br/>
	<br/>
	The DOS version of wolfenstein was written in Borland C/TASM  with direct framebuffer access, it was a pure raycaster engine:<br/><br/> For every column of pixels on the screen, a ray was casted. Taking advantage of the axis aligned walls, the intersection of the ray with the first blocker was fast to determine. The distance from the POV would give the height of the pixel column to write in the framebuffer. After a little bit of fishBowl perspective correction you had the illusion of 3D. Check out F. Permadi's <a href="http://www.permadi.com/tutorial/raycast/rayc6.html#FINDING%20WALLS">article</a>, it's pure gold if you want to read more about raycasters engine.<br/>
	<br/>
<br/>
	<img style="display: block; margin-left: auto; margin-right: auto;" src="raycasting.png" /><br/>
	
	<br/>
	Wolfenstein for iPhone could not go this way because the iPhone library <code>CoreSurface/CoreSurface.h</code> needed to access the framebuffer is restricted. You just can't use it for Appstore applications.<br/><br/>
	So, how do you render the world if you cannot write the column of pixel in the framebuffer based on their distance ?<br/><br/>
	You keep the first part of the algorithm for visibility determination: 
	<ul>
	<li>Cast a ray for every columns of pixel (wolf3D casts 640 rays), it will build the list of visible walls.</li>
	<li>Build a list of every sprite entity in the room, sort them by distance: Back to Front.</li>
	<li>Set the GL_MODEL_VIEW and GL_PROJECTION according to the player POV.</li>
	<li>Using the walls coordinate, draw a bunch of big QUADS for walls and entities.</li>
	</ul>
	<br/>
	<p>
	The resulting engine is actually even more elegant than the original in my opinion. And it also provides hardware texture filtering !<br/>
	<br/>
	<div style="width:100%; text-align:center;">
	<img style="display: inline; margin-left: auto; " src="scr1.png" />
	<img style="display: inline; margin-left: 40px; margin-right: auto;" src="scr2.png" />
</div>
	</p>
	<br/>
	<pre  class="long">

	void iphoneFrame() 
	{
		int	msec = 14;	// fixed time
		iphoneFrameNum++;

		
		if ( consoleActive ) {	
			iphoneSet2D();	

			Client_Screen_DrawConsole();	
		
			iphoneSavePrevTouches();
			GLimp_EndFrame();
			return;
		}

		// fill the floor and ceiling
		R_Draw_Fill( 0, 0, viddef.width, viddef.height >> 1, r_world->ceilingColour );
		R_Draw_Fill( 0, viddef.height >> 1, viddef.width, viddef.height, r_world->floorColour );


		// draw 3D world 
		R_SetGL3D( Player.position );
		R_RayCast( Player.position, r_world );
		R_DrawSprites();

		// draw 2D overlays
		iphoneSet2D();	

		// Draw damage or bonus blending, simulate palette switch
		Client_Screen_DrawConsole();	

		ShowTilt();
	
		// do the swapbuffers
		GLimp_EndFrame();
	}

	</pre>
	<br/>
</p>	
			
			<h3>Escaping infamous Immediate mode</h3>
<p id="paperbox">	
	Iphones run openGL ES 1.1. Hence you have no access to glVertex3f,glTexCoord2f and all other outdated methods. 
	There was a bunch of calls to these method in the original <a href="http://wolf3dredux.sourceforge.net/">Wolf3D Redux by Michael Liebscher</a>. 
	Instead of changing every methods calls, a really neat abstraction layer was implemented, hiding a vertexArray mechanism.<br/>
	<br/>
	What looks like:<br/>
	<pre  class="long">

		pfglBegin(GL_QUADS);
			pfglTexCoord2f( 1.0, 0.0 );
			pfglVertex3f( 0.0,0.0, 0.0 );
			...
		pfflEnd();

	</pre> 
	<p>
	Is actually doing this:<br/>
	</p>
	<pre  class="long">

		//qglBegin(GL_QUADS);
		curr_vertex = 0;
		curr_prim = prim;

			//pfglTexCoord2f( 1.0, 0.0 );
			vab.st[ 0 ] = s;
			vab.st[ 1 ] = t;

			//pfglVertex3f( 0.0,0.0, 0.0 );
			vab.xyz[ 0 ] = x;
			vab.xyz[ 1 ] = y;
			vab.xyz[ 2 ] = z;
			immediate[ curr_vertex ] = vab;
			curr_vertex++;

		//qflEnd();
		qglDrawArrays( curr_prim, 0, curr_vertex );

	</pre><br/>
	<p>
	Of course to make all this work, openGL is initialized as follow:
	<pre  class="long">

	struct Vertex {
	float xyz[3];
	float st[2];
	GLubyte c[4];
	};

	#define MAX_VERTS 16384

	typedef struct Vertex Vertex;
	Vertex immediate[ MAX_VERTS ];

	void initGL
	{
		qglVertexPointer( 3, GL_FLOAT, sizeof( Vertex ), immediate[ 0 ].xyz );
		qglTexCoordPointer( 2, GL_FLOAT, sizeof( Vertex ), immediate[ 0 ].st );
		qglColorPointer( 4, GL_UNSIGNED_BYTE, sizeof( Vertex ), immediate[ 0 ].c );
		qglEnableClientState( GL_VERTEX_ARRAY );
		qglEnableClientState( GL_TEXTURE_COORD_ARRAY );
		qglEnableClientState( GL_COLOR_ARRAY );
	}

	</pre>
	</p>
	<br/>
</p>
			<h3>Short lived bottleneck</h3>
			<p id="paperbox">	
				While digging in the source, I found out that the framebuffer was being swapped way more often than necessary. 
				After firing an email to John Carmack, it looks like it's already fixed in v1.1!
<pre  class="long">

    Email
	
    from:      Fabien Sanglard     fabien.sanglard@fabiensanglard.net
    to:        John Carmack        johnc@idsoftware.com
    subject:   How to make Wolfenstein's iphoneFrame 50% faster.

    Hello john,

    I've been reading the code of Wolfenstein 3D for a few days.

    I've noticed that the buffer is swapped at the end of every drawView calls ( pretty much standard).
    But it looks like the buffer is also swapped in calls to GLimp_EndFrame method.

    It doesn't look like the Right Thing to Do (unless I am missing something).

    According to my testing, changing:

    void GLimp_EndFrame() {
        [eaglview swapBuffers];
    }

    to

    void GLimp_EndFrame() {
        //[eaglview swapBuffers];
    }

    changed the iphoneFrame runtime from 20ms to 10ms.

	
</pre>
<br/>
<pre  class="long">

    Email
	
	
    from:     John Carmack        johnc@idsoftware.com
    to:       Fabien Sanglard     fabien.sanglard@fabiensanglard.net
    subject:  Re: How to make Wolfenstein's iphoneFrame 50% faster.
	
    That was already changed in v1.1.  
    It was interesting that the only way that was possible to go unnoticed was the fact that the iPhone uses 
    triple buffering instead of double buffering -- with double buffering the screen would have never been updated at all.

	
</pre>
	<br/>
	<p>
	So next release should be even faster. It's also a good news from people hoping for Doom: Wolfenstein is far from pushing the iphone to the limit.
	As a side note, I was really surprised to get an answer from John Carmack public email address. It's pretty amazing that some stranger can 
	exchange with one of the gods of programming.
	<br/>
			</p>
			




			<h3>Compiling</h3>
<p id="paperbox">	
	If you are an Apple iPhone Developer, you can actually build the game from the source and upload it on your iPhone.<br/>
An early attempt, selecting the configuration "ReleaseEpisode1" will fail:<br/>
	<pre  class="long">

 CodeSign error: 

	Code Signing Identity 'iPhone Developer: John Carmack' does not match any code-signing certificate in your keychain.

</pre><br/>
	<p>
	No doubt, the code IS still warm. Just remove John Carmack's signing certificate, grab a new "Provisionning Certificate" from 
	the Apple Developer Portal and build again: The game builds flawlessly and gets uploaded on the iphone device. 
	<br/>
</p>





	<h3>Objective-C/ C++ communication</h3>
<p id="paperbox">	
		The engine feature a neat example of method calls Objective-C <=> ANSI C.<br/>
		<br/>
		Objective-C => ANSI C is quite easy: Just import the header with the function declaration and call them.<br/>
		This is done in <code>- (void)drawView</code>, to call <code>iphoneFrame()</code>.<br/>
		<br/>
		Objective-C <= ANSI C: Call an Objective-C method from a C program is a little bit more tricky:<br/>
<br/>
		You need the main UIView to maintain a reference to itself via a global variable:<br/>
		<br/>
		EAGLView.m
		<pre  class="long">

	EAGLView *eaglview;

	- (id)initWithCoder:(NSCoder*)coder {
		eaglview = self;
	}
		
	void GLimp_EndFrame() {
		[eaglview swapBuffers];
	}

		</pre>
		<br/>
		<p>
		You then declare the function "extern 'C'" (if you are in c++) and can call it from your C/C++ code:<br/>
		</p>
		</br/>
		<pre  class="long">	
	
	#ifdef __cplusplus
	extern "C" {
	#endif

		void	GLimp_EndFrame( void );

	#ifdef __cplusplus
	}
	#endif

	...
	
	void foo(void)
	{
		GLimp_EndFrame();
	}
		</pre>
	</p>




	<br/><h3>Recommended reading</h3>
	<p id="paperbox">	
		None: I've been playing way too much soccer recently.<br/>
	</p>
    
<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

