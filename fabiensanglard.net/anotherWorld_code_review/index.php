<script type="text/javascript">
  var disqus_identifier = "anotherWorld_code_review" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Out of the World source code review, Another World source code review, Eric Chahi"/>
		<meta name="Description" content="Out of the World (Another World) source code review."/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>"Another World" source code review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       December 23, 2011</div>
   <h1>"Another World" Code Review</h1>
   <p id="paperbox">
	   	
          <a  href="Another_World_by_Orioto.jpg">
          <img src="mainImage.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         

			I spent two weeks reading and reverse engineering further the <a href="https://github.com/fabiensanglard/Another-World-Bytecode-Interpreter">
			source code of Another World</a> ("Out Of This World" in North America). I
			based my work on Gregory Montoir's "binary to C++" initial reverse engineering from the DOS executable.<br/>
			<br/>
			I was amazed to discover an elegant system based on a virtual machine interpreting bytecode in realtime and generating fullscreen vectorial 
			cinematic in order to produce one of the best game of all time.<br/>
			<br/>
			All this shipping on a 1.44MB floppy disk and running within 600KB of RAM: Not bad for 1991 ! As usual I cleaned up my notes, it may save a few hours to someone.		
			</p>
			
			
			<br/>
			<h2>But...What source code ?!</h2>
			<p id="paperbox">
			The source code of "Another World' was never officially released nor leaked. Some people were so passionate about this groundbreaking game
			that they reverse engineered the DOS executable.<br/>
			<br/>
			This was possible partly because the binary was small (20KB). Why so small ? Because ANOTHER.EXE was not the game itself but just a virtual machine:
			<ul>
				<li>Hosting bytecode.</li>
				<li>Providing system calls.</li>
			</ul>
			<p> 
			The bytecode performs all the game logic with its own opcodes but uses syscalls for "heavy" stuff like drawing, playing music, sound and managing assets.<br/>
			<br/>
			To implement only the virtual machine for the target OS reduced the effort and the game was broadly ported to more than a dozen platforms:
			<br/>
			<ul>
				<li>1991 Amiga, Atari ST</li>
				<li>1992 Apple IIGS, DOS, SNES, Mega Drive</li>
				<li>1993 3DO</li>
				<li>2004 GameBoy Advanced</li>
				<li>2005 Windows XP, Symbia OS, Windows Mobile</li>
				<li>2011 iOS</li>
			
			
			</ul>
			<p>
			Every time only the virtual machine had to be compiled to the target OS: The bytecode remained the same !
			
			
			</p>
			
			
			
			
			<br/>
			<h2>Architecture</h2>
            <p id="paperbox">
			The executable is 20KB. It can be summarized as:<br/>
			<br/>
			<img  width="900"  src="../lazy_load/grey.gif" data-original="/fd_proxy/anotherWorld_code_review/anotherWorldArchitecture.png" style="display:block; left-margin:auto; right-margin:auto;"/>
			<br/>
			<br/>
			
						
			
			We can see four modules:
			<ul>
				<li>Virtual Machine: Maestro of the entire system.</li>
				<li>Resource Manager: Loads resources from the floppy disk when the vm request them.</li>
				<li>Sound/Music mixer: Makes noises upon request from the vm.</li>
				<li>Renderer: Reads and Renders vertices upon request from the vm. Read vertices from the memory segments.</li>
			</ul>
			<p>
			<u><b>Trivia :</b></u> The palette memory segment actually contains several palettes, used for nice fading effects.
			
			<p>
			Upon startup, the executable sets the virtual machine's thread 0  program counter with <code>0x00</code> and start interpreting.
			 Everything is commanded by the bytecode after that. 

			</p>


			
			
			
			
			
			
			
			
			
			
			
			
			
			
			<br/>
			<h2>Rendition explained</h2>
			<p id="paperbox">
            In the previous drawing we see three framebuffers. Two because Another World implements 
            <a href="http://en.wikipedia.org/wiki/Multiple_buffering#Double_buffering_in_computer_graphics">Double Buffering"</a>
            in software....and a third one as a clever optimization:<br/>
            <br/>
            The third framebuffer is used to compose the background of a scene only once and then reuse it frame after frame with a 
            simple <code>memcpy</code>:<br/>
            <br/>
	        <br/>
	        <table cellspacing="0" cellpadding="0" border="0" ><tr><td align="center"> 


<video width="800" height="600" preload="none" poster="../fd_proxy/anotherWorld_code_review/landscape800.jpg" controls>
  <source src="../fd_proxy/anotherWorld_code_review/landscape.m4v" type="video/mp4">
  Your browser does not support the video tag.
</video>


	</td></tr></table> 
<br/>
In this video the legendary first level screen of Another World has been slowed down so we can actually see things being drawn.
Everything is drawn with polygons and pixigons. Overdraw is very substantial but since this is only generated once it is not so bad.
<br/>
<br/>
<u><b>Trivia :</b></u> This famous background is made of 981 polygons.<br/>
<br/>
In order to visualize the big picture I have slowed down and rendered the three framebuffer + what is seen on screen:<br/>
<br/>
<table cellspacing="0" cellpadding="0" border="0" ><tr><td align="center"> 

<video width="800" height="600" preload="none" poster="../fd_proxy/anotherWorld_code_review/car-poster800.jpg" controls>
  <source src="../fd_proxy/anotherWorld_code_review/car-desktop.m4v" type="video/mp4">
  Your browser does not support the video tag.
</video>

</td></tr></table> 
<br/>
We can see very clearly:
<ul>
	<li>The double buffering with rendition occuring alternatively on the two front/back buffers.</li>
	<li>The background buffer generated once and stored in the upper left buffer. It is then copied at the beginning of each frame.</li>
	<li>If the background changes (as an example when the car stops) the background buffer is updated to save 
	even more space and time.</li>
</ul>
<br/>
<br/>
<p>
If you want to analyze more : <a href="../fd_proxy/anotherWorld_code_review/carFull.mov">Full video</a>.
<br/>
	        
	 		</p>
			
			
			
			
			
	 		
			
			<br/>
			<h2>Another World Virtual Machine</h2>
			<p id="paperbox">
			Eric Chahi's <a href="http://www.anotherworld.fr/anotherworld_uk/another_world.htm">webpage</a> explains a lot about how the machine is structured.<br/>
			<br/>
			In the code <a href="https://github.com/fabiensanglard/Another-World-Bytecode-Interpreter/blob/master/src/vm.cpp">on github</a> you can see how every opcode have been implemented.
			All of them are pretty easy to understand except for the renditions ones. The trick is that the polygon segment source where the vertices
			should be read is embedded with the opcode id.			<br/><br/>
			Finally a few screenshots from the vm bytecode editor (Called "script editor" by Eric Chahi):<br/>
			<br/><br/>
			<img src="../fd_proxy/anotherWorld_code_review/editeur2.gif" style="display:block; margin-left:auto; margin-right:auto;"/>
			<br/><br/>
			You can see how the label have been lost: <code>setvec 21 nag1</code> sets the thread 21 instruction counter at "nag1" label offset. 
			In the bytecode we can only see a hardcoded offset.
			</p>		
			
			
			
			
			<br/>
			<br/>	
			<h2>Opcode cases</h2>
			<p id="paperbox">
			<br/>
			In the following drawings we can see the virtual machine calling an opcode that is actually a system call to
			the resource manager in order to load the four memory segments. This happens typically at the beginning of
			a game part (The entire game is made of 10 game parts):<br/>
			<br/>
			<img  width="900"  src="../lazy_load/grey.gif" data-original="/fd_proxy/anotherWorld_code_review/anotherWorldArchitecture_opcode2.png" style="display:block; margin-left:auto; margin-right:auto;"/>
			<br/>
			<br/>
			In the next drawing the opcode is also a systemcall to the renderer asking to draw and fetch vertices. The rendition
			opcode are a bit more complex because they contains where to read the vertices from. To set the target framebuffer is an
			independent opcode altogether:<br/>
			<br/>
			<img  width="900"  src="../lazy_load/grey.gif" data-original="/fd_proxy/anotherWorld_code_review/anotherWorldArchitecture_opcode1.png" style="display:block; margin-left:auto; margin-right:auto;"/>
			<br/>	
			<u>Note: </u>Whether the render should read vertices from the cinematic polygon segment or the animation segment is encoded with the opcodeId.		
			</p>

			
			
			
			
			
			

			
			
			
			
			
			

			<br/>	
			<h2>Resource Management</h2>
			<p id="paperbox">
			Resources are identified by an unique integer id. Upon startup the resource manager opens MEMLIST.BIN and
			get records as follow:<br/>
			<pre class="long">


           
            typedef struct memEntry_s
            {

            	int bankId;
            	int offset;
            	int size;
            	int unpackedSize;

            } memEntry_t;



			</pre>
			<p>
			When the vm requests a resourceId, the resource manager:
			<ul>
			<li>Locates it by opening the bank file (via bankId).</li>
			<li>Skips <code>offset</code> and read <code>size</code> bytes in RAM.</li>
			<li>If <code>size</code> != <code>unpackedSize</code>, the resource has to be unpacked.</li>
			</ul>
			<p>
				<br/>
				
				
				
				
				
				A few stats about the compression:<br/>
			<br/>
			<pre class="long">
			
			
  Total # resources: 146
  Compressed       : 120
  Uncompressed     :  28
  Note: 82% of resources are compressed.


  Total size (uncompressed) : 1820901 bytes.
  Total size (compressed)   : 1236519 bytes.
  Note: Overall compression gain is : 32%.


  Total RT_SOUND          unpacked size:  699868 (38% of total unpacked size) packedSize  585052 (47% of floppy space) gain:(16%)
  Total RT_MUSIC          unpacked size:   33344 ( 2% of total unpacked size) packedSize    3540 ( 0% of floppy space) gain:(89%)
  Total RT_POLY_ANIM      unpacked size:  384000 (21% of total unpacked size) packedSize  106676 ( 9% of floppy space) gain:(72%)
  Total RT_PALETTE        unpacked size:   18432 ( 1% of total unpacked size) packedSize   11032 ( 1% of floppy space) gain:(40%)
  Total RT_BYTECODE       unpacked size:  203546 (11% of total unpacked size) packedSize  135948 (11% of floppy space) gain:(33%)
  Total RT_POLY_CINEMATIC unpacked size:  365960 (20% of total unpacked size) packedSize  291008 (24% of floppy space) gain:(20%)
  Note: Damn you sound compression rate!

  Total bank files:              148
  Total RT_SOUND          files: 103
  Total RT_MUSIC          files:   3
  Total RT_POLY_ANIM      files:  12
  Total RT_PALETTE        files:   9
  Total RT_BYTECODE       files:   9
  Total RT_POLY_CINEMATIC files:   9


			</pre>
			<p>
				I did not spent time reverse engineering the compression algorithm...the fact that sound doesn't compress very
				well leads me to believe it is entropy sensitive...so maybe a variation of huffman ?<br/>
				<br/>
				<br/>
				Out of 146 resources: 120 are compressed:
				<ul>
				<li>Vector rendition plus compression on top of it was a HUGE win (up to 62% gain !!).</li>
				<li>Compression on sound is very inefficient: gain is poor and the total size accounts for 47% of the space on the floppy disc.</li>
				</ul>
				 
				<br/>
				<p>	
		<u><b>Trivia :</b></u> The introduction (resource <a href="fullResourceStats.txt">0x1C</a>), 3 minutes long weights only 57,510 bytes once compressed.<br/>
		<br/>
			
			
			</p>



			
			
			
			<br/>	
			<h2>Memory Management</h2>
			<p id="paperbox">
			Like all games from the 90s no memory is allocated during gameplay. Upon startup the game engine grabs 600KB of memory
			( anybody remember DOS 640KB conventional memory here ?). Those 600KB are used as a stack allocator:<br/>
			<Br/>
			<img src="../fd_proxy/anotherWorld_code_review/mem_aw.png" style="display:block; margin-left:auto; margin-right:auto;"/>
			
			<br/>
			Free memory: The memory manager has the capability to unallocate one step back OR free the entire memory. In practice the entire memory
			is freed at the end of each 10 game parts.<br/>
			<br/>
			<u><b>Trivia :</b></u> Originally the entire 600KB was storing bytecode and vertices. But after two years of generating
			the backgrounds with polygons/pixigons the game was still far from being done. 
			In order to speed up the development speed Eric Chahi decided to integrate a hack in his beautiful architecture (at a performance cost):
			The resource manager can load background bitmap from the floppy disk to the background buffer (<code>void copyToBackgroundBuffer(const uint8 *src);</code>). 
			Hence 32KB (320x200/2) are reserved at the end of the conventional memory.<br/>
			<br/>
			<u><b>Trivia :</b></u> This hack was exploited for the release of Another World for Windows XP in 2005. All background were hand drawn and loaded
			directly from hard-drive without using the renderer and its pixigons: <br/>
			<br/>






















			<img id="beforeAfter" src="../fd_proxy/anotherWorld_code_review/aw_before.jpg" style="display:block; margin-left:auto; margin-right:auto;"/>
			<br/>                                                           
			
			
			
			
			
			
			
			
			
						<script>                                                                               
						    var imgSrc = new Array();                                                          
						    imgSrc[0] =  "/fd_proxy/anotherWorld_code_review/aw_before.jpg";
						    imgSrc[1] =  "/fd_proxy/anotherWorld_code_review/aw_after.jpg"; 
						                                                                                       
						    var currentImageId=0;                                                              
						                                                                                       
						    function switchImages()                                                            
						    {                                                                                  
							    var img = document.getElementById("beforeAfter");                                 
							    img.src = imgSrc[currentImageId];                                                 
							                                                                                      
							    currentImageId++;                                                                 
							    currentImageId = currentImageId % 2;                                              
							                                                                                      
							    setTimeout(switchImages,1000);                                                    
						    }                                                                                  
						                                                                                       
							switchImages();                                                                       
							                                                                                      
							                                                                                      
						</script>                                                                              
			
			
			<img  width="900"  src="../lazy_load/grey.gif" data-original="/fd_proxy/anotherWorld_code_review/anotherWorldXP.png" style="display:block; margin-left:auto; margin-right:auto;"/>
			</p>



			

			
			<br/>
			<h2>Purist corner</h2>
			<p id="paperbox">
			If you are a purist and really want to play the original way, Another World works like a charm in DosBOX:<br/><br/>
				<img src="dosbox.png" style="display:block; left-margin:auto; right-margin:auto;"/>
				<br/><br/>
				Or you can run the windows XP version. I recommend to get the <a href="http://www.gog.com/en/gamecard/another_world_15th_anniversary_edition">Collector's edition</a> since it 
				feature a lot of additional informations, among them the techical notes from Eric Chahi:<br/>
				<br/>
				<center><a width="646"  src="../lazy_load/grey.gif" data-original="/fd_proxy/anotherWorld_code_review/carnet.png">
				<img width="445"  src="../lazy_load/grey.gif" data-original="/fd_proxy/anotherWorld_code_review/carnet_small.png"/></a></center>
			<br/>
			</p>
	
			
			
			
						<br/>                                                                                                              
						<h2>One more thing</h2>                                                                                       
						<p id="paperbox">                                                                                                  
					I worked on the code a lot, making it simpler to understand. You can see an example of how much clearer it is now.<br/>
					
					<br/>
Before:<br/>

<pre class="long">


   void Logic::runScripts() {                                                                                                
      <span style="color:blue;">for</span> (<span style="color:blue;">int</span> i = 0; i < 0x40; ++i) {                                                                                  
        <span style="color:blue;">if</span> (_scriptPaused[0][i] == 0) {                                                                           
	     uint16 n = _scriptSlotsPos[0][i];                                                                 
	     <span style="color:blue;">if</span> (n != 0xFFFF) {                                                                                
	         _scriptPtr.pc = _res->_segCode + n;                                                       
	         _stackPtr = 0;                                                                            
	         _scriptHalted = false;                                                                    
	         debug(DBG_LOGIC, "Logic::runScripts() i=0x%02X n=0x%02X *p=0x%02X", i, n, *_scriptPtr.pc);
	         executeScript();                                                                          
	         _scriptSlotsPos[0][i] = _scriptPtr.pc - _res->_segCode;                                   
	         debug(DBG_LOGIC, "Logic::runScripts() i=0x%02X pos=0x%X", i, _scriptSlotsPos[0][i]);      
	         <span style="color:blue;">if</span> (_stub->_pi.quit) {                                                                    
	            break;                                                                                					
	         }                                                                                       
	     }                                                                                                 					
	    }                                                                                                         					                                                                                                             
	  }                                                                                                                 						                                                                                                              
	}                                                                                                                         			
			
			   </pre>                	<br/>      
<p>

After:<br/>
			   
			   
<pre class="long">


  void VirtualMachine::hostFrame() {                                                                       
                                                                                                         
	<span style="color:green;">// Run the Virtual Machine for every active threads (one vm frame).</span>                                     
	<span style="color:green;">// Inactive threads are marked with a thread instruction pointer set to 0xFFFF (VM_INACTIVE_THREAD).</span>    
	<span style="color:green;">// A thread must feature a break opcode so the interpreter can move to the next thread.</span>                 
                                                                                                         
	<span style="color:blue;">for</span> (<span style="color:blue;">int</span> threadId = 0; threadId < VM_NUM_THREADS; threadId++) {                                         
                                                                                                         
		<span style="color:blue;">if</span> (!vmIsChannelActive[CURR_STATE][threadId])                                                           
			continue;                                                                                             
		                                                                                                       
		uint16 pcOffset = threadsData[PC_OFFSET][threadId];                                                    
                                                                                                         
		<span style="color:blue;">if</span> (pcOffset != VM_INACTIVE_THREAD) {                                                                  
                                                                                                         
			<span style="color:green;">// Set the script pointer to the right location.</span>                                                      
			<span style="color:green;">// script pc is used in executeThread in order</span>                                                        
			<span style="color:green;">// to get the next opcode.</span>                                                                            
			_scriptPtr.pc = res->segBytecode + pcOffset;                                                          
			_stackPtr = 0;                                                                                        
                                                                                                         
			gotoNextThread = false;                                                                               
			debug(DBG_VM, "VirtualMachine::hostFrame() i=0x%02X n=0x%02X *p=0x%02X", threadId, n, *_scriptPtr.pc);
			executeThread();                                                                                      
                                                                                                         
			<span style="color:green;">//Since .pc is going to be modified by this next loop iteration, we need to save it.</span>                  
			threadsData[PC_OFFSET][threadId] = _scriptPtr.pc - res->segBytecode;                                  
                                                                                                         
			debug(DBG_VM, "VirtualMachine::hostFrame() i=0x%02X pos=0x%X", threadId, threadsData[0][threadId]);
			   
			<span style="color:blue;">if</span> (sys->input.quit) {                                                                                
				break;                                                                                               
			}                                                                                                     
		}                                                                                                      
		                                                                                                       
	}                                                                                                       
  }    
  
                                                                                                      
</pre>	
<p>
<br/>		   
I used:
<ul>
 <li>MACROS to avoid cryptic hardcoded values.</li>
 <li>Variables renaming.</li>
 <li>A LOT of comments.</li>
</ul>			   
<p>
<br/>
<a href="https://github.com/fabiensanglard/Another-World-Bytecode-Interpreter">Here</a> is the "human readable" source code :) ! Happy hacking.			   
			   
			                            </p> 
					
</p>



<br/>
			<h2>Edit (video presentation)</h2>
			<p id="paperbox">
Jeff Somers submitted a link to a <a href="http://www.gdcvault.com/play/1014630/Classic-Game-Postmortem-OUT-OF">fantastic video from GDC Vault</a> in which Eric Chahi talks about the Genesis of Another World. Thanks a lot Jeff :) !
           </p>


















<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

