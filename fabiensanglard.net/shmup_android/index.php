<script type="text/javascript">
  var disqus_identifier = "shmup_android" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Android, 3D engine, shoot'em up"/>
		<meta name="Description" content="Genese of a 3D Shoot'em up on Android platform"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>SHMUP on Android</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       February 23, 2012</div>
   <h1>SHMUP on Android: A tale of an eventful port</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="shmup_android.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         


	


    
    
					Six months ago I <a href="../shmup_source_code/index.php">released the source code</a> of "SHMUP": a modest indie 3D 
					shoot'em up 
				designed for iOS. Since it did  honorably on the Apple Appstore I offered anyone to port it 
				 to Android Appmarket for a 50/50 revenues split. Two developers consecutively took on the challenge
				 only to give up later.<br/>
				 <br/>
                     
                     
                                                              
                                         
				 So I downloaded the Native Development Kit from Google and I did it myself. I completed the 
				 <a href="https://market.android.com/details?id=net.fabiensanglard.shmup">port</a> 
				 this weekend and even released a <a href="https://market.android.com/details?id=net.fabiensanglard.shmuplite">free version</a>.<br/>
                     
                    
                     
				 <br/>
				 The codebase runs on Windows, iOS, MacOS X and Android in one click. You can download the code on <a href="https://github.com/fabiensanglard/Shmup">GitHub</a>.<br/>
                     <br/>
                    
                     
                    
				<br/>
<a style="display: inline;" href="http://play.google.com/store/apps/details?id=net.fabiensanglard.shmuplite">
<img alt="Android app on Google Play"
src="http://www.android.com/images/brand/get_it_on_play_logo_large.png" />
</a>

                    
			</p>


			
			<br/>
			<h2>Original version</h2>
			<p id="paperbox">
				
				SHMUP engine was designed for iPhone 1 in 2009. Given the constraints in terms of CPU/GPU limitations and 
				the mandatory 60 frame per second framerate I came up with
				a <a href="../polygon_codec/index.php">polygon codec</a> architecture that reduced 
				bandwidth consumption to the minimum and granted instant 
				visible surface determination:<br/>
				<ul>
				<li>The code base is 90% ANSI C with a few wrappers for I/O.</li>
				<li>Rendition was done via OpenES 1.1/2.0 .</li>
				<li>Sound effects are done with OpenAL.</li>
				<li>Music playback was done with CoreAudio (for hardware decompression).</li>
				</ul>
			</p>

<br/>
			<h2>Abstraction</h2>
			<p id="paperbox">
			Growing up reading id Software code was beneficial. It influenced me to have an abstraction layer between the engine and any I/O. 
			In Shmup the following were abstracted:<br/>
			<ul>
				<li>File System.</li>
				<li>Rendition.</li>
				<li>Sound System.</li>
				<li>Texture Loading.</li>
			</ul>
			<p>
			Before starting the Android port this is how the kernel was linked for the three supported platforms:
			<center>
				<img src="../fd_proxy/shmup_android/arch_all.png" style="display:block; left-margin:auto; right-margin:auto;"/><br/><br/>
			</center>
			
			<p>
			For the Android version I was able to re-use the OpenGL ES renderer and the libpng texture loader but I had to write a <a href="https://github.com/fabiensanglard/Shmup/blob/master/engine/android/jni/android/android_music.c">new sound system</a> based on OpenSL ES
			and a <a href="https://github.com/fabiensanglard/Shmup/blob/master/engine/android/jni/android/android_filesystem.c">new file system module</a> (on 
			Android assets are packed in a zip file: They can only be accessed via <code>android/asset_manager.h</code>).
			
			<center>
			<img src="../fd_proxy/shmup_android/arch_android.png" style="display:block; left-margin:auto; right-margin:auto;"/>
			</center>
			</p>


<br/>
			<h2>Heap corruption</h2>
			<p id="paperbox">
			Two years running on thousands of various iOS devices lead me to think that SHMUP engine was stable and bug free. But Landon Dyer 
			emphasize it in <a href="http://www.dadhacker.com/blog/?p=1628">one of his post</a>:<br/>
			<br/>
			"The dirty truth of software is: It's buggy. [..] Most of the time we don't see them.".<br/>
			<br/> 
			A program that does not crash or does not exhibit unwanted behavior is not necessarily exempt of faults. It is only if the fault leads to an
			error that we call it a "bug". When I compiled and ran the code on Android it crashed randomly: Because
			the compiler and loader behaved differently the faults were now errors.<br/>
			<br/>
			Corrupting the heap means that your code at some point during execution writes in a zone it was not supposed to. This is 
			nasty because the program will only start behaving erratically when the zone you corrupted is used...usually tens of thousand of instructions later.<br/>
			<br/>
			SHMUP was corrupting the heap for years on thousands of devices around the world but now it was a real problem.<br/><br/>
			<br/>
			Since the engine was running on Windows I had access to one of the best heap corruption tracker in the industry: 
			<a href="http://www.microsoft.com/download/en/details.aspx?id=20028">Application Verifier</a>. 
			One of its great feature is <code>pageheap.exe</code>. PageHeap is detailed <a href="http://support.microsoft.com/kb/286470">on Microsoft webpage</a> 
			but in Full-page heap it will change
			the way <code>malloc</code>/<code>calloc</code> behave: One virtual memory page will be used for each allocation and the end of the 
			block will be aligned with the end of the page.<br/>
			<br/><br/>
			Hence the following code:
			<pre class="long">
			
    void* block1 = malloc(1024);
    void* block2 = malloc(1024);
    void* block3 = malloc(1024);
			
			</pre>
			<p>
			would have normally resulted in the following memory layout: All variables are in the same virtual page:
			<br/>
			<center><img src="../fd_proxy/shmup_android/normal_malloc.png"/><Br/></center>
			<br/>
			</br>
			<p>
			With this regular design if a pointer starts writing in block2 but overflow and writes in block3 there is no way to track it: Heap is corrupted.
			 But with <code>pagehead.exe</code> the layout looks like this:<br/>
			<br/>
			<center><img src="../fd_proxy/shmup_android/page_heap_malloc.png"/><Br/></center>
			<br/>
			<p>
			The benefit of this new design is that writing past a block allocated via <code>malloc</code> will raise a page fault interruption. This page fault
			can be detect and an interrupt 3 can be raised. This will trigged the debugger to stop the program execution and point immediately to the faulty code.
			<br/>
			<br/>
			PageHeap brought two sections of code to my attention:<br/>
			<br/><br/>
			The first one was in the parser while reading the configuration file:
			<pre class="long">
	
    LE_readToken();			
					
    if (!strcmp("impactTextureName", LE_getCurrentToken()))
    {
	    
	    LE_readToken();
	    
	    explosionTexture.path = calloc(strlen(LE_getCurrentToken()+1), sizeof(char));
	    
	    strcpy(explosionTexture.path, LE_getCurrentToken());
    }

			
			</pre>
			
			<p>
			<br/>
			The second one was in the event system:
			<pre class="long">

			
    event_t *event ;						
    
    event = calloc(1, sizeof(event));
    
    event->type = EV_REQUEST_SCENE;
    
    event->time = simulationTime + 5000;
			
	
			</pre>
			<br/>
			<p>
			Both are typos that static code analysis (llvm and PVSStudio) failed to report. Sometimes the simplest part of the code can be at fault.
			
			</p>
			
			
			
			
			
			
			
			
			
			
			<br/>
			<h2>Bad char</h2>
			<p id="paperbox">
			According to the C specifications <code>char</code> can be either signed or unsigned depending on the platform and the compiler. Most systems
			running on x86, Linux, Windows and MacOX S will alias <code>char</code> with <code>signed char</code>. ARM (iPhone/Android) and PowerPC systems usually make <code>char</code>
			equivalent to <code>unsigned char</code>.<br/>
			<br/>
			XCode seems to have a special flag that makes char signed on ARM iOS in order to match x86 MacOS X but the NDK compiler will make them unsigned !<Br/>
			<Br/>
			This caused
			issue in the following code that is called when a player died:
			<pre class="long">
			
			
    typedef struct player_s{
		
        char numLives;
		
    } player_t		
			
    
			
    P_KillPlayer(player_t* player)
    {
	    player->numLives --;
	    
	    if (player->numLives < 0)
	    {
		    Game_Terminate();
		    return;
	    }
	    
    }			
			
    
			</pre>
			<p>
			On Android <code>numLives</code> never reached -1 but instead wrapped around to 255. The graphic renderer never expected such a high value and the game was
			crashing from within the GPU drivers....<br/>
			<br/><br/>
			Bottom line is that you should never ever use <code>char</code>: Always be specific and use either <code>signed char</code> or <code>unsigned char</code>.
			
			</p>		
				








<br/>
			<h2>Sound system with OpenSL ES</h2>
			<p id="paperbox">
				The only descent API available for the sound system is OpenSL ES and it is starting with Android 2.3.3 (currently 65% of 
				Android market according to <a href="http://developer.android.com/resources/dashboard/platform-versions.html">Google statistics
			</a>). 
				OpenAL is not available and probably never will (OpenMAX AL released with Android 4.0 has nothing to do with OpenAL).<br/>
				It will get the job done but the design of the API is surprising to say the least. They decided to have an OOP approach 
				using a non-OPP language and the resulting code looks as follow:<br/>
				<br/>
				<br/>
				Initialize the OpenSL ES engine. Notice the pointer to pointer to a struct containing a function pointer....
				<pre class="long">


    SLObjectItf engineObject;
    slCreateEngine(&engineObject, 0, NULL, 0, NULL, NULL);


    SLEngineItf engineInterface;
    (*engineObject)->Realize(engineObject, SL_BOOLEAN_FALSE);
    (*engineObject)->GetInterface(engineObject, SL_IID_ENGINE, &engineInterface);

    
				</pre>
				<p>
				<br/>
				<br/>
				How to play a sound. Again pointer to pointer to struct containing a function pointer. Every aspect of the 
				player object are controlled via various interfaces (<code>SL_IID_BUFFERQUEUE</code>,<code>SL_IID_PLAY</code>)
				<pre class="long">


    SLDataFormat_PCM pFormat = [...];
    SLDataLocator_AndroidSimpleBufferQueue pLocator = {SL_DATALOCATOR_ANDROIDSIMPLEBUFFERQUEUE, 2};
    SLDataSource audioSource = {&pLocator, &pFormat};

    SLDataSink audioSink = [..] ;
    SLObjectItf player;

    (*engineInterface)->CreateAudioPlayer(engineInterface,&player , &audioSource, &audioSink,0, NULL,NULL);
    (*player)->Realize(player, SL_BOOLEAN_FALSE);

    
    SLBufferQueueItf bufferQueueItf;
    (*player)->GetInterface(player, SL_IID_BUFFERQUEUE, &bufferQueueItf)
    (*bufferQueueItf)->Enqueue(bufferQueueItf, context->pDataBase, sizeToEnqueue);


    SLPlayItf playerInterface;
    (*player)->GetInterface(player, SL_IID_PLAY, &playerInterface);
    (*playerInterface)->SetPlayState(playerInterface,SL_PLAYSTATE_PLAYING);


				</pre>
				<br/>
				<p>
				My take is that if you design an OOP API you should use an OOP language such as C++, not C.
			</p>







<br/>
			<h2>JNI Call from a NativeActivity</h2>
			<p id="paperbox">
			Even though you can go full C/C++ with the NDK there are a few things that cannot be done (like open the android
			browser with a specific URL).
			In this case you need to go back to the Virtual Machine...and it is a little bit tricky !<br/>
			<br/>
			When creating the Native Activity you get a JVIEnv* and a JavaVM* pointers. This is supposed to allow you to call any method 
			from C/C++ to the Dalvik virtual machine. In practice it takes a lot more efforts than that because:<br/>
			<ol>
				<li>The NDK thread is not attached to the Virtual Machine.</li>
				<li>Even if you attach it to the VM, the classloader has no knowledge of your JAVA classes and package.</li>
			</ol>
			<br/>
<br/>
<p>Here is what has to be done in order to make a JNI call from a native activity:
<pre class="long">


    
    
    jmethodID findMethod(ANativeActivity* activity, char& methodName, char* methodSignature){

        JavaVM* vm = activity->vm;
        JNIEnv *jni;

        (**vm).AttachCurrentThread ( activity->vm , &jni , NULL ) ;

        jclass activityClass = (*jni)->FindClass(jni,"android/app/NativeActivity");
	
        jmethodID getClassLoader = (*jni)->GetMethodID(jni,activityClass,"getClassLoader", "()Ljava/lang/ClassLoader;");
	
        jobject cls = (*jni)->CallObjectMethod(jni,activity->clazz, getClassLoader);

        jclass classLoader = (*jni)->FindClass(jni,"java/lang/ClassLoader");

        jmethodID findClass = (*jni)->GetMethodID(jni,classLoader, "loadClass", "(Ljava/lang/String;)Ljava/lang/Class;");

        jstring strClassName = (*jni)->NewStringUTF(jni,className);

        jobject activityClass = (jclass)(*jni)->CallObjectMethod(jni,cls, findClass, strClassName);
	
        return (*jni)->GetStaticMethodID(jni, activityClass, methodName, methodSignature);
	
    }



</pre>
<p>

I hope the next release of the NDK will have JNIEnv attached by default and a classloader aware of the Android PAK Java classes.
Thanks to <a href="http://blog.tewdew.com/post/6837005973/welcome-to-the-tewdew-software-blog">Dennis Forbes</a> from TewDew Software for
 <a href="http://blog.tewdew.com/post/6852907694/using-jni-from-a-native-activity">the trick</a>.<br/>
<br/>
<u>EDIT :</u> Martins Mozeiko pointed out that there is an easier way:<br/>
<pre class="long">

    jmethodID findMethod(ANativeActivity* activity, char& methodName, char* methodSignature)
    {
        JavaVM* vm = activity->vm;
        JNIEnv *jni;

        (**vm).AttachCurrentThread ( activity->vm , &jni , NULL ) ;

        jclass activityClass = (*jni)->GetObjectClass(jni, activity->clazz);
        return (*jni)->GetStaticMethodID(jni, activityClass, methodName, methodSignature);
    }

</pre>
			</p>


			
			<br/>
			<h2>Recompile goes undetected</h2>
			<p id="paperbox">
			The NDK is a command-line tool which mean that we use a makefile to compile the C/C++ code into a shared library but 
			then Eclipse to deploy. The problem is that most of the time Eclipse won't detect the C/C++ code has been recompiled.
			Even when configuring Eclipse to use native hook: Preferences > General > Workspace > "Refresh using native hooks").<br/>
			<br/>
			This was frustrating and a best approach would be to build and install the APK from command-line. 
			I would love to see a built-in tool to do that in the next NDK release.
			</p>
			
			
						
			
			
<br/>
			<h2>Overall feeling</h2>
			<p id="paperbox">
				No question about it: Android NDK will get the job done. There is still space for improvements but overall it is a very nice framework to work with.<br/>
				<br/>
				The real big issue is the Android wall of fragmentation: 
				<ul>
				<li>I tested the game on Samsung Galaxy Nexus and 
				Samsung Galaxy Tab and it was running perfectly but I have received ANR (Application Not Responding) crash report for difference devices: I have no way to replicate those and investigate.</li>
				<li>Tiny differences are annoying: On Galaxy Tab no matter what you do 
				you get an ugly colored borderer around your launch icons:<br/><br/>
				<center> <img src="../fd_proxy/shmup_android/galaxy_tab_icon.png"/></center>
				</li>
				</ul>
				<p>
				As a result it is very hard to generate an unified user experience.
			</p>





<br/>
<br/>
<h2>Recommended readings</h2>
<p id="paperbox"> 
				<br/> 
				<a href="http://www.amazon.com/Write-Portable-Code-Introduction-Developing/dp/1593270569/ref=sr_1_1?ie=UTF8&qid=1330323122&sr=8-1"><img src="wpc.png" style="margin: 0 5px 0 0;"></a> 
				<a href="http://www.amazon.com/Writing-Solid-Code-Microsoft-Programming/dp/1556155514"><img src="wsc.png" style="margin: 0 5px 0 0px;"></a> 
				<a href="http://www.amazon.ca/Art-Readable-Code-Dustin-Boswell/dp/0596802293"><img src="taorc.png" style="margin: 0 5px 0 0px;"/></a> 
				<br/>
							
			
</p>



	


<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

