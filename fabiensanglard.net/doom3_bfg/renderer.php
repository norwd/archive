<script type="text/javascript">
  var disqus_identifier = "Doom3_BFG_Code_Review";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Doom3 BFG Source Code Review, id tech4, id tech 5"/>
		<meta name="Description" content="Doom3 BFG Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Doom3 BFG Source Code Review: Renderer</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       May 23th, 2013</div>
   <h1>Doom3 BFG Source Code Review: Renderer (Part 3 of 4) <a href="DooM_Classic.php">>></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="doom3_bfg_small.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
    
    <style> 
table.credits{
    
    background: #fff;
   font: 12px 'DejaVu Sans';
    box-shadow: rgb(119, 119, 119) 3px 3px 3px;
    margin: 0px 0px 0px 15px;
    
}
  table.credits { width:97%; a:link:color:rgb(0, 136, 204);}
table.credits thead { background:transparent; }
  
  table.credits th { white-space:nowrap; }
  table.credits thead th { border-left:1px solid #ccc;  border-top:1px solid #ccc; padding:9px 9px 3px; color:#999; }
  table.credits tbody th,
  table.credits tbody td { border-top:1px solid #ccc; padding:6px 9px; }
  table.credits tbody th { padding:7px 0 7px 0; text-align:center; color:#999; }
  table.credits tbody th b { color:#333; font-weight:normal; }
  table.credits tbody td { border-left:1px solid #ccc; }
  
  table.credits tbody .session { background:#d4e6fa url(session_bgblue.png) repeat-x 0 0; }
  table.credits tbody .session.alt { background:#e9ecf0 url(session_bggray.png) repeat-x 0 0; }
  table.credits tbody .session h2 { font-size:1em; margin-bottom:0; color:rgb(0, 136, 204); }
  table.credits tbody .session .hud-content { display:none; }

  td.right
  {
    border-right:1px solid #ccc;
  }
  
  
  
  blockquote.style1 
  {
      
      padding: 8px;
      
      width: 80%;
      
      background-color: #eeeeee;
      border: 1px solid #dddddd;
      
      
      margin: 5px;
      background-image: url(../quake2/images/openquote1.gif);
      background-position: top left;
      background-repeat: no-repeat;
      text-indent: 23px;
    
    }
    
    blockquote.style1 span 
    {
      display: block;
      font-style:italic;
      background-image: url(../quake2/images/closequote1.gif);
      background-repeat: no-repeat;
      background-position: bottom right;
      text-align: justify;
    }
    
    
    
    
  
  </style> 
  Doom 3 BFG renderer is at its core still the same: Search for interactions (lights crossing the view frustum)
  and perform an additive blending pass for each interactions. A process that I described in my <a href="../doom3/renderer.php">first series of articles</a> about Doom3 engine.<br/>
  <br/>
  The key innovation is that the once mono-threaded renderer is now "heavily" multi-threaded with up to four threads running concurrently.<br/>

<div style="clear:both"></div>
 
    

 <br/>
    <h2>Architecture</h2>
    <p>  
    The renderer is still divided in two parts: Frontend (1) and Backend (2). The Frontend does the "smart" work of determining what should be drawn while the backend spends most of its
    time executing those commands and waiting for the GPU to execute them (that and also waiting for a vsync !).
    <img src="../fd_proxy/doom3/renderer/rendere_big_picture.png" style="width:830px; height:436px; display:block;margin-left:auto;margin-right:auto;"/><br/>
    <br/>
    </p>
    
    
   <br/>
    <h2>Threading model</h2>
    <p>   
    <img src="../fd_proxy/doom3_bfg/renderer_threading_model.png" style="width:260px; height:451px; float:left; margin-right: 10px;"/>
    There are two important novelties:<br/>
    <ul style="overflow: hidden;">
    	<li>Each ends (Front and Back) are running in their own thread by default.</li>
    	<li>The Frontend uses the Worker system in order to perform tasks that can be parallelized in three locations:
    	<ul style="overflow: hidden;">
        <li>
              Interactions detection :
              <ol>
                <li>Find interacting lights (crossing the view frustum).</li>
                <li>Find each models visible or crossing an interacting light (for shadows).</li>
              </ol>
        </li>
         <li> 
             Shadow generation :
           <ol start="3">
            <li>Build dynamic shadow volumes.</li>
           </ol>
        </li>
      </ul>
    	
    	</li>
    </ul>
    <p>
     The Job System is described in the <a href="threading.php">previous article</a>. What was interesting was to look how Jobs are parallelized without mutexes:<br/>
     <br/>
     <u><b>1. Find lights (<code>R_AddLights</code>):</b></u> The idea is to perform a "Build, Mark and Sweep" on a linked list:
     <ol style="overflow: hidden;">
     	<li>Build: The frontend thread builds a list of all lights in the level, each featuring a marker "visible".</li>
     	<li>Mark : All threads work and run jobs inside the Job System, they concurrently set the markers to 1 or 0.</li>
     	<li>Sweep: The frontend thread remove any light marked as non-visible.</li>
    </ol>
     <p>
     <u><b>2. Find Models (<code>R_AddModels</code>) :</b></u> Each Job works on a specific model. When all workers are done, vertice to draw results are aggregated by a single thread.</br>
     <u><b>3. Build Dynamic Shadow Volumes (<code>R_AddModels</code>):</b></u> Same idea: Each worker stores shadow volumes results in the model it is working on. A single thread aggregates the results later.</br>
      <div style="clear:both"></div>
    </p>








<br/>
<h2>One Path</h2>
<p>
<img src="../fd_proxy/doom3_bfg/renderer_abstraction.png" style="width:533px; height:317px; float:right; margin-left: 10px;"/>

The previous renderer featured <a href="../doom3/fb_design_renderer.png">many rendering path</a>: One for
each Nvidia and ATI GPUs. The implementation was not very elegant since it 
<a href="https://github.com/TTimo/doom3.gpl/blob/master/neo/renderer/draw_common.cpp#L1688">relied on switch cases</a>. <br/><br/>The new renderer uses an 
abstraction layer based on OpenGL for method names. Under the hood either :
<ul>
   <li>OpenGL (PC)</li>
   <li>DirectX (Xbox360)</li>
   <li>GCM (PS3)</li>
   </ul>
<p> can be used for implementation. The project linker 
decides which implementation to use.<br/>
<div style="clear:both"></div>

</p>




<br/>
<h2>Shaders</h2>
<p>
  Doom III used <a href="http://en.wikipedia.org/wiki/ARB_assembly_language">ARB assembly shaders</a> that looked like this:<br/>
  <pre class="long">
  
    !!ARBfp1.0
    TEMP color;
    MUL color, fragment.texcoord[0].y, 2.0;
    ADD color, 1.0, -color;
    ABS color, color;
    ADD result.color, 1.0, -color;
    MOV result.color.a, 1.0;
    END
  </pre>
  <p>
  Doom III BFG uses OpenGL GLSL 1.50 shaders:<br/>
  <pre class="long">
  
    #version 150
    #define PC
  
    void main() {
        vec4 color = ( tex2D ( samp0 , vofi_TexCoord0 ) * gl_Color ) + vofi_TexCoord1 ;
        gl_FragColor . xyz = color. xyz * color. w ;
        gl_FragColor . w = color. w ;
    }
  </pre>
  <p>
  <u><b>Trivia :</b></u> The renderer uses OpenGL 3.2 Compatibility Profile since many OpenGL methods have been deprecated since 2004 but the engine uses
  recent shaders. This is one of the reason Doom III BFG has not been ported to MacOS X: Even the latest Mountain Lion only offers OpenGL 3.2 Core profile.<br/>
</p>



 <br/>
    <h2>Unused</h2>
    <p>  
       The renderer features other cool things are are barely used:
       <ul>
           <li>An HLSL to GLSL converter (<code>ConvertCG2GLSL</code>): Used nowhere :( !</li>
           <li>The fast DXT texture compressor (<code>YCoCg-DXT5</code>), one of the keystone of idTech5 virtual texturing mentioned in <a href="http://s09.idav.ucdavis.edu/talks/05-JP_id_Tech_5_Challenges.pdf">Beyond Programing Shaders</a> 2009 talk:
            Used for a few tiny textures only.</li>
       </ul>
</p>





<br/>
<h2>Rendering Targets</h2>
<p>
  Considering all the post-rendering screenspace processing (Fog and Occulus Rift VR barrel wrapping), I was expecting to see FBOs and framebuffer rendering Targets bindings all over the place.
  Surprisingly, when such effects are needed the process is to copy the GL_BACK buffer to a texture via <code>glCopyTexImage2D</code> and draw it
  again (with the proper shader) in the GL_BACK buffer.
  
</p>


<br/>
<h2>Wait, there is more...</h2>
<p>
  A reader "Ben" mentioned a few other collections of performance shifts that I did not have time to review:
<ul>
<li>GPU skinning.</li>
<li>Using VertexCache as massive global double buffers instead of each RenderModel handling their own VBO.</li>
<li>Using glMap instead of glBuffer for VBO (which originally causes major stalls, limiting enemy counts).</li>
</ol>
<p>
</p>

<br/>
    <h2>Next</h2>
    <p>
      <a href="DooM_Classic.php">Doom Classic integration</a>.
    </p>


  <!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

