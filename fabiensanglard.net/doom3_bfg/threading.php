<script type="text/javascript">
  var disqus_identifier = "Doom3_BFG_Code_Review";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Doom3 BFG Source Code Review, id tech4, id tech 5"/>
		<meta name="Description" content="Doom3 BFG Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Doom3 BFG Source Code Review: Multi-threading</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="https://fabiensanglard.net/" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="http://fabiensanglard.net/" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="http://fabiensanglard.net/about/">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="http://fabiensanglard.net/faq/">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="http://fabiensanglard.net/rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="http://fabiensanglard.net/rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="http://fabiensanglard.net/rss.xml" />
<div id="date">
       May 23th, 2013</div>
   <h1>Doom3 BFG Source Code Review: Multi-threading (Part 2 of 4) <a href="renderer.php">>></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="doom3_bfg_small.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
    
    <style> 
table.credits{
    
    background: #fff;
   font: 12px 'DejaVu Sans';
    box-shadow: rgb(119, 119, 119) 3px 3px 3px;
    margin: 0px 0px 0px 15px;
    
}
  table.credits { width:97%; a:link:color:rgb(0, 136, 204);}
table.credits thead { background:transparent; }
  
  table.credits th { white-space:nowrap; }
  table.credits thead th { border-left:1px solid #ccc;  border-top:1px solid #ccc; padding:9px 9px 3px; color:#999; }
  table.credits tbody th,
  table.credits tbody td { border-top:1px solid #ccc; padding:6px 9px; }
  table.credits tbody th { padding:7px 0 7px 0; text-align:center; color:#999; }
  table.credits tbody th b { color:#333; font-weight:normal; }
  table.credits tbody td { border-left:1px solid #ccc; }
  
  table.credits tbody .session { background:#d4e6fa url(session_bgblue.png) repeat-x 0 0; }
  table.credits tbody .session.alt { background:#e9ecf0 url(session_bggray.png) repeat-x 0 0; }
  table.credits tbody .session h2 { font-size:1em; margin-bottom:0; color:rgb(0, 136, 204); }
  table.credits tbody .session .hud-content { display:none; }

  td.right
  {
    border-right:1px solid #ccc;
  }
  
  
  
  blockquote.style1 
  {
      
      padding: 8px;
      
      width: 80%;
      
      background-color: #eeeeee;
      border: 1px solid #dddddd;
      
      
      margin: 5px;
      background-image: url(../quake2/images/openquote1.gif);
      background-position: top left;
      background-repeat: no-repeat;
      text-indent: 23px;
    
    }
    
    blockquote.style1 span 
    {
      display: block;
      font-style:italic;
      background-image: url(../quake2/images/closequote1.gif);
      background-repeat: no-repeat;
      background-position: bottom right;
      text-align: justify;
    }
    
    
    
    
  
  </style> 
  
Doom III engine was written from 2000 to 2004, at a time where most PC had only one CPU. Even though idTech4 architecture and design accounted for SMP machines, it ended up being a mono-threaded game at last minute (see my <a href="https://fabiensanglard.net/doom3/interviews.php">Q&A with John Carmack</a>). Since then, things have changed a lot. This is well summarized by Microsoft article "<a href="http://msdn.microsoft.com/en-ca/library/windows/desktop/ee416321(v=vs.85).aspx">Coding For Multiple Cores</a>" :
<pre class="long" style="width:59%; box-sizing: border-box;">


   For years the performance of processors has increased steadily, and games and 
   other programs have reaped the benefits of this increasing power without having
   to do anything special.

   The rules have changed. The performance of single processor cores is now 
   increasing very slowly, if at all. However, the computing power available in a 
   typical computer or console continues to grow. The difference is that most of 
   this performance gain now comes from having multiple processor cores in a single 
   machine, often in a single chip.

   The increases in available processing power are just as dramatic as in the past, 
   but now developers have to write multi-threaded code in order to use this power.


</pre>
<p>
  <br/>
  The target platforms of Doom III BFG all feature multiple cores:<br/>
  <ul>
     <li><a href="http://en.wikipedia.org/wiki/Xbox_360_hardware">Xbox 360 hardware</a> features one triple-core Xenon CPU. With simultaneous multi-threading the platform accounts for 6 logical cores.</li>
     <li><a href="http://en.wikipedia.org/wiki/PlayStation_3_hardware">PS3 hardware</a> features one PPE and six SPEs.</li>
     <li>PC hardware commonly features quad-core. With hyper-threading those platforms account for 8 logical cores.</li>
  </ul>
  <p>
    As a result, idTech4 has been boosted not only with multiple threads but also with idTech5 "Job Processing System" which harness multi-core machines.<br/>
    <br/>
	<u><b>Trivia :</b></u> The <a href="http://en.wikipedia.org/wiki/Xbox_One">Xbox One</a> and <a href="http://en.wikipedia.org/wiki/PlayStation_4">PS4</a> hardware specs have been recently announced: Both will feature eight cores. An other strong indicator that in order to be relevant any game developer will have to be good at multi-threading programming.
  <div style="clear:both"></div>



<br/>
  <h2>Doom 3 BFG Threading Model</h2>
  <p>
  <img src="../fd_proxy/doom3_bfg/doom3BFG_threading_model.png" style="width: 464px; height:367px; float:right; margin-left:10px;"/>
  Doom3 BFG is heavily multi-threaded. On PC the game starts with three threads:
  <ol>
    <li>Thread dedicated to the Renderer Backend (Sends draw commands to GPU).</li>
    <li>Thread dedicated to Game Logic and Renderer Frontend (Generates draw commands).</li>
    <li>Thread dedicated to High frequency (250Hz) joystick sampling.</li>
  </ol>
  <p>
    Additionally, idTech4 spawns two Worker Threads. They are here to assist any of the three Sovereign threads.  They are managed by an in-house Scheduler when possible.<br/>


  <div style="clear:both"></div>
  </p>


  <br/>
  <h2>Core idea</h2>
  <p>
    id Software solution to the multi-core challenge was made public in the 2009 presentation "<a href="http://s09.idav.ucdavis.edu/talks/05-JP_id_Tech_5_Challenges.pdf">Beyond Programming Shaders</a>". The two core concepts are:
    <ul>
      <li>Decompose processing task as "jobs" that are performed by "workers" threads.</li>
      <li>Avoid delegating synchronization to the operating system: Do it yourself with atomic operations.</li>
    </ul>
  </p>


  
  
  
  




<br/>
<h2>Building blocks</h2>
<p>
  The system relies on three items:
  <ul>
     <li>Jobs</li>
     <li>Workers</li>
     <li>Synchronization</li>
  </ul>
  <p>
  A "Job" is exactly what one would expect:
  <pre class="long">


     <span style="color:blue;">struct</span> job_t {
        <span style="color:blue;">void</span>  (* function )(void *);   <span style="color:green;">// Job instructions</span>
        <span style="color:blue;">void</span>   * data;                 <span style="color:green;">// Job parameters</span>
        <span style="color:blue;">int</span>    executed;               <span style="color:green;">// Job end marker...Not used.</span>
     };

  </pre>
  <p>
  <u><b>Note :</b></u> According to the <a href="https://github.com/id-Software/DOOM-3-BFG/blob/master/neo/idlib/ParallelJobList.h#L73">comments in the code</a>, "A job should be at least a couple of 1000 clock cycles in
order to outweigh any job switching overhead. On the other
hand a job should consume no more than a couple of
100,000 clock cycles to maintain a good load balance over
multiple processing units."<br/>
  <br/>
  <br/> 
  A "Worker" is a thread that will remain idle waiting for a signal. When it is awoken it tries to find jobs. The workers try to avoid synchronization by 
  using atomic operations while trying to fetch a job from a JobList.<br/>
 <br/>
 <br/>
  "Synchronization" is performed via three primitives: Signals, Mutexes and Atomic operations. The latter are favored
  since they allow the engine to retain CPU focus. Those three mechanisms implementation are detailed at the <a href="threading.php#syn_tools">bottom of this page</a>.
  </p>
  
<br/>
<h2>Architecture</h2>
<p>
  <img src="../fd_proxy/doom3_bfg/doom3_idParallelJobManager.png" style="width:442px; height:436px; float:left;margin-right:10px;"/>
  The brain of that subSystem is the <code>ParalleleJobManager</code>. It is responsible for spawning the workers threads and creating queues where Jobs are stored.<br/>
  <br/>
  That is the first way synchronization is avoided: Divide the engine job posting system into multiple sections that are
  accessed by one thread only and therefore require no synchronization. In the engine, queues are called <code>idParallelJobList</code><br/>
  <br/>
  In Doom III BFG only three sections are present: 
  <ul style="overflow: hidden;">
    <li>Renderer FrontEnd.</li>
    <li>Renderer BackEnd.</li>
    <li>Utilities.</li>
  </ul>
  <p>
    <br/>
    On PC, two Worker Threads are created at startup but
    probably more are created on XBox360 and PS3.<br/>
    <br/>
  <div style="clear:both"></div>
  <p>
    According to the 2009 presentation, idTech5 features many more sections:
     <ul>
    <li>Collision detection</li>
    <li>Animation blend</li> 
    <li>Obstacle avoidance</li>
    <li>Virtual texturing</li>
    <li>Transparency processing (foliage, particles)</li>
    <li>Cloth simulation</li>
    <li>Water surface simulation</li>    
    <li>Detail model generation (rocks, pebbles etc.)</li>    
  </ul>
  <p>
  <u><b>Note :</b></u> The powerpoint also mentions the concept of one frame latency but this portion of the code is not in Doom III BFG.<br/>
  <br/>
  <br/>


<img src="../fd_proxy/doom3_bfg/worker_atomic_sync.png" style="width:444px; height:302px; float:right;margin-left:10px;"/>
<u><b>Jobs consumption :</b></u><br/><br/><br/>
Workers run continuously and try to "find a job". This process requires no mutexes or monitors: An atomically incremented integer 
distribute jobs with no overlaps.<br/>
<div style="clear:both"></div>

</p>



<br/>
<h2>Usage</h2>
<p>
 Since jobs are segregated into sections accessed by only one thread, there is no synchronization required for adding a job. However, submitting a job to the worker system does involve a mutex. Here is a example where the renderer tries to find which lights are generating interactions :<br/>
 <pre class="long">


    <span style="color:green;">//tr.frontEndJobList is a idParallelJobList object.</span>

    <span style="color:blue;">for</span> ( viewLight_t * vLight = tr.viewDef->viewLights; vLight != <span style="color:blue;">NULL</span>; vLight = vLight->next )
    {
        tr.frontEndJobList-><span style="color:red;">AddJob</span>( (jobRun_t)R_AddSingleLight, vLight );
    }
    
    tr.frontEndJobList-><span style="color:red;">Submit</span>();
    tr.frontEndJobList-><span style="color:red;">Wait</span>();


 </pre>
 <p>
 <img src="../fd_proxy/doom3_bfg/add_submit..png" style="width:611px; height:414px; float:right;margin-left:10px;"/>
   Three parts:
   <ol>
     <li><b>AddJob</b> : No synchronization necessary, job is added to a vector.</li>
     <li><b>Submit</b> : Mutex synchonization, each worker threads add the JobList to their own local ringer buffer list of JobLists.</li>
     <li><b>Wait</b> &nbsp;&nbsp;: Signal synchonization (delegated to OS). Let the Worker threads complete.</li>
   </ol>
   <p>
   <div style="clear:both"></div>
</p>




<br/>
<h2>How a Worker works</h2>
<p>
   <img src="../fd_proxy/doom3_bfg/data_to_stack_copy.png" style="width: 527px; height:374px; float:right;margin-left:10px;"/>
   Workers are infinite loops. Each iteration the loop check if more JobList have been added to the ring buffer and if so copies the reference to the local stack.<br/>
   <br/>
   <u>Local stack :</u> The thread stack is used to store JobLists addresses as an anti-stalling mechanism. If a thread fails to "lock" a JobList, it falls in <code><b>RUN_STALLED</b></code> mode. This stall can be recovered from by navigating the local stack JobLists list in order to find an other jobList to visit . This way, "Yielding" is avoided.<br/>
   <br/>
   The interesting part is that everything is is done with no Mutexes mechanisms: Only atomic operations are used.<br/>
   <br/>
   <u><b>Note :</b></u> Avoiding Mutexes is pushed far: Sometimes they are no used even though they should have been for "correctness". Example: The copy from heap to stack uses <code>lastJobList</code> and <code>firstJobList</code> with no mutex. This mean that the copy can omit a JobList added concurrently on the ring buffer. It is wrong but it is ok: The worker will just stall and wait for a signal when the ring buffer operation is completed.<br/>
   <div style="clear:both"></div>
   <br/>
   <p>
   <b><u>The infinite loop :</u></b>
   
  <pre class="long">
  
  
 <span style="color:blue;">int</span> idJobThread::Run() {
	  
    threadJobListState_t threadJobListState[MAX_JOBLISTS];
    
    <span style="color:blue;">while</span> ( !IsTerminating() ) {
        
        int currentJobList = 0;
         
        <span style="color:green;">// fetch any new job lists and add them to the local list in threadJobListState</span>
        {}
        
        <span style="color:blue;">if</span>  ( lastStalledJobList < 0 )
            <span style="color:green;">// find the job list with the highest priority</span>
        <span style="color:blue;">else</span>
            <span style="color:green;">// try to hide the stall with a job from a list that has equal or higher priority</span>
  
        currentJobList = X;
        
        <span style="color:green;">// try running one or more jobs from the current job list</span>
        <span style="color:blue;">int</span> result = threadJobListState[currentJobList].jobList->RunJobs( threadNum, threadJobListState[currentJobList], singleJob );
        
        <span style="color:green;">// Analyze how job running went</span>
        <span style="color:blue;">if</span>  ( ( result & idParallelJobList_Threads::RUN_DONE ) != 0 ) {
            <span style="color:green;">// done with this job list so remove it from the local list (threadJobListState[currentJobList])</span>
        } <span style="color:blue;">else</span>  <span style="color:blue;">if</span>  ( ( result & idParallelJobList_Threads::RUN_STALLED ) != 0 ) {
            lastStalledJobList = currentJobList;
        } <span style="color:blue;">else</span>  {
            lastStalledJobList = -1;
        }
    }
        
 }   
  </pre>
  <p>
 
  <br/>
  <b><u>Where jobs are run :</u></b>
  <pre class="long">
  

  
      <span style="color:blue;">int</span> idParallelJobList::RunJobs( <span style="color:blue;">unsigned int</span>  threadNum, threadJobListState_t & state, <span style="color:blue;">bool</span>  singleJob ) {
	    
        <span style="color:green;">// try to lock to fetch a new job</span>
        <span style="color:blue;">if</span> ( fetchLock.Increment() == 1 ) {
	        
            <span style="color:green;">// grab a new job</span>
            state.nextJobIndex = currentJob.Increment() - 1;
        
            <span style="color:green;">// release the fetch lock</span>
            fetchLock.Decrement();
            
        } <span style="color:blue;">else</span> {
	        
            <span style="color:green;">// release the fetch lock</span>
            fetchLock.Decrement();
            <span style="color:green;">// another thread is fetching right now so consider stalled</span>
             <span style="color:blue;">return</span>  ( result | RUN_STALLED );
             
        }
        
        <span style="color:green;">// Run job</span>
        jobList[state.nextJobIndex].function( jobList[state.nextJobIndex].data );
         
        <span style="color:green;">// if at the end of the job list we're done</span> 
        <span style="color:blue;">if</span>  ( state.nextJobIndex >= jobList.Num() ) {
            <span style="color:blue;">return</span>  ( result | RUN_DONE );
        }
		
        <span style="color:blue;">return</span>  ( result | RUN_PROGRESS );
		
     }
     
  </pre>
<p>
  
  
</p>




<br/>
<h2 id="syn_tools">id Software Synchronization tools</h2>
<p>
id Software uses three types of synchronization mecanisms:<br/>
<br/>
<u><b>1. Monitors (idSysSignal) :</b></u><br/>
<br/>
<table align="center" class="credits" cellspacing="0" cellpadding="0" border="0" >
  <tbody>
    <tr>
      <td align="center">
        <b>Abstraction</b>
      </td>
      <td align="center" >
        <b>Operations</b>
      </td>
      <td align="center" >
        <b>Implemented with</b>
      </td>
      <td align="center" style="font-weight:bold; border-right:1px solid #ccc;">
        Details
      </td>
    </tr>
    <tr>
      <td align="center" >
        <b>idSysSignal</b>
      </td>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        <b><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686915(v=vs.85).aspx">Event Objects</a></b>
      </td>
      <td align="center" style="font-weight:bold; border-right:1px solid #ccc; text-align:left;">
        
      </td>
    </tr>

    <tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        Raise
      </td>
      <td align="center" >
        <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686211(v=vs.85).aspx">SetEvent</a>
      </td>
      <td align="center" style="border-right:1px solid #ccc; text-align:left;">
        Sets the specified event object to the signaled state.
      </td>
    </tr>


 <tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
       Clear
      </td>
      <td align="center" >
        <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms685081(v=vs.85).aspx">ResetEvent</a>
      </td>
      <td align="center" style=" border-right:1px solid #ccc; text-align:left;">
        Sets the specified event object to the nonsignaled state.
      </td>
    </tr>

  

     <tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        Wait
      </td>
      <td align="center" >
        <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms687032(v=vs.85).aspx">WaitForSingleObject</a>
      </td>
      <td align="center" style="border-right:1px solid #ccc; text-align:left;">
        Waits until the specified object is in the signaled state or the time-out interval elapses.
      </td>
    </tr>

  </tbody>
</table>
<p>
Signals are mainly used to put a Thread to sleep. Workers uses <code>idSysSignal.Wait()</code> to remove themselves from the Operating System scheduler until jobs are available.





<br/><br/>
<u><b>2. Mutexes (idSysMutex) :</u></b><br/>
<br/>

<table align="center" class="credits" cellspacing="0" cellpadding="0" border="0" >
  <tbody>
    <tr>
      <td align="center">
        <b>Abstraction</b>
      </td>
      <td align="center" >
        <b>Operations</b>
      </td>
      <td align="center" width="200px;">
        <b>Implemented with</b>
      </td>
      <td align="center" style="font-weight:bold; border-right:1px solid #ccc;">
        Details
      </td>
    </tr>




     <tr>
      <td align="center" >
        <b>idSysMutex</b>
      </td>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        <b><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms686915(v=vs.85).aspx">Critical Section Objects</a></b>
      </td>
      <td align="center" style="font-weight:bold; border-right:1px solid #ccc; text-align:left;">
        
      </td>
    </tr>





   <tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        Lock
      </td>
      <td align="center" >
        <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms682608(v=vs.85).aspx">EnterCriticalSection</a>
      </td>
      <td align="center" style="border-right:1px solid #ccc; text-align:left;">
        Waits for ownership of the specified critical section object. The function returns when the calling thread is granted ownership.
        
      </td>
    </tr>




<tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        Unlock
      </td>
      <td align="center" >
        <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms684169(v=vs.85).aspx">LeaveCriticalSection</a>
      </td>
      <td align="center" style="border-right:1px solid #ccc; text-align:left;">
        Releases ownership of the specified critical section object.
      </td>
    </tr>



<tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        
      </td>
      <td align="center" style="font-weight:bold; border-right:1px solid #ccc; text-align:left;">
        
      </td>
    </tr>








  </tbody>
</table>
<p>
<br/><br/>
<u><b>3. Atomic operations (idSysInterlockedInteger) :</u></b><br/>
<table align="center" class="credits" cellspacing="0" cellpadding="0" border="0" >
  <tbody>
    <tr>
      <td align="center" >
        <b>Abstraction</b>
      </td>
      <td align="center" >
        <b>Operations</b>
      </td>
      <td align="center" >
        <b>Implemented with</b>
      </td>
      <td align="center" style="font-weight:bold; border-right:1px solid #ccc;">
        Details
      </td>
    </tr>
     <tr>
      <td align="center" >
        <b>idSysInterlockedInteger</b>
      </td>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        <b><a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms684122(v=vs.85).aspx">Interlocked Variables</a></b>
      </td>
      <td align="center" style="font-weight:bold; border-right:1px solid #ccc; text-align:left;">
        
      </td>
    </tr>


    <tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        Increment
      </td>
      <td align="center" >
        <a href="http://msdn.microsoft.com/en-ca/library/windows/desktop/ms683618(v=vs.85).aspx">InterlockedIncrementAcquire</a>
      </td>
      <td align="center" style=" border-right:1px solid #ccc; text-align:left;">
        Increments (increases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed using acquire memory ordering semantics.
      </td>
    </tr>



<tr>
      <td align="center" >
        <b></b>
      </td>
      <td align="center" >
        Decrement
      </td>
      <td align="center" >
        <a href="http://msdn.microsoft.com/en-us/library/windows/desktop/ms683586(v=vs.85).aspx">InterlockedDecrementRelease</a>
      </td>
      <td align="center" style="border-right:1px solid #ccc; text-align:left;">
        Decrements (decreases by one) the value of the specified 32-bit variable as an atomic operation. The operation is performed with release memory ordering semantics.
      </td>
    </tr>


  </tbody>
</table>
<br/><br/>
</p>


<br/>
    <h2>Next</h2>
    <p>
      <a href="renderer.php">Renderer system</a>.
    </p>

<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

