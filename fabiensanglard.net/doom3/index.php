<script type="text/javascript">
  var disqus_identifier = "doom3" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Doom3 Source Code Review, id tech4"/>
		<meta name="Description" content="Doom3 Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Doom3 Source Code Review: Introduction</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       June 8, 2012</div>
   <h1>Doom3 Source Code Review: Introduction (Part 1 of 6) <a href="dmap.php">>></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="icons/doom3_icon_desaturated.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
		
		<style> 
table.credits{
    
    background: #fff;
   font: 12px 'DejaVu Sans';
    box-shadow: rgb(119, 119, 119) 3px 3px 3px;
    margin: 0px 0px 0px 15px;
    
}
	table.credits { width:97%; a:link:color:rgb(0, 136, 204);}
table.credits thead { background:transparent; }
	
	table.credits th { white-space:nowrap; }
	table.credits thead th { border-left:1px solid #ccc;  border-top:1px solid #ccc; padding:9px 9px 3px; color:#999; }
	table.credits tbody th,
	table.credits tbody td { border-top:1px solid #ccc; padding:6px 9px; }
	table.credits tbody th { padding:7px 0 7px 0; text-align:center; color:#999; }
	table.credits tbody th b { color:#333; font-weight:normal; }
	table.credits tbody td { border-left:1px solid #ccc; }
	
	table.credits tbody .session { background:#d4e6fa url(session_bgblue.png) repeat-x 0 0; }
	table.credits tbody .session.alt { background:#e9ecf0 url(session_bggray.png) repeat-x 0 0; }
	table.credits tbody .session h2 { font-size:1em; margin-bottom:0; color:rgb(0, 136, 204); }
	table.credits tbody .session .hud-content { display:none; }

	td.right
	{
		border-right:1px solid #ccc;
	}
	
	
	
	blockquote.style1 
	{
  		
  		padding: 8px;
  		
  		width: 80%;
  		
  		background-color: #eeeeee;
  		border: 1px solid #dddddd;
  		
  		
  		margin: 5px;
  		background-image: url(../quake2/images/openquote1.gif);
  		background-position: top left;
  		background-repeat: no-repeat;
  		text-indent: 23px;
  	
  	}
  	
  	blockquote.style1 span 
  	{
    	display: block;
    	font-style:italic;
    	background-image: url(../quake2/images/closequote1.gif);
    	background-repeat: no-repeat;
    	background-position: bottom right;
    	text-align: justify;
  	}
  	
  	
  	
  	
	
	</style> 

	On November 23, 2011 id Software maintained the tradition and released the source code of their previous engine.
    This time is was the turn of <a href="http://en.wikipedia.org/wiki/Id_Tech_4">idTech4</a> which powered Prey, Quake 4 and of course Doom 3. Within hours the GitHub repository was forked more than 400 times and people started to look at the game internal mechanisms/port the engine on other platforms. I also jumped on it and promptly completed the <a href="../doom3_macosx/index.php">Mac OS X Intel version</a> 
    which John Carmack <a href="http://twitter.com/#!/ID_AA_Carmack/status/140219823509602304">kindly advertised</a>.<br/>
    <br/><br/>
    In terms of clarity and comments this is the best code release from id Software after <a href="../doomIphone/index.php">
    Doom iPhone</a> codebase (which is more recent and hence better commented). I highly recommend everybody to read, build and experiment with it.<br/> 
    <br/><br/>
    Here are <a href="doom3_notes.txt">my notes</a> regarding what I understood. As usual I have cleaned them up: I hope it will save someone a few hours
     and I also hope
    it will motivate some of us to read more code and become better programmers.<br/>
    <br/>
        <a href="index.php">Part 1: Overview</a><br/>
        <a href="dmap.php">Part 2: Dmap</a>    <br/>
        <a href="renderer.php">Part 3: Renderer</a><br/>
        <a href="profiling.php">Part 4: Profiling</a>    <br/>
        <a href="scripting_vm.php">Part 5: Scripting</a><br/>
        <a href="interviews.php">Part 6: Interviews</a> (including Q&A with John Carmack)    <br/>        
    </p>
        
    <div style="clear:both"></div>	
    
    
    
        
    <br/>
    <h2>From notes to articles...</h2>
        
    <p> 
    I have noticed that I am using more and more drawing and less and less text in order to explain codebase. So far I have used <a href="http://www.gliffy.com/">gliffy</a> to draw but this tool has some frustrating limitations (such as lack of alpha channel). I am thinking of authoring a tool specialized in drawing for 3D engines using SVG and Javascript. I wonder if something like this already exist ? Anyway, back to the code...
    </p>
    
    
    
    
    
    <br/>
    <h2>Background</h2>
	<p id="paperbox">
	Getting our hands on the source code of such a ground breaking engine is exciting. Upon release in 2004 Doom III set new visual and
	audio standards for real-time engines, the most notable being "Unified Lighting and Shadows". For the first time the technology was allowing artists to express themselves on an hollywood
	scale. Even 8 years later the first encounter with the HellKnight in Delta-Labs-4 still looks insanely great:<br/>
	<br/>
    
                    <video style="width:100%; height:auto;" controls>
  <source src="hellknight.mp4" type="video/mp4">
Your browser does not support the video tag.
</video>


	
	</p>
			
    		
			
    
    
    
    
    
    
    
    
    
    
    <br/>
	<h2>First contact</h2>
	<p id="paperbox" >
	The source code is now distributed via Github which is a good thing since the FTP server from id Software was almost always down or overloaded.<br/>
	</p>
        
	<p >
        <img style="margin-left:20px; float:right; box-shadow: 3px 3px 7px #777; width :257px ; height: 248px ; "   src="../lazy_load/grey.gif" 
        data-original="/fd_proxy/doom3/doom3_vs2010.png" />
	The <a href="https://github.com/TTimo/doom3.gpl">original release</a> from TTimo compiles well with Visual Studio 2010 Professional. 
	Unfortunately Visual Studio 2010 "Express" lacks MFC and hence cannot be used. This was disappointing upon release but some people <a href="https://bugzilla.icculus.org/show_bug.cgi?id=5290">have since removed the dependencies</a>.<br/>
	<br/>
	
	
	<pre class="long" style="width : 65% ;">
	
	
    Windows 7 :
    ===========
	
    
    
    git clone https://github.com/TTimo/doom3.gpl.git
	
    
	</pre>
	<br/>

	
	<p >
	<br/>
	<img style="margin-left:20px; float:right; box-shadow: 3px 3px 7px #777; width:261px; height: 329px "   src="../lazy_load/grey.gif" 
	data-original="/fd_proxy/doom3/doom_xcode.png" />
	<br/>
	For code reading and exploring I prefer to use XCode 4.0 on Mac OS X: The search speed from SpotLight, the 
	variables highlights and the "Command-Click" to reach a definition make the experience superior to Visual Studio. The XCode project was broken upon release but it was <a href="../doom3_macosx/index.php">easy to fix with a few steps</a> and there is now a Github
	repository by "bad sector" which works well on Mac OS X Lion.<br/>
	
	
	
	<br/>
	<pre  class="long" style="width :65% ;">
	
	
    MacOS X :
    =========
	
    
    
    git clone https://github.com/badsector/Doom3-for-MacOSX-
	
    
    
	</pre>
	<div style="clear:both"></div>	
    <br/>    
    <p>    
        <u><b>Notes :</b></u> It seems "variable hightlights" and "Control-Click" are also available on Visual Studio 2010 after installing the <a href="http://blogs.msdn.com/b/kirillosenkov/archive/2010/06/07/copy-code-in-html-format-with-visual-studio-2010.aspx">Visual Studio 2010 Productivity Power Tools</a>. I cannot understand why this is not part of the vanilla install.<br/>     
     <br/>    
        
	
	Both codebases are now in the best state possible : <b>One click away from an executable !</b>
	<p>
	<ul>
		<li>Download the code.</li>
		<li>Hit F8 / Commmand-B.</li>
		<li>Run !</li>
	</ul>
	<br/>
	<p>
	<b><u>Trivia :</u></b> In order to run the game you will need the <code>base</code> folder containing the Doom 3 assets. 
        Since I did not want to waste time extracting them from the Doom 3 CDs and updating them: I downloaded the Steam version. It seems id Software team  did the same since
	the Visual Studio project released still contains <code>"+set fs_basepath C:\Program Files (x86)\Steam\steamapps\common\doom 3"</code> in the debug settings!
	<br/>
    <br/>
        <b><u>Trivia :</u></b> The engine was developed with Visual Studio .NET (<a href="http://www.iddevnet.com/doom3/code.php">source</a>). But the code does not feature a single line of C# and the version released requires Visual Studio 2010 Professional in order to compile.<br/>
        </br>
        <b><u>Trivia :</u></b> Id Software team seems to be fan of the Matrix franchise: Quake III working title was "Trinity" and Doom III working title was "Neo". This explains why you will find
        all of the source code in the <code>neo</code> subfolder.
        
	</p>	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	<br/>
	<h2>Architecture</h2>
	<p id="paperbox">
	The solution is divided in projects that reflect the overall architecture of the engine:<br/>
	<br/>
	<table align="center" class="credits" cellspacing="0" cellpadding="0" border="0" >
	<tbody>
		<tr>
			<td align="center" ><b>Projects</b>
			</td>
			<td colspan=2 align="center" ><b>Builds</b>
			</td>
			<td align="center" style="font-weight:bold; border-right:1px solid #ccc;">
				Observations
			</td>
		</tr>
		<tr>
			<td></td>
			<td  align="center" style="font-weight:bold;" >Windows</td>
			<td  align="center" style="font-weight:bold; " >MacO SX</td>
			<td style=" border-right:1px solid #ccc;"></td>
		</tr>
		<tr>
			<td align="center" >Game</td>
			<td align="center" >gamex86.dll</td>
			<td align="center" >gamex86.so</td>
			<td align="center" style=" border-right:1px solid #ccc;">Doom3 gameplay</td>
		</tr>
		<tr><td align="center" >Game-d3xp</td>
			<td align="center" >gamex86.dll</td>
			<td align="center" >gamex86.so</td>
			<td align="center" style=" border-right:1px solid #ccc;">Doom3 eXPension (Ressurection) gameplay</td>
		</tr>
		<tr>
			<td align="center"  >MayaImport</td>
			<td align="center"  >MayaImport.dll</td>
			<td align="center"  >-</td>
			<td align="center" style=" border-right:1px solid #ccc;">Part of the assets creation toolchain: Loaded at 
			runtime in order to open Maya files and import monsters, camera path and maps.</td>
		</tr>
		<tr>
			<td align="center"  >Doom3</td>
			<td align="center"  >Doom3.exe</td>
			<td align="center"  >Doom3.app</td>
			<td align="center" style=" border-right:1px solid #ccc;">Doom 3 Engine</td>
		</tr>
		<tr>
			<td align="center"  >TypeInfo</td>
			<td align="center"  >TypeInfo.exe</td>
			<td align="center"  >-</td>
			<td align="center" style=" border-right:1px solid #ccc;"> In-house RTTI helper: Generates <code>GameTypeInfo.h</code>:
			 A map of all the Doom3 class types with each member size. This allow 
			memory debugging via TypeInfo class.</td>
		</tr>
		<tr>
			<td align="center"  >CurlLib</td>
			<td align="center"  >CurlLib.lib</td>
			<td align="center"  >-</td>
			<td align="center" style=" border-right:1px solid #ccc;">HTTP client used to download files (Staticaly linked against gamex86.dll and doom3.exe).</td>
		</tr>
		<tr>
			<td align="center" style="border-bottom:1px solid #ccc; border-right:1px solid #ccc;">idLib</td>
			<td align="center" style="border-bottom:1px solid #ccc; border-right:1px solid #ccc;">idLib.lib</td>
			<td align="center" style="border-bottom:1px solid #ccc; border-right:1px solid #ccc;">idLib.a</td>
			<td align="center" style="border-bottom:1px solid #ccc; border-right:1px solid #ccc;">id Software library. Includes
			 parser,lexer,dictionary ... (Staticaly linked against gamex86.dll and doom3.exe).</td>
		</tr>
	</tbody>
	</table>
	<br/>
        <br/>
        <p>
	Like every engine since idTech2 we find one closed source binary (doom.exe) and one open source dynamic library (gamex86.dll).:<br/>
	<br/>
	
	
	<img style=" width:672px; height:630px ;display:block; margin-left: auto; margin-right: auto;" src="../lazy_load/grey.gif" data-original
	="/fd_proxy/doom3/doom3_diagram2.png"/>
    
    <br/>    
        Most of the codebase has been accessible since October 2004 via the <a href="http://www.iddevnet.com/">Doom3 SDK</a>: Only the 
    Doom3 executable source code was missing. Modders were able to build <code>idlib.a</code> and <code>gamex86.dll</code> but the core
    of the engine was still closed source.<br/>
        <br/>
        <u><b>Note :</b></u> The engine does not use the Standard C++ Library: All containers (map,linked list...) are re-implemented but <code>libc</code> is extensively used. 
    <br/>
    <br/>    
    <u><b>Note :</b></u> In the Game module each class extends idClass. This allows the engine to perform in-house RTTI and
    also instantiate classes by classname.<br/>
    <br/>
	<u><b>Trivia :</b></u> If you look at the drawing you will see that a few essential frameworks (such as <code>Filesystem</code>) 
	are in the Doom3.exe project. This is a problem since gamex86.dll needs to load assets as well. Those subsystems are dynamically loaded by gamex86.dll from doom3.exe (this is what the arrow materializes in the drawing). If we use a PE explorer on the DLL we can see that gamex86.dll export one method: <code>GetGameAPI</code>:<br/>
	<br/>
	<img style="box-shadow: 3px 3px 7px #777; width:754px; height: 561px ;display:block; margin-left: auto; margin-right: auto;" 
	src="../lazy_load/grey.gif" data-original="/fd_proxy/doom3/gamex86.dll.export.png"/>
	<br/>
    <br/>
        Things are working exactly the way <a href="../quake2/quake2Polymorphism.php">Quake2 
        loaded the renderer and the game ddls</a>: Exchanging objects pointers:
	<br/>
	<br/>
	When Doom3.exe starts up it:
	<ul>
<li>Loads the DLL in its process memory space via <code>LoadLibrary</code>.</li>
<li>Get the address of <code>GetGameAPI</code> in the dll using win32's <code>GetProcAddress</code>.</li>
<li>Call <code>GetGameAPI</code>.</li>        
</ul>
<p>
        <pre class="long">
        
        
    gameExport_t * GetGameAPI_t( gameImport_t *import );
        
        
        </pre>

 
	<p>At the end of the "handshake", Doom3.exe has a pointer to a <code>idGame</code> object and Game.dll has a pointer to
    a <code>gameImport_t</code> object containing additional references to all missing subsystems such as <code>idFileSystem</code>.<br/>
	<br/>
    
    Gamex86's view on Doom 3 executable objects:    
    <pre class="long">
        
        
        <span style="color:blue;">typedef struct</span> {
            
            <span style="color:blue;">int</span>                         version;               <span style="color:green;">// API version</span>
            idSys *                     sys;                   <span style="color:green;">// non-portable system services</span>
            idCommon *                  common;                <span style="color:green;">// common</span>
            idCmdSystem *               cmdSystem              <span style="color:green;">// console command system</span>
            idCVarSystem *              cvarSystem;            <span style="color:green;">// console variable system</span>
            idFileSystem *              fileSystem;            <span style="color:green;">// file system</span>
            idNetworkSystem *           networkSystem;         <span style="color:green;">// network system</span>
            idRenderSystem *            renderSystem;          <span style="color:green;">// render system</span>
            idSoundSystem *             soundSystem;           <span style="color:green;">// sound system</span>
            idRenderModelManager *      renderModelManager;    <span style="color:green;">// render model manager</span>
            idUserInterfaceManager *    uiManager;             <span style="color:green;">// user interface manager</span>
            idDeclManager *             declManager;           <span style="color:green;">// declaration manager</span>
            idAASFileManager *          AASFileManager;        <span style="color:green;">// AAS file manager</span>
            idCollisionModelManager *   collisionModelManager; <span style="color:green;">// collision model manager</span>
            
        } gameImport_t;
        
        
</pre>
 <br/>
    
    
<p>Doom 3's view on Game/Modd objects: 
<pre class="long">


    typedef struct 
    {

        <span style="color:blue;">int</span>            version;     <span style="color:green;">// API version</span>
        idGame *       game;        <span style="color:green;">// interface to run the game</span>
        idGameEdit *   gameEdit;    <span style="color:green;">// interface for in-game editing</span>

    } gameExport_t;

    
</pre>
        <br/>
<p>
        <u><b>Notes :</b></u> A great resource to understand better each subsystems is the 
        <a target="blank" href="http://www.iddevnet.com/doom3/code.php">Doom3 SDK documentation page</a>: It seems to have been written by someone with deep understanding of the code in 2004 (so probably a member of the development team).
</p>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <br/>
        <h2>The Code</h2>
        <p id="paperbox">
        Before digging, some stats from <code>cloc</code>:<br/>
        <pre class="long">
        
        
     ./cloc-1.56.pl neo
        
     2180 text files.
     2002 unique files.                                          
     626 files ignored.
            
     http://cloc.sourceforge.net v 1.56  T=19.0 s (77.9 files/s, 47576.6 lines/s)
        
     -------------------------------------------------------------------------------
     Language                     files          blank        comment           code
     -------------------------------------------------------------------------------
     C++                            517          87078         113107         366433
     C/C++ Header                   617          29833          27176         111105
     C                              171          11408          15566          53540
     Bourne Shell                    29           5399           6516          39966
     make                            43           1196            874           9121
     m4                              10           1079            232           9025
     HTML                            55            391             76           4142
     Objective C++                    6            709            656           2606
     Perl                            10            523            411           2380
     yacc                             1             95             97            912
     Python                          10            108            182            895
     Objective C                      1            145             20            768
     DOS Batch                        5              0              0             61
     Teamcenter def                   4              3              0             51
     Lisp                             1              5             20             25
     awk                              1              2              1             17
     -------------------------------------------------------------------------------
     SUM:                          1481         137974         164934         601047
     -------------------------------------------------------------------------------
            
        
        </pre>
        <p>
        <br/>The number of line of code is not usually a good metric for anything but here it can be very helpful in order to assess the effort to comprehend the engine. 601,047 lines of code makes the engine twice as "difficult" to understand compared to Quake III. A few stats with regards to the history of id Software engines # lines of code:<Br/> 
        <p>
        
        <table align="center" class="credits" cellspacing="0" cellpadding="0" border="0" >
        <tbody>
        <tr>
            <td>#Lines of code</td>
        <td>Doom</td>
        <td>idTech1</td>
        <td>idTech2</td>
        <td>idTech3</td>
        <td>idTech4</td>                
        </tr>
        
        <tr>
           <td>Engine</td>
           <td>39079</td>
           <td>143855</td>
           <td>135788</td>
           <td>239398</td>
           <td>601032</td>        
        </tr>
        
        	
        <tr>
        <td>Tools</td>
        <td>341</td>
        <td>11155</td>
        <td>28140</td>
        <td>128417</td>
        <td>-</td>        
        </tr>
        
        				
        <tr>
        <td>Total</td>
        <td>39420</td>
        <td>155010</td>
        <td>163928</td>
        <td>367815</td>
        <td>601032</td>                
        </tr>
        </tbody>
        </table>
        <p>
       
        <img src="../lazy_load/grey.gif" style="margin-left: auto; margin-right: auto; display:block; width:865px; height: 457px;" data-original="/fd_proxy/doom3/code_stats.png" class="shadowed" />
        <br/>
    <u><b>Note :</b></u> The huge increase in idTech3 for the tools comes from <code>lcc</code> codebase (the C compiler used to generate QVM bytecode) .<br/>	
    <u><b>Note :</b></u> No tools are accounted for Doom3 since they are integrated to the engine codebase.<br/>
            
       
       <br/>
       From a high level here are a few fun facts:<br/>
        <ul>
            <li>For the first time in id Software history the code is C++ instead of C. John Carmack <a href="interviews.php#qc++">elaborated on this</a> during our Q&A.<br/>
            </li>
        <li>Abstraction and polymorphism are used a lot across the code. But a nice trick avoids the vtable performance hit
        on some objects.</li>
            <li>All assets are stored in human readable text form. No more binaries. The code is making extensive usage of 
                     lexer/parser. John Carmack <a href="interviews.php#qtext">elaborated on this</a> during our Q&A.
                     
            </li>
            <li>Templates are used in low level utility classes (mainly idLib) but are never seen in the upper levels so they 
            won't make your eyes bleed the way Google's V8 source code does. </li>
            <li>In terms of code commenting it is the second best codebase from id software, the only one better is <a href=
            "../doomIphone/index.php">Doom iPhone</a>, probably because it is more recent than Doom3. 30% comments is still outstanding and find it rare to find a project that well commented! In some part of the code (see dmap page) there are actually more comments than statements.</li>
            <li>OOP encapsulation makes the the code clean and easy to read.</li>
            <li>The days of low level assembly optimization are gone. A few tricks such as <code>idMath::InvSqrt</code> and spacial localization optimizations are here but most 
                of the code just tries to use the tools when they are available (GPU Shaders, OpenGL VBO, SIMD, Altivec, SMP, L2 Optimizations (<code>R_AddModelSurfaces</code> per model processing)...).</li>
	    </ul>
    	<p>
    	It is also interesting to take a look at <a href="ftp://ftp.idsoftware.com/idstuff/doom3/source/CodeStyleConventions.doc">idTech4 The Coding Standard</a> (<a href="../fd_proxy/doom3/CodeStyleConventions.pdf">mirror</a>) defined by John Carmack (I particularly appreciated the comments about <code>const</code> placement).    
        </p>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <br/>
        <h2>Unrolling the loop</h2>
        <p id="paperbox">
        
        Here is the main loop unrolled with the most important parts of the engine:
        <br/>
        <pre class="long">
        
        
    idCommonLocal    commonLocal;                   <span style="color:green;">// OS Specialized object</span> 
    idCommon *       common = &commonLocal;         <span style="color:green;">// Interface pointer (since Init is OS dependent it is an abstract method</span>
        
    <span style="color:blue;">int</span> WINAPI WinMain( HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow ) 
    {
            
        
        Sys_SetPhysicalWorkMemory( 192 << 20, 1024 << 20 );   <span style="color:green;">//Min = 201,326,592  Max = 1,073,741,824</span>
        Sys_CreateConsole();
            
        <span style="color:green;">// Since the engine is multi-threaded mutexes are initialized here: One mutex per "critical" (concurrent execution) section of code.</span>
        <span style="color:blue;">for</span> (<span style="color:blue;">int</span> i = 0; i < MAX_CRITICAL_SECTIONS; i++ ) { 
            InitializeCriticalSection( &win32.criticalSections[i] );
        }
            
        common->Init( 0, NULL, lpCmdLine );              <span style="color:green;">// Assess how much VRAM is available (not done via OpenGL but OS call)</span>
            
        Sys_StartAsyncThread(){                          <span style="color:green;">// The next look runs is a separate thread.</span>
            <span style="color:blue;">while</span> ( 1 ){
                usleep( 16666 );                         <span style="color:green;">// Run at 60Hz</span>
                common->Async();                         <span style="color:green;">// Do the job</span>
                Sys_TriggerEvent( TRIGGER_EVENT_ONE );   <span style="color:green;">// Unlock other thread waiting for inputs</span>
                pthread_testcancel();                    <span style="color:green;">// Check if we have been cancelled by the main thread (on shutdown).</span>
            }
        }
        
        Sys_ShowConsole
            
        <span style="color:blue;">while</span>( 1 ){
            Win_Frame();                                 <span style="color:green;">// Show or hide the console</span>
            common->Frame(){
                session->Frame()                         <span style="color:green;">// Game logic</span>
                {
                    <span style="color:blue;">for</span> (<span style="color:blue;">int</span> i = 0 ; i < gameTicsToRun ; i++ ) 
                        RunGameTic(){
                            game->RunFrame( &cmd );      <span style="color:green;">// From this point execution jumps in the GameX86.dll address space.</span>
                              <span style="color:blue;">for</span>( ent = activeEntities.Next(); ent != NULL; ent = ent->activeNode.Next() ) 
                                ent->GetPhysics()->UpdateTime( time );  <span style="color:green;">// let entities think</span>
                        }
                }
                
                session->UpdateScreen( false ); <span style="color:green;">// normal, in-sequence screen update</span>
                {
                    renderSystem->BeginFrame
                        idGame::Draw            <span style="color:green;">// Renderer front-end. Doesn't actually communicate with the GPU !!</span>
                    renderSystem->EndFrame
                        R_IssueRenderCommands   <span style="color:green;">// Renderer back-end. Issue GPU optimized commands to the GPU.</span>
                }
            }
        }
    }        
        
        </pre>
        <p>
        <br/>
        For more details here is the <a href="doom3_unrolled.php">fully unrolled loop</a> that I used as a map while reading the code.<br/>
        <br/>
        <p>
        It is a standard main loop for an id Software engine. Except for <code>Sys_StartAsyncThread</code> which indicate that
            Doom3 is multi-threaded. The goal of this thread is to handle the time-critical functions that the engine don't want limited to
            the frame rate:
            <ul>
            <li>Sound mixing.</li>
            <li>User input generation.</li>
            </ul>
            
        <br/> 
        <p>
        <u><b>Trivia :</b></u> idTech4 high level objects are all abstract classes with virtual methods. This would normally involves a performance hit since each virtual method address would have to be looked up in a vtable before calling it at runtime. But there is a "trick" to avoid that. All object are instantiated statically as follow:
        <pre class="long">
        
        
    idCommonLocal    commonLocal;                   <span style="color:green;">// Implementation</span>
    idCommon *       common = &commonLocal;         <span style="color:green;">// Pointer for gamex86.dll</span>
        
        </pre>
        <p>
        Since an object allocated statically in the data segment has a known type the compiler can optimize away the vtable lookup when <code>commonLocal</code> methods are called. The interface pointer is used during the handshake so <code>doom3.exe</code> can exchange objects reference with <code>gamex86.dll</code> but in this case the vtable cost is not optimized away.
        <br/>
        <br/>
        
       
        
        <u><b>Trivia :</b></u> Having read most engines from id Software I find it noticeable that some method name
        have NEVER changed since doom1 engine: The method responsible for pumping mouse and joystick inputs is still called:
        <code>IN_frame()</code>.<br/>
        </p>
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        <br/>	
			<h2>Renderer</h2>
			<p id="paperbox">
            Two important parts:
            <ul>
            
                <li>Since Doom3 uses a portal system, the preprocessing tool <code>dmap</code> is a complete departure from the traditional
                bsp builder. I reviewed it to the deep down  <a href="dmap.php">on a dedicated page</a>.
                 <br/>
                 <img style="width: 895px; height: 252px; display: block; " src="../fd_proxy/doom3/FloodAreas/FloodAreas3.png" data-original="/fd_proxy/doom3/FloodAreas/FloodAreas3.png">
                 <br/><br/><br/><br/>
                </li>
               
                <li>The runtime renderer has a very interesting architecture since it is broken in two parts with a frontend and backend: <a href="renderer.php">More on the dedicated page</a>. 
                <br/>
                <img style="width: 830px; height: 436px; margin-left: auto; margin-right: auto; display: block; " src="../fd_proxy/doom3/renderer/rendere_big_picture.png" data-original="/fd_proxy/doom3/renderer/rendere_big_picture.png">
                </li>
            
            </ul>
            </p>
        
        
        
        
        
        
        
        
        

            
			<br/>
			<h2>Profiling</h2>
			<p id="paperbox">
            I used Xcode's <a href="https://developer.apple.com/library/mac/#documentation/developertools/conceptual/InstrumentsUserGuide/Introduction/Introduction.html">Instruments</a> to check where the CPU cycle were going. The results and analysis are 
            <a href="profiling.php">here</a>.
			</p>
			
			
			
			
			
			
			
			
			
			<br/>	
			<h2>Scripting and Virtual Machine</h2>
			<p id="paperbox">
            In every idTech product the VM and the scripting language totally changed from the previous version...and they did it again: 
			<a href="scripting_vm.php">Details are here</a>.
			</p>

			
			
			
	
			
			
			
			
			
			
						
			
			
			
			<br/>
			<h2>Interviews</h2>
			<p id="paperbox">
            While reading the code, several novelties puzzled me so I wrote to John Carmack and he was nice enough to reply with in-depth explanations about:<br/>
            <ul>
               <li>C++.
               <li>Renderer broken in two pieces.
               <li>Text-based assets.
               <li> Interpreted bytecode. 
            </ul>
            <p>
            
            I also compiled all videos and press interviews about idTech4. It is all in  the <a href="interviews.php">interviews page</a>.<br/>
			</p>

			
			
			
			
			
			
			
			
			
			
            
            
            
            
            
            
            
            <h2>Recommended readings</h2>

            <p id="paperbox"> 
            As usual a few books that you may enjoy if you enjoy the code:<br/>
            <br/> 
            <a href="http://www.amazon.com/The-Making-Doom-III-Official/dp/0072230525/ref=sr_1_1?ie=UTF8&qid=1334559877&sr=8-1">
            	<img src="../lazy_load/grey.gif" data-original="making_doom3.png" style="width:191px; height: 245px; margin: 0 5px 0 0;"></a> 
            
            <a href="http://www.amazon.com/Masters-Doom-Created-Transformed-Culture/dp/0375505245">
            	<img src="../lazy_load/grey.gif" data-original="../quake2/mastersDoom.png" style="width:161px; height: 245px; margin: 0 5px 0 0px;"></a> 
           </p> 
            
            
            <h2>One more thing</h2>
			<p id="paperbox">
            Summer is coming and it was not always easy to focus...<br/>
            <br/> 
			<img class="shadowed" style=" width:900px; height: 672px ;display:block; margin-left: auto; margin-right: auto;" src="../lazy_load/grey.gif" data-original="/fd_proxy/doom3/hard_to_focus_small.jpg"/><br/>
            <br/>
            
            <img class="shadowed" style=" width:900px; height: 672px ; display:block; margin-left: auto; margin-right: auto;" src="../lazy_load/grey.gif" data-original="/fd_proxy/doom3/macPro.jpg"/>
        <br/><br/>
            ...but overall it was a blast to read most of it. Since idTech5 source code will not be released anytime soon (if ever) this leaves me with idTech3 (Quake III) not yet reviewed. Maybe I will write something about it if enough people are interested.
			
            </p>
            
            
            
            
            
            
            
            
            
            
            
			
			
			
			
			
			
			
			
	<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

