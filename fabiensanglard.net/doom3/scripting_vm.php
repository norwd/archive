<script type="text/javascript">
  var disqus_identifier = "doom3" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Doom3 Source Code Review, id tech4"/>
		<meta name="Description" content="Doom3 Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
	
 	
		
		<title>Doom3 Source Code Review: Scripting VM</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       June 8, 2012</div>
   <h1>Doom3 Source Code Review: Scripting VM (Part 5 of 6) <a href="interviews.php">>></a></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="icons/doom3_icon_desaturated.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
From idTech1 to idTech3 the only thing that <u>completely</u> changed every time was the scripting system:
<ul>
    <li>idTech1: QuakeC running in a Virtual Machine.</li>
    <li>idTech2: C compiled to an x86 shared library (no virtual Machine).</li>
    <li>idTech3: C compiled to bytecode with LCC, running in QVM (Quake Virtual Machine). On x86 the bytecode was converted to native instructions at loadtime.</li>
    
</ul>
<p>
idTech4 is no exception, once again everything is different:
<ul>
   <li>The scripting is done via an Object Oriented language similar to C++.</li>
   <li>The language is fairly limited (no typedef, five basic types).</li>
<li>It is <u>always</u> interpreted via a virtual machine: There is no JIT conversion to native instruction like in idTech3 (John Carmack <a href="interviews.php#qvm">elaborated on this</a> during our Q&A).</li>
</ul>
<p>
A good introduction is to read the <a href="http://www.iddevnet.com/doom3/script.php">Doom3 Scripting SDK notes</a>.
<div style="clear:both;"></div>    
                                                         
</p>

<h2>Architecture</h2>
<p> 
Here is the big picture:<br/>
<br/>
<u><b>Compilation :</b></u> At loadtime the <code>idCompiler</code> is fed one predetermined<code>.script</code> file. A serie of <code>#include</code> directives will result in a script stack that contains all the scripts string and every functions source code. It is scanned by an <code>idLexer</code> that generates basic tokens. Tokens enter the <code>idParser</code> and one giant bytecode is generated and stored in <code>idProgram</code> singleton: This constitute the Virtual Machine RAM and contains both <code>.text</code> and <code>.data</code> VM segments.<br/>
</br>


                                                         
                                                         <img style="margin-left:auto; margin-right:auto; display:block;"src="../fd_proxy/doom3/doom3_vm_interpreter.png"/><br/>
<u><b>Virtual Machine :</b></u> At runtime the engine will allocate real CPU time to each <code>idThread</code> (one after an other) until the end of the linked list is reached. Each <code>idThread</code> contains an <code>idInterpreter</code> that saves the state of the Virtual CPU. Unless the interpreter go wild and run for more than 5,000,000 instructions it will not be pre-empted by the CPU: This is collaborative multitasking.<br/>
</br>

</p>

<h2>Compiler</h2>
<p>
The compilation pipeline is similar to what we can find reading any compiler such a V8 from Google or Clang except that there is no preprocessor. 
Hence functions such as "comment skipping", macro, directive (#include,#if) have to be done in the lexer and the parser.<br/>
<br/>
Since the <code>idLexer</code> is reused all across the engine to parse every text assets (maps, entities, camera path) it is very primitive. As an example it only return five types of tokens:
<ul>
 <li>TT_STRING</li>
 <li>TT_LITERAL</li>
 <li>TT_NUMBER</li>
 <li>TT_NAME</li>
 <li>TT_PUNCTUATION</li>
</ul>
<p>
So the parser actually has to perform much more than in a "standard" compiler pipeline.</br>
</br>
At startup the idCompiler load the first script <code>script/doom_main.script</code>, a serie of <code>#include</code> will build a stack of scripts that are combined in one giant one.<br/>
<br/>
The Parser seems to be a standard recursive descent top down parser. The scripting language grammar seems to be LL(1) necessitating 0 backtrack (even though the Lexer has the capability to "unread" up to one token). If you ever got a chance of reading <a href="http://www.amazon.ca/Compilers-Principles-Techniques-Alfred-Aho/dp/0201100886">the dragon book</a> you will not be lost...otherwise this is a good reason to get started ;) !
</p>

<h2>Interpreter</h2>
<p>
At runtime, events trigger the creation of <code>idThread</code> that are not Operating System threads but Virtual Machine threads. They are given some runtime by the CPU. Each <code>idThread</code> has an <code>idInterpreter</code> that keeps track of the Intruction Pointer and the two stacks (one for the data/parameters and one to keep track of the function calls).<br/>
    <br/>
Execution occurs in <code>idInterpreter::Execute</code> until the interpreter relinquish control of the Virtual Machine: This is collaborative multi-tasking.<br/>
<pre class="long">

  idThread::Execute
   <span style="color:blue">bool</span> idInterpreter::Execute(void)
   {
       doneProcessing = false;
       <span style="color:blue">while</span>( !doneProcessing && !threadDying ) 
       {
           instructionPointer++;
       
           st = &gameLocal.program.GetStatement( instructionPointer );
           
           <span style="color:green">//op is an unsigned short, the VM can have 65,535 opcodes</span> 
           <span style="color:blue">switch</span>( st->op ) {
                   .
                   .
                   .
           }
       }    
   }

</pre>
</br>
<p>
Once the <code>idInterpreter</code> relinquish control the next <code>idThread::Execute</code> method is called until no more thread need execution time. The overal architecture reminded me a lot of <a href="../anotherWorld_code_review/index.php">Another World VM</a> design.<br/>
                                                              
</br>
<u><b>Trivia :</b></u> The bytecode is never converted to x86 instructions since it was not meant to be heavily used. But in the end too much was done via scripting and Doom3 would probably have benefited immensely from a JIT x86 converted just like Quake3 had.
</p>

<h2>Recommended readings</h2>
<p>
Great way to understand more about the virtual machine is to read the classic <a href="http://www.amazon.ca/Compilers-Principles-Techniques-Alfred-Aho/dp/0201100886">Compilers: Principles, Techniques, and Tools </a>:<br/>
<br/>
<img style=" width:198px; height: 300px ;" class="shadowed" src="../lazy_load/grey.gif" data-original="/fd_proxy/doom3/comp.jpeg" /><br/>
</br>
</p>
<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

