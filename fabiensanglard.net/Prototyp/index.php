<script type="text/javascript">
  var disqus_identifier = "Prototyp";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Java, LWJGL, OpenGL, OpenGL Binding, Timer, tick, LWJGL sprite animation,"/>
		<meta name="Description" content="Prototyp Proof of concept using Java OpenGL Binding LWJGL"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Shoot 'Em Up</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       June 6th, 2008</div>
   <h1>Shoot 'Em Up with LWJGL</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="Prototyp.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         	




	I started to think about writing a Shoot 'Em Up back in 2005, after the winner of the <a href="http://shmup-dev.com/hcontest/">
				"Horizontal Shooter with Boss"</a> competition was kind enough to release his source code. This "Carmack" moves triggered the challenge ;
				 Being a server-side programmer for a while, I had no freaking idea how do program something which was....moving. It was the perfect 
				 occasion to learn:  &nbsp;&nbsp;&nbsp;Thanks Mr "X-Out".<br/>
				<br/>
				My objectives were:
				<p>
					<ul>
						<li>Learn the basics of a game engine.</li>
						<li>Learn a bit of OpenGL.</li>
					</ul>
				</p>
				<br/>
				<p>
					It is usually wiser to jump into a new domain without adding the difficulty of learning a new language So I decided to use my favorite
					 at this time: JAVA. For the rendition, I had two OpenGL binding available JOGL and LWJGL.<br/><br/>
					Why did I decide to go with LWJGL ? Because at this time it featured a lot more than openGL calls, there was everything I needed including:
					 Inputs controls, Textures loading, Sounds, Timer, etc. LWJGL was clearly more game oriented.<br/>
					<br/>
					One more thing.....<br/><br/>
					This is not a game and I never intended to program one, this is more like a proof of concept/challenge I felt like coding, a little bit to
					 learn, a little bit to check how much juice could come out of JAVA+OpenGL. I took me a month of spare time and this is the result. I don't
					  have the pretension to think this is good but I've learned so much reading people's webpage that I thought I should modestly return to the
					   net a little bit of what it gave me.<br/>
					   <br/>
<u><b>April 5th, 2010 :</b></u> It seems there is an issue with the last JRE 1.6 on windows platforms. <code>ImageIO.read</code> 
is loading PNGs as AGBR instead of RGBA. I am not sure if it's a JVM bug or if the PNG are not compliant and I lack time to investigate :/, 
if anyone have some time to investigate, feel free to email me !<br/>
<br/>
<u><b>Nov 20th, 2010 :</b></u> Looks like "JAVA Prototyp" engine is used for <a href="http://code.google.com/p/tf4r/">Thunder Force IV Rebirth</a> (<a href="https://www.youtube.com/watch?v=ojnTu5p00bc">video</a>).
 Keep up the good work guys ;) !<br/>
<br/>
<u><b>Feb 2th, 2011 :</b></u> The win32 JRE 1.6 "color" bug is no more. Thanks to sonicWonder for sending me a <a href="fix.txt">fix</a> (The texture 
loaded now detected the format returned by <code>ImageIO.read</code> and swap if necessary <code>BufferedImage.TYPE_4BYTE_ABGR</code> or 
<code> BufferedImage.TYPE_3BYTE_BGR</code>). Swapping is done with XOR instead of using a third variable. 
				</p>




		<h3>Run it, source code and video</h3>
			
			<p id="paperbox">
				<ul>
					<li>
						<a href="prototyp.jnlp">Run it</a> via JNPL.<br/>
					<li>
						<a href="https://github.com/fabiensanglard/Prototyp">Browse</a> the source code.
					<li>
						Download the source code :<br/>
						<br/>
						<pre class="long">


    git clone https://github.com/fabiensanglard/Prototyp.git

						</pre>
						<Br/>
						<Br/>
					<li>
						Watch the game engine in action :<Br/>
						<Br/>



<video width="960" height="720" style="width: 100%;height:auto;" controls poster="images/lightning4.jpg">
  <source src="Prototyp.m4v" type="video/mp4">
Your browser does not support the video tag.
</video>

					<!-- 	<embed style="display:block; margin-left:auto; margin-right:auto;"
src="//www.youtube.com/v/U1_NRLpnWPo&hl=en_US&fs=1&hd=1&border=1" 
type="application/x-shockwave-flash" 
allowscriptaccess="always" 
allowfullscreen="true" 
width="800" 
height="600"></embed>	 -->
			</p>	
				
				

			</p>
			





			<h3>World representation</h3>
			<p id="paperbox">
				
				The elementary unit of this Proof of Concept is the <a href="html/rtype/entity/Entity.java.html">Entity</a> object. Basically a sprite which has
				 a position, a speed, a spin and is capable of updaing itself <code>update()</code> and also render itself <code>render()</code>.<br/> 
				<br/>
				By default an Entity can only display one image but is subtyped to <a href="html/rtype/entity/AnimatedEntity.java.html">AnimatedEntity</a> to
				 perform animation (Note: I used an array of Texture to store all frame in an animation, I read later in 
				 <a href="http://www.amazon.com/GPU-Gems-Programming-Techniques-Real-Time/dp/0321228324/ref=pd_bbs_sr_3?ie=UTF8&s=books&qid=1202513113&sr=8-3">
				 GPU Gems Programming</a> that you can use a 3D texture, this is much more clever).<br/>
				<br/>
				In order to handle group of Entities easily (and also to improve collision detection but we'll talk about it later) I decided to go for the most
				 intuitive design: A  <a href="html/rtype/Layer.java.html">Layer</a> pattern.<br/>
				<br/>Prototyp has seven layer:<br/>
					<p id="codebox" >
						<pre class="long">


    static public Layer background = new Layer();
    static public Layer bullets = new Layer();
    static public Layer enemies = new Layer();
    static public Layer bonus = new Layer();
    static public Layer fx = new Layer();
    static public Layer frontground = new Layer();
    static public Layer text = new Layer(); 


						</pre>	
					</p>
				
				<p>
				The layer approach is very handy for several reasons:
					<ul>
						<li>It is perfect to implement a "back to front" or "front to back" renderer. In our case we want to go with the Painter algorithm.</li>
						<li>It makes collision detection fast (ex: Enemies bullets again your ship only)</li>
						<li>You can update or render a entire set of Entities with only calling <code>update()</code>  or <code>render()</code> on this Layer.</li>
					</ul>
					<p>
					Every visible Entity belong to a Layer. As a layer is capable of rendering itself on the screen or to update itself, it is considered 
					a high level Entity and you can start thinking "big".<br/>
					Note that although it was very convenient to perform distortion and fading effect, I would not use these static variables again but a 
					LayerManager instead. It would make the entire thing much more "engine" like.<br/	>	
					</p>
				</p>
				
			</p>
			<br/>
			<h3>Move the world!
			</h3>
			<p id="paperbox">
				
				<a href="images/furry.jpg"  >
				   <img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right;" src="images/furryThumb.jpg" alt="Highslide JS"title="Click to enlarge"   />
				</a>
				<br/>
				<p>
				The main method of this Prototyp is trivial. It can summarized as the following:<br/>
					<ul>
						<li>Make the engine's heart beat: <code>Timer.tick()</code>.</li>
						<li>Update the world's state according to the tick and user input.</li>
						<li>Render the world's state via openGL.</li>
					</ul>
				</p>
				<div style="clear:both;"></div>
				<p id="codebox" >
					<pre class="long">


    public void run() 
    {<br/>
        init();
        while (gameOn)
        {
            Timer.tick();

            getEntries();
            updateEntities();
            checkCollisons();

            render();
            Display.update();
            }
     }


	</pre>
				</p>
				<br/>
				<p>				
					As you can see, it's only one thread, and one loop. Very Zen, just as I like it.
				</p>
			<br/>
			<h3>More on the Timer
			</h3>
			
			<p id="paperbox">
				Timer is a new concept I came across exploring Game Programming. In order to make our software run consistently over machines with
				 different speeds and different GPUs, you don't update an entity position on a "each frame" basis but rather on a "time elapsed
				  since last rendition" basis. This technique allows the game to run at the same speed on every machine, the difference being
				   only the frame rate and by extension the animation quality.<br/>
				<br/>
				You have to express every speed in term of pixel/milliseconds (if your Timer return tick in millisecond unit). Updating your 
				Entities state is called interpolation, it is based on your object's last position and it's speed.<br/>
				So even though our Entity jumps from one position to an other, if the frame rate is high (&gt;30) it will appear very smooth! 
				If you check out the method of the abstract class <a href="html/rtype/entity/Entity.java.html">Entity</a>.update(), you will find interpolate():<br/>
				<p id="codebox" >
					<pre class="long">


    protected Vector2f interpolate(Vector2f old_position,Vector2f speed)
    {
        old_position.x = old_position.x + tick * speed.x;
        old_position.y = old_position.y + tick * speed.y;

        return old_position;
    }


					</pre>
				</p>
				
				<br/>
				<p>
				It's not being too strong to say the Timer is the heart of your game, it's the metronome and it rules over time...and movement.
				 <br/>How to make a Pause in your game ? Just stop calling <code>Timer.tick()</code>, overwrite it (or even better, call <code>
				 Timer.pause()</code> ;) ): Everything will stop moving. The later is actually the way it is implemented in "Prototyp".
				</p>
			</p>
			<br/>			
			<h3>Collision detection
			</h3>
				
					<a href="images/fastFire.jpg" >
					
							    <img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right; margin-left: 20px;" src="images/fastFireThumb.jpg" alt="Highslide JS" title="Click to enlarge"  />
							
					</a>
				
				
				
				<p id="paperbox">
					As we want to push this engine and animate 10000+ sprites, we need to perform collision detection fast. 
					Again, something really simple is to use rectangles in order to represent the boundary area of an Entity.<br/>
			
						<ol>
							<li>We don't need to be extremely accurate regarding detection collision: It's a shooter, everything 
							is going very fast and except for the player's own ship, he won't really pay attention to a few inaccuracies.</li>
							<li>It detects non-collision very fast: In the best case, only one comparison is enough. And collisions
							 don't happen so often. So we have a an algorithm which will run in optimal condition most of the time.</li><br/>
						</ol>
				</p>
			
				<p id="codebox" >
					<pre class="long">


    public static boolean boxBoxOverlap(Entity entityA,Entity entityB)
    {  

        if(entityA.position.x+entityA.width&lt;entityB.position.x)
            return false;
        if(entityA.position.x&gt;entityB.position.x+entityB.width)
            return false;
        if(entityA.position.y+entityA.height&lt;entityB.position.y)
            return false;
        if(entityA.position.y&gt;entityB.position.y+entityB.height)
            return false;
        return true;	
    }	


					</pre>
				</p>
			

			<br/>
			
			<br/>
			
			<h3>OpenGL's corner
			</h3>
		
			<p id="paperbox">
				There are very few things to do if you want to use openGL as a 2D Shoot 'Em Up sprite renderer . The best thing to do is to
				 remove the perspective (the thing that makes object further appear smaller), and use an orthogonal projection.<br/><br/>
				Here is a snippet how do to so:<br/>
				<p id="codebox" >
					<pre class="long">


            GL11.glMatrixMode(GL11.GL_PROJECTION);
            GL11.glLoadIdentity();
            GLU.gluOrtho2D(-(int)screenWidth/2,(int)screenWidth/2,(int)-screenHeight/2,(int)screenHeight/2);


					</pre>
				</p>	
				
				<p>
				
				</p>
					
			</p>
			<p >
			<br/>
				And that's it, you are set to draw your GL_QUADS (rectangle). As we have many objects to render and we do so in sequence there
				 is two roads you can choose:
					<ul>
						<li> Use the <code>GL11.glLoadIdentity() </code> before drawing each Entity.
						<li> Use the combination of <code>GL11.glPushMatrix()</code> and  <code> GL11.glPopMatrix() </code> respectively before
						 and after drawing each Entity.
					</ul>
					<br/>
					<p>
					I used to prefer the "fire and forget" <code>GL11.glLoadIdentity()</code> but it's very inefficient and if you want to go 3D
					 eventually, it's better to make good habit right away: <code>GL11.glPushMatrix()</code> and  <code> GL11.glPopMatrix() </code>.<br/>
					</p>
			</p>
			





			<h3>Lightning
			</h3>
			
			

			
					<a href="images/lightning3.jpg" style="float:right; margin-left: 20px;">
					
					
							    <img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right; margin-left: 20px;" src="images/lightning3Thumb.jpg" alt="Highslide JS" title="Click to enlarge"   />
						
					</a>
					<br/>
				<p id="paperbox" >
				Although we normally draw texture using the blending function <code>GL11.glBlendFunc(GL11.GL_SRC_ALPHA,GL11.GL_ONE_MINUS_SRC_ALPHA)</code>, it's sometimes pretty cool to use an other type of composition.<br/>
				
				
				
				
				Especially for light effects, use <code>GL11.glBlendFunc(GL11.GL_SRC_ALPHA, GL11.GL_ONE)</code> will allow texture overlapping each
				 other to look brighter, simulating light intensity very convincingly.The more you blend the texture in the same area, the brighter 
				 effect you will get.<br/>
				<br/><br/>You can see on the right an example: An <a href="html/rtype/entity/OrbBeam.java.html">OrbBeam</a> cast by the 
				<a href="html/rtype/entity/LightningOrb.java.html">LightningOrb</a> (The beam points are calculated using B&eacute;zier curve).
				
			</p>
			
				
				<div style="clear:both;"></div>
			<h3>Distortion effect
			</h3>
			
				

			
					<a href="images/distortionFull.png" style="float:right; margin-left: 20px;">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right; margin-left: 20px;" src="images/distortion.png" alt="Highslide JS" title="Click to enlarge"   />
						
				</a>
				<p id="paperbox" >	
				When you charge your orb or your main weapon, the background gets distorded:<br/>
				This distortion effect is achieved in two steps: 
					<ul>
						<li> Copying the entiere screen to a texture, this is done using the openGL method: <code>GL11.glCopyTexSubImage2D</code>, 
						see Example in <a href="html/rtype/Prototyp.java.html">Prototyp.saveScreen()</a> </li>
						<li> Blending a part of the saved screen (using it like a texture) against the current screen ; Using 4 GL_QUADS and 
						stretching a bit here and compressing there</li>
					</ul>
				<div style="clear:both;"></div>
			</p>
				



			<h3>User inputs
			</h3>
			
			<p id="paperbox">
				LWJGL includes a method to check if a key is pressed or not: <code>Keyboard.isKeyDown(key) </code>. It was not hard to write a little
				 <a href="html/rtype/KeyListener.java.html"> KeyListener</a> in order to trigger events such as <code>onKeyDown()</code>, 
				 <code>onKeyUp()</code> or <code>keyPressed()</code>.<br/>
				KeyListener is then when used as an Anonymous Class. Here is an example from <a href="html/rtype/entity/PlayerShip.java.html">
				PlayerShip</a> the class controlling the player: <br/>
				<p id="codebox" >


					<pre class="long">


    KeyListener fire2KeyEvent = new KeyListener()
    {
        public  void  keyPressed()
        {
            if (orb != null)
                 orb.setMove(Orb.ADJUDTING);
        };

        public  void  onKeyUp()
        {
            if (orb != null)
                orb.setMove(Orb.STICKED);
        };
    };

    EventManager.instance().addListener(fire2Key, fire2KeyEvent);<br/>


					</pre>
				</p>
				<p>
					An to finish we make sure events are pooled from the <a href="html/rtype/EventManager.java.html">EventManager</a> 
					singleton with the method: <code> EventManager.instance().checkEvents() </code>.
				</p>
				
				
						
	   
	   
			</p>
			




			<h3>Manual
			</h3>
			
			<p id="paperbox">
				<a href="images/manual2.jpg" style="float:left;">
				<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:left; margin-right: 20px;" src="images/manual2Thumb.jpg" alt="Highslide JS" title="Click to enlarge"   />
				</a>			
				<a href="images/manual.jpg" style="float:left;  ">
				 <img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right; margin-right: 20px;" src="images/manualThumb.jpg" alt="Highslide JS" title="Click to enlarge"   />
					
				</a>
				
			
				<div style="clear:both;"></div>
			</p>
			
			<h3>Funny Bugs</h3>
			<p id="paperbox">	
				<a href="images/debut3.jpg"  style="float:left;">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right; margin-right: 20px;" src="images/debut3Thumb.jpg" alt="Highslide JS" title="Click to enlarge"   />
						
				</a>
				<a href="images/debut1.jpg"  style="float:left;">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right; margin-right: 20px;"src="images/debut1Thumb.jpg" alt="Highslide JS" title="Click to enlarge"   />
						
				</a>
				<a href="images/grosBug.jpg" style="float:left;">
					<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;float:right; margin-right: 20px;" src="images/grosBugThumb.jpg" alt="Highslide JS" title="Click to enlarge"   />	
				</a>	
			</p>
			
			<div style="clear:both;"></div>
			



			<h3>Other sreenshots</h3>
			<p id="paperbox">
		
			<a href="images/debut9.jpg"  style="float:left; margin-right: 20px;">
				<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;" src="images/debut9Thumb.jpg" alt="Highslide JS"title="Click to enlarge"   />
					
			</a>
			
			<a href="images/lightning4.jpg" style="float:left; margin-right: 20px;">
				<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;"src="images/lightning4Thumb.jpg" alt="Highslide JS" title="Click to enlarge"   />	
			</a>
			
			<a href="images/shinningOrb.jpg" style="float:left; margin-right: 20px;">
				 <img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;"src="images/shinningOrbThumb.jpg" alt="Highslide JS" title="Click to enlarge"   />
			</a>

			<a href="images/lightning2.jpg" style="float:left; margin-right: 20px;">	
				<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;" src="images/lightning2Thumb.jpg" alt="Highslide JS" title="Click to enlarge"   />	
			</a>
				
			<a href="images/lightning5.jpg" style="float:left; margin-right: 20px; margin-top: 20px;">	
				 <img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;" src="images/lightning5Thumb.jpg" alt="Highslide JS" title="Click to enlarge"   />	
			</a>
		
			<a href="images/lightning.jpg" style="float:left; margin-right: 20px; margin-top: 20px;" >
				<img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;" src="images/lightningThumb.jpg" alt="Highslide JS"title="Click to enlarge"   />
			</a>
			<div style="clear:both;"></div>
			<br/>
			</p>
				
				
				<h3>Original c++ Prototyp
				</h3>
				
				<p id="paperbox">
					Here is the original c++ source code from X-Out: <a href="https://github.com/fabiensanglard/Prototype">GitHub link</a>. I unrotted the source code in 2013.<br/>
					
				</p>


<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

