<script type="text/javascript">
  var disqus_identifier = "quake2";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake 2 Source Code Review"/>
		<meta name="Description" content="Quake 2 Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake 2 Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       September 16th, 2011</div>
   <h1>Quake 2 Source Code Review 2/4</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quake2_icon.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
Quake2 is made of one kernel and two modules loaded at runtime: Game and Renderer. 
The very interesting part is that anything can be pluged into the kernel via polymorphism.<br/>
<br/>
Before reading further make sure you have a good understanding of how virtual memory works with this <a href="http://www.ualberta.ca/CNS/RESEARCH/LinuxClusters/mem.html">great article</a> (<a href="../fd_proxy/quake2/UndestandingMemory.zip">mirror</a>) 
just in case you need to refresh your memory.<br/>
<br/>
<a href="index.php">Quake 2 Source Code Review 1/4 (Intro) </a><br/>			
<a href="quake2Polymorphism.php">Quake 2 Source Code Review 2/4 (Polymorphism) </a><br/>
<a href="quake2_software_renderer.php">Quake 2 Source Code Review 3/4 (Software Renderer)</a><br/>
<a href="quake2_opengl_renderer.php">Quake 2 Source Code Review 4/4 (OpenGL Renderer)</a><br/>
<br/><div style="clear:both;"></div>
</p>

<h3>Polymorphism with C and Dynamic Linking</h3>
<p id="paperbox">
Dynamic linking provided numerous advantages:
<ul>
	<li>Renderer:</li>
	<ul>
	<li>Clean Quake2 kernel code, limited code entropy, no crazy <code>#ifdef</code> all over the place .</li>
	<li>Ship game with multiple renderer (software,openGL).</li>
	<li>Renderer can be changed while the game is running.</li>
	<li>Allowed to provide new renderer for hardware release after the game shipped (Glide, Verity).</li>
	</ul>
	<li>Game mod:</li>
	<ul>
	<li>More capabilities to mod makers, the entire game could be altered via game.dll.</li>
	<li>Full native speed for mods, no need to rely on QuakeC and Quake Vitual machine.</li>
	<li>No need to learn QuakeC, the dll were written in C.</li>
	</ul>
</ul>
<br/>
<p>
But Quake2 was written in C which is not an Oriented Object programming language and the question is then "How do you implement polymorphism with a language which is not OO ?".<br/>
<br/>
The technique is to replicate OO the way JAVA and C++ do it: Using structures containing function pointers.<br/>
<br/>
Hence four structures are used to exchange functions pointers: <code>refimport_t</code> and <code>refexport_t</code> act as container to exchange functions pointers when the renderer module is loaded.
<code>game_import_t</code> and <code>game_export_t</code>  are used when the game module is loaded.<br/>
<br/>
</p>


<h3>A small drawing is better than a long speech</h3>

<p id="paperbox">
 <br/>
Step 1: In the initial state:
<ul >
	<li><code>quake2.exe</code> holds a structure <code>ref_OpenGL_t</code> with function pointers to <code>NULL</code> (in grey).</li>
	<li>The DLL module (<code>ref_opengl.dll</code>) also holds a structure <code>kernel_fct_t</code> with function pointers to <code>NULL</code> (in grey)</code></li>
</ul>
</p>
<p>
The goal of the process is to exchange function address so each part can call each other.<br/>
<img src="../fd_proxy/quake2/poly_stage1.png"/><br/>
<br/><br/>
Step 2: The kernel calling the function populates a structure containing pointers to its own functions and send those values to the DLL.<br/>
<img src="../fd_proxy/quake2/poly_stage2.png"/><br/>
<br/><br/>
Step 3: The receiving DLL copies the kernel function pointers and return a structure containing its own function addresses.
<img src="../fd_proxy/quake2/poly_stage3.png"/><br/>
<br/>
The process with the real names is detailled in the two following sections.
</p>
<br/>

</p>

<br/>
<h3>Renderer library</h3>

<p id="paperbox">

The method retrieving the renderer module is <code>VID_LoadRefresh</code>, it is called every frames so Quake can switch renderer 
(but the level will have to restart due to preprocessing required by the render).<br/> 
<br/>
On the Quake2 kernel side this is what happens:
<pre class="long">


    refexport_t	re;

    qboolean VID_LoadRefresh( char *name )
    {
        refimport_t	ri;
        GetRefAPI_t	GetRefAPI;

        
        ri.Sys_Error = VID_Error;
        ri.FS_LoadFile = FS_LoadFile;
        ri.FS_FreeFile = FS_FreeFile;
        ri.FS_Gamedir = FS_Gamedir;
        ri.Cvar_Get = Cvar_Get;
        ri.Cvar_Set = Cvar_Set;
        ri.Vid_GetModeInfo = VID_GetModeInfo;
        ri.Vid_MenuInit = VID_MenuInit;
        ri.Vid_NewWindow = VID_NewWindow;        
        
        
        GetRefAPI = (void *) GetProcAddress( reflib_library, "GetRefAPI" );
        re = GetRefAPI( ri );
        
        ...
        
    }

    
</pre>
<br/>
<p>
In the code above, Quake2 kernel retrieves the method <code>GetRefAPI</code> function pointer from the renderer dll via <code>GetProcAddress</code> (a win32
built-in method).

<br/>
<br/>
On the renderer dll, here is what happen within <code>GetRefAPI</code>:<br/>
</p>
<pre class="long">


    refexport_t GetRefAPI (refimport_t rimp )
    {
        refexport_t	re;

        ri = rimp;

        re.api_version = API_VERSION;

        re.BeginRegistration = R_BeginRegistration;
        re.RegisterModel = R_RegisterModel;
        re.RegisterSkin = R_RegisterSkin;
        re.EndRegistration = R_EndRegistration;
        re.RenderFrame = R_RenderFrame;
        re.DrawPic = Draw_Pic;
        re.DrawChar = Draw_Char;

        re.Init = R_Init;
        re.Shutdown = R_Shutdown;

        re.BeginFrame = R_BeginFrame;
        re.EndFrame = GLimp_EndFrame;

        re.AppActivate = GLimp_AppActivate;

        return re;
}


</pre>
<p>
At the end of the "handshake", a two ways communication is established between the kernel <-> dll. This is polymorphic because the renderer dll returns its own 
function addresses within the structure, the Quake2 kernel does not see a difference, it always calls the same function pointer.
</p>

</p>

			<br/>
<h3>Game library</h3>

<p id="paperbox">
The exact same process goes for the game library, on the kernel side, here is what happen:<br/>
<pre class="long">


   game_export_t	*ge;

    void SV_InitGameProgs (void)
    {
        game_import_t	import;
        
        
        import.linkentity = SV_LinkEdict;
        import.unlinkentity = SV_UnlinkEdict;
        import.BoxEdicts = SV_AreaEdicts;
        import.trace = SV_Trace;
        import.pointcontents = SV_PointContents;
        import.setmodel = PF_setmodel;
        import.inPVS = PF_inPVS;
        import.inPHS = PF_inPHS;
        import.Pmove = Pmove;
        
        // 30 function pointer assignation skipped
	
        ge = (game_export_t *)Sys_GetGameAPI (&import);
        ge->Init ();
		
		
    }


    void *Sys_GetGameAPI (void *parms)
    {
	    void	*(*GetGameAPI) (void *);
	    
	    //[...]
	    
	    
	    GetGameAPI = (void *)GetProcAddress (game_library, "GetGameAPI");
	    if (!GetGameAPI)
	    {
	    	Sys_UnloadGame ();		
	    	return NULL;
	    }

	    return GetGameAPI (parms);
    }

    
</pre>
<p>
    <br/>
On the game dll side, here is what happen:<br/>
</p>
<br/>
<pre class="long">


    game_import_t	gi;

    game_export_t *GetGameAPI (game_import_t *import)
    {    
        gi = *import;

        globals.apiversion = GAME_API_VERSION;
        globals.Init = InitGame;
        globals.Shutdown = ShutdownGame;
        globals.SpawnEntities = SpawnEntities;

        globals.WriteGame = WriteGame;
        globals.ReadGame = ReadGame;
        globals.WriteLevel = WriteLevel;
        globals.ReadLevel = ReadLevel;

        globals.ClientThink = ClientThink;
        globals.ClientConnect = ClientConnect;
        globals.ClientDisconnect = ClientDisconnect;
        globals.ClientBegin = ClientBegin;

        globals.RunFrame = G_RunFrame;

        globals.ServerCommand = ServerCommand;

        globals.edict_size = sizeof(edict_t);

        return &globals;
    }

    
</pre>
</p>


<br/>
<h3>Using the function pointers</h3>

<p id="paperbox">
Once the method pointers have been exchanged, polymorphism is enabled. In the code, here the kernel "jumps" in the different modules:<br/>
<br/>
The renderer "jump" in <code>SCR_UpdateScreen</code>:
<pre class="long">


    // this is a quake.exe method, the renderer is abstracted and hence quake2.exe has no idea what renderer is being used.
    SCR_UpdateScreen()
    {
        // re is a struct refexport_t, BeginFrame contains the pointed toward the dll's BeginFrame.
        re.BeginFrame( separation[i] );
	    
        //From here methods belong to the dll
            SCR_CalcVrect()
            SCR_TileClear()
            V_RenderView()
            SCR_DrawStats
            SCR_DrawNet
            SCR_CheckDrawCenterString
            SCR_DrawPause
            SCR_DrawConsole
            M_Draw
            SCR_DrawLoading
        
        re.EndFrame();
        //Back to quake.exe methods.
    }



</pre>
<br/>
<br/>
<p>
The game "jump" in <code>SV_RunGameFrame</code>:
</p>
<pre class="long">


    void SV_RunGameFrame (void)    
    {        
	    sv.framenum++;        
	    sv.time = sv.framenum*100;        // don't run if paused        
	    
	    if (!sv_paused->value || maxclients->value > 1)            
	        
	        ge->RunFrame ();
	        
	        ....
        }
    }


</pre>

</p>

<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

