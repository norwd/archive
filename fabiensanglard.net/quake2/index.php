<script type="text/javascript">
  var disqus_identifier = "quake2";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake 2 Source Code Review"/>
		<meta name="Description" content="Quake 2 Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake 2 Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       September 16th, 2011</div>
   <h1>Quake 2 Source Code Review 1/4</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quake2_icon.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         	

I spent about a month in my spare time reading the source code of Quake II. 
It was a wonderful learning experience since one major improvement in idTech3 engine was to unify Quake 1, 
Quake World and QuakeGL into one beautiful code architecture. 
The way modularity was achieved even though the C programming language doesn't feature polymorphism was especially 
interesting.<br/>
<br/>
In a lot of regards Quake II is a shining piece of software history since it is the most 
popular (in term of licensing) 3D engine of all time. Powering more than 30 games but also
marking the gaming industry's departure from software/8bits color system to hardware/24bits color system that occured around 1997.<br/>
<br/>
For all those reasons, I highly recommend anyone that appreciate programming to dive into it. 
As usual I took numerous notes, cleaned them up and publish them as it may
save a few hours to someone.<br/>
<br/> 
I got a bit carried away with the "cleanup" process since there is more than 
40MB of videos,screenshots and drawings in this article. In the end I am not sure it was worth it and I may just
publish my raw ASCII notes in the future (I am thinking of Quake3 and Doom3 source), let me know what you think.<br/>
<br/>
<a href="index.php">Quake 2 Source Code Review 1/4 (Intro) </a><br/>			
<a href="quake2Polymorphism.php">Quake 2 Source Code Review 2/4 (Polymorphism) </a><br/>
<a href="quake2_software_renderer.php">Quake 2 Source Code Review 3/4 (Software Renderer)</a><br/>
<a href="quake2_opengl_renderer.php">Quake 2 Source Code Review 4/4 (OpenGL Renderer)</a><br/>
<br/>
<u>EDIT :</u> Seems this article inspired someone at geek.com since they just wrote an article <a href="http://www.geek.com/articles/games/john-carmack-coded-quake-on-a-28-inch-169-1080p-monitor-in-1995-20110920/">"John Carmack coded Quake on a 28-inch 16:9 1080p monitor in 1995"</a> (<a href="geek.com.jpg">mirror</a>).<br/>
<br/>
<u>EDIT (Oct 11,2011):</u> Wow, <a href="../fd_proxy/quake2/stats.png"/>120,000 hits</a>, 75,000 readers and a lot of kind comments/emails: Thanks guys ;) !</u> 
</p>
<br/>
<style> 
table.credits{
    
    background: #fff;
   font: 12px 'DejaVu Sans';
    box-shadow: rgb(119, 119, 119) 3px 3px 3px;
    margin: 0px 0px 0px 15px;
    
}
	table.credits { width:97%; a:link:color:rgb(0, 136, 204);}
table.credits thead { background:transparent; }
	
	table.credits th { white-space:nowrap; }
	table.credits thead th { border-left:1px solid #ccc;  border-top:1px solid #ccc; padding:9px 9px 3px; color:#999; }
	table.credits tbody th,
	table.credits tbody td { border-top:1px solid #ccc; padding:6px 9px; }
	table.credits tbody th { padding:7px 0 7px 0; text-align:center; color:#999; }
	table.credits tbody th b { color:#333; font-weight:normal; }
	table.credits tbody td { border-left:1px solid #ccc; }
	
	table.credits tbody .session { background:#d4e6fa url(session_bgblue.png) repeat-x 0 0; }
	table.credits tbody .session.alt { background:#e9ecf0 url(session_bggray.png) repeat-x 0 0; }
	table.credits tbody .session h2 { font-size:1em; margin-bottom:0; color:rgb(0, 136, 204); }
	table.credits tbody .session .hud-content { display:none; }

	td.right
	{
		border-right:1px solid #ccc;
	}
	
	
	
	blockquote.style1 
	{
  		
  		padding: 8px;
  		
  		width: 80%;
  		
  		background-color: #eeeeee;
  		border: 1px solid #dddddd;
  		
  		
  		margin: 5px;
  		background-image: url(images/openquote1.gif);
  		background-position: top left;
  		background-repeat: no-repeat;
  		text-indent: 23px;
  	
  	}
  	
  	blockquote.style1 span 
  	{
    	display: block;
    	font-style:italic;
    	background-image: url(images/closequote1.gif);
    	background-repeat: no-repeat;
    	background-position: bottom right;
    	text-align: justify;
  	}
  	
  	
  	
  
	
	</style> 
<h3>First contact and compiling</h3>

<p id="paperbox">
The source code is available for free on id software <a href="ftp://ftp.idsoftware.com/idstuff/source/quake2.zip">ftp website</a>. The project can be opened with Visual Studio Express 2008, also available for free on Microsoft website.<br/>
<br/>
<img src="project.png" style="float:left; margin-right: 4%; width: 25%;"/> The first striking thing is that the  Visual Studio 6 workspace is not made of one project but five. 
This is because Quake2 is designed to be modular (I will detail this later). Here is a summary of the building targets:<br/>
<br/>

<table align="center" class="credits" cellspacing="0" cellpadding="0" border="0" style="width:70%;">
<tbody>
	<tr><td align="center" ><b>Projects</b></td><td align="center" style=" border-right:1px solid #ccc;" ><b>Builds</b></td></tr>
	<tr><td align="center" >ctf</td><td align="center" style=" border-right:1px solid #ccc;">gamex86.dll</td></tr>
	<tr><td align="center" >game</td><td align="center" style=" border-right:1px solid #ccc;">gamex86.dll</td></tr>
	<tr><td align="center"  >quake2</td><td align="center" style=" border-right:1px solid #ccc;">quake.exe</td></tr>
	<tr><td align="center"  >ref_soft</td><td align="center" style=" border-right:1px solid #ccc;">ref_soft.dll</td></tr>
	<tr><td align="center" style="border-bottom:1px solid #ccc; ">ref_gl</td><td align="center" style="border-bottom:1px solid #ccc; border-right:1px solid #ccc;">ref_gl.dll</td></tr>
</tbody>
</table>
<br/><br/><br/>
<u><b>Note&nbsp;&nbsp;&nbsp;:</b></u> "ctf" and "game" projects overwrite each other, more about this later.<br/>
<br/>
<u><b>Note 2:</b></u> Building failed at first because of DirectX header missing:<br/>
<pre class="long">

    fatal error C1083: Cannot open include file: 'dsound.h': No such file or directory


</pre>
<p>
Installed Direct3D SDK and Microsoft SDK (for MFC) and the thing compiled fine.<br/>
<br/>
<u><b>Software erosion:</b></u> It seems that what happened to Quake codebase has started to happen with Quake 2: You cannot open the workspace 
with Visual Studio 2010. You will need to use VS 2008 :(.<br/>
<br/>
<br/>
<u>Note :</u> If after compiling you run into the error: <code>"Couldn't fall back to software refresh!"</code> it means the renderer DLL failed to load properly, this is easy to fix:<br/>
<br/>
Quake2 kernel loads its two dlls using win32 API: LoadLibrary. If the DLL is not exactly what it was expecting or if the DLL dependencies cannot be resolved it will fail silently instead of displaying the error message. So:<br/>
<ul>
<li>Make sure you are linking all 5 projects with the same runtime library by right clicking on each project -> properties -> C/C++: Check that "runtime library" = Multi-threaded Debug DLL (with configuration "Debug",
 otherwise use release).</li>
 </ul>
 <p>
 
If you are using the quake2 release from id software it should fix the issue.<br/>
<ul>
<li>Now if you are using my version: I added the engine capability to output PNG screenshots, so you also need to build libpng and libz (it is in a subdirectory).
 Make sure your select the Debug DLL configuration. Once built don't forget to place the libpng and zlib dlls in the same folder as quake2.exe.
</ul>
</p>
</p>
<br/>
<h3>Quake2 architecture</h3>

<p id="paperbox">
When I read Quake 1 source code I divided it in three part: <a href="../quakeSource/quakeSourceNetWork.php">Network</a>, <a href="../quakeSource/quakeSourcePrediction.php">Prediction</a> and <a href="../quakeSource/quakeSourceRendition.php">Rendition</a>. 
This approach would have been valid for Quake 2 because the engine is not fundamentally different but it was easier to spot the improvements by dividing it by the three main project types:<br/>
<br/>
<br/>


<table align="center" class="credits" cellspacing="0" cellpadding="0" border="0"  style=" width:90%;" >
<tr><td><b>Project type</b></td><td class="right" style="width:70%"><b>Project details</b></td></tr>
<tr><td>Main engine (.exe)</td><td class="right">Kernel calling modules and performing client/server network communications. This is the <code>quake2</code> project in the workspace.</td></tr>
<tr><td>Renderer module (.dll)</td><td class="right">In charge of rendition. A software renderer (<code>ref_soft</code>) and an OpenGL renderer (<code>ref_gl</code>) are available in the workspace.</td></tr>
<tr><td style="border-bottom:1px solid #ccc; ">Game module (.dll)</td><td style="border-bottom:1px solid #ccc; " class="right">In charge of the player experience (Game content, weapons,monsters behavior...). Singleplayer (<code>game</code>) and Capture The Flag (<code>ctf</code>) are available in the workspace.</td></tr>
</table>


<br/>
<br/>
<p>
Quake2 is mono-threaded, the entry point can be found in <code>win32/sys_win.c</code>. 
<code>WinMain</code> method can be summarized as follow:
<br/>
<pre class="long">
	

  game_export_t   *ge;	// Contains function pointers to game dll
  refexport_t      re;  // Contains function pointers to renderer dll

  WinMain()	//From quake2.exe
  {
	  
        Qcommon_Init (argc, argv);
	
        while(1)
        {
            Qcommon_Frame
            {
                SV_Frame()  //Server Code
                {
                    //In network mode do not act as a server
                    if (!svs.initialized) 
                       return;
                       
                    // Jump into game.dll via function pointer
                    ge->RunFrame();
                }
            	
                CL_Frame()  //Client code
                {
                    //If server only do not render anything
                    if (dedicated->value) 
                       return;    
                       
                    // Jump into rendere.dll via function pointer
                    re.BeginFrame();
                    //[...]
                    re.EndFrame();
                }	
            	
            }
        }
  }

	</pre>
<p>	
	Fully unrolled loop in my <a href="notes.html">raw notes.</a><br/>
<br/>
<br/>
We may ask "why such a big change in term of architecture ?". To answer let's take a look at all the Quake versions from 1996 to 1997:
<ul>
	<li>Quake.</li>
	<li>WinQuake.</li>
	<li>GLQuake.</li>
	<li>VQuake. (A few words by one of the dev Stefan Podell and <a href="http://groups.google.com/group/comp.sys.ibm.pc.hardware.video/msg/4d9ce71f1e1f6484">the difficulty of V2200 at Zbuffering </a>(<a href="quake-v2x00_discussion.zip">mirror</a>) ).</li>
	<li>Quake World Server.</li>
	<li>Quake World Client.</li>
	
</ul>
<p>
A lot of executables were produced and every time the code had to be forked or tweaked via preprocessor <code>#ifdef</code>. It was a mess and the way to solve this was to:
</p>
<ul>
	<li>Unify the client/server.</li>	
	<li>Build a kernel able to load interchangeable modules.</li>
</ul>
<p>
The following drawing summarize the new approach:<br/>
</p>
</br>
</br>
<img src="../fd_proxy/quake2/architecture.jpeg" style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;display: block; margin-left: auto;margin-right: auto;"/>
</br>
</br>
<p>
The two major improvements are:<br/>
</p>
<ul>
	<li><b>Client-Server unification:</b> There is no longer one exe for the client and one for the server, the main executable can act as a server, 
	a client or both at the same time. Even while playing in singleplayer locally there is still a client and a 
	server running in the same executable (although data exchange occurs via a local buffer in this case instead of TCP IP/IPX).</li>
	<br/>
	<li><b>Modularity:</b>Part of the code are interchangeable thanks to dynamic linking, the renderer and the game code are modules
	 that can be switched without changing the Quake2 kernel. Polymorphism is achieved via two structures containing function pointers.</li>
</ul>
</br>
<p>
Those two changes make the codebase extremely elegant and more readable than Quake 1 which was suffering from code entropy.
</br>
</br>
From an implementation perspective, the DLL projects must expose only one method <code>GetRefAPI</code> for the renderers and <code>GetGameAPI</code>
for the game (Take a look at the .def file in the "Resource Files" folder):<br/>
<br/>
<code>reg_gl/Resource Files/reg_soft.def</code>
<pre class="long">


    EXPORTS
        GetGameAPI


</pre>
<p>
When the kernel wants to load a module, it loads the DLL into the process space, retrieves <code>GetRefAPI</code> 
address with <code>GetProcAddress</code>, receive the functions pointers it needs and that's it.

<p>
<u><b>Trivia:</b></u> When playing locally, the communication Client <->  Server is not performed via sockets. Instead commands are deposed in a "loopback" buffer via <code>NET_SendLoopPacket</code> on the client portion of the code. 
The server then reconstruct a command from the same buffer using <code>NET_GetLoopPacket</code>.<br/>
<br/>



<u><b>Random trivia:</b></u> Ever saw this picture and wondered what kind of monster screen was John Carmack using circa 1996:<br><br>
<img  style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;display: block; margin-left: auto;margin-right: auto;" src="../fd_proxy/quake2/john_Carmack_working.jpg"/><br/>
<br/>
It was a 28" InterView 28hd96 monitor manufactured by Intergraph. The beast was capable of a resolution of 1920x1080, quite impressive in 1995
 (details <a href="http://www.ceu-inc.com/intergr_6d.html">here</a> (<a href="monitor.zip">mirror</a>)).
<br/>
<br/>
<img  style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;display: block; margin-left: auto;margin-right: auto;" src="../fd_proxy/quake2/28hd96.jpg"/><br/><br/>
<br/>
<p>
A youtube video for your nostalgia: <a href="http://www.youtube.com/watch?v=RUghjj0cxgU">Workstations from Intergraph Computer Systems</a>.<br/>
<br/>
<u>EDIT :</u> Seems this article inspired someone at geek.com since they just wrote an article <a href="http://www.geek.com/articles/games/john-carmack-coded-quake-on-a-28-inch-169-1080p-monitor-in-1995-20110920/">"John Carmack coded Quake on a 28-inch 16:9 1080p monitor in 1995"</a> (<a href="geek.com.jpg">mirror</a>). Thanks for crediting me.<br/>
<br/>
<br/>
<u>EDIT :</u> Seems John Carmack was still using this screen during the development of Doom 3:<br/><br/>

<video width="100%" src="DOOM&#32;3&#32;-&#32;John&#32;Carmack&#32;Commentary.mp4" controls="true" type="video/mp4" poster="DOOM&#32;3&#32;-&#32;John&#32;Carmack&#32;Commentary.jpg"></video>

</p>










</p>
</p>

<br/>

</p>


<br/>
<h3>Rendition</h3>

<p id="paperbox">
The software renderer (<code>ref_soft</code>) and the hardware accelerated renderer (<code>ref_gl</code>),
modules are so big that they have their own page:<br/>
<ul>
    <li><a href="quake2_software_renderer.php">Software renderer</a> (received extra attention since it is so awesome).</li>
    <li><a href="quake2_opengl_renderer.php">OpenGL renderer</a></li>
</ul>
<br/>
<p>
Again, the really cool thing here is that the kernel has no idea what renderer is plugged: It just calls a function pointer in
a structure. The rendition pipeline is hence totally abstracted: Who needs C++ ?<br/>
<br/>
<u><b>Trivia :</b></u> id software still uses the same coordinate system from 1992 Wolfenstein 3D (as of Doom3 this was still true). It is important to know that if you try to read the renderer source code:<br/>
<br/>
<p>
	<u>With id's system:</u>
	<ul>
		<li>X axis = Left/Right</li>
		<li>Y axis = Forward/Backward</li>
		<li>Z axis = Up/Down</li>
	</ul>
	<p>
	<u>OpenGL's coordinate system:</u>
	<ul>
		<li>X axis = Left/Right</li>
		<li>Y axis = Up/Down</li>
		<li>Z axis = Forward/Backward</li>
	</ul>
<br/>
	<p>
		Hence in the OpenGL renderer the <code>GL_MODELVIEW</code> matrix is setup each frame to "correct" this in the <code>R_SetupGL</code> method (<code>glLoadIdentity</code> + <code>
		glRotatef</code>).
	</p>
</p>
</p>
</p>
</p>


<br/>
<h3>Dynamic Linking</h3>


<p id="paperbox">
The kernel/module interactions were too much data: dynamic linking has its own page <a href="quake2Polymorphism.php">here</a>.

</p>














<br/>
<h3>Modding: gamex86.dll</h3>

<p id="paperbox">
This part of the project was not very exciting to read but abandoning Quake-C for compiled
module provide two good things and one very bad.<br/>
<br/>
<u>Bad :</u>
<ul>
	<li>Portability is sacrificed, the game module must be recompiled for the target platform with specific linker parameters.</li>
</ul>
<p>
<u>Good :</u>
<ul>
	<li>Speed: Quake1's Quake-C was interpreted code but Quake2's dynamic library module <code>gamex86.dll</code> is native.</li>
	<li>Freedom: Modders have access to EVERYTHING, not only what was exposed through Quake-C.</li>
</ul>
<p>
<u>Trivia :</u> Ironically id software switched back to a virtual machine (QVM) for game, IA and modding in Quake3.<br/>
</p>
</p>
</p>














<br/>
<br/>
<h3>My quake2</h3>

<p id="paperbox">
I modified Quake2 source a little bit during my  hacking session, I highly recommend to add a DOS console so you can see your <code>printf</code> outputs live instead of 
having to pause the game and look at the Quake console.:<br/>
<br/>
It is quite easy to add a DOS style console to a Win32 window:<br/>
<br/>


<pre class="long">


    // sys_win.c

    int WINAPI WinMain (HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)
    {
	    
	   AllocConsole();
	   freopen("conin$","r",stdin);
	   freopen("conout$","w",stdout);
	   freopen("conout$","w",stderr);
	   consoleHandle = GetConsoleWindow();
	   MoveWindow(consoleHandle,1,1,680,480,1);
	   printf("[sys_win.c] Console initialized.\n");
	    
     
	   ...   
	   
    }
    
      
</pre>
<p>
Since I was running Windows on a Mac with Parallels it was uneasy to hit "printscreen" while the game was running. I hardcoded the '*' from the keypad to produce 
the same:<br/>
<pre class="long">


    // keys.c
    
    if (key == '*')
    {
        if (down)  //Avoid auto-repeat !!
            Cmd_ExecuteString("screenshot");
    }
	
	
</pre>
<br/>
<p>
<br/>
Finally I added a lot of comments and diagrams. Here is "my" full source code:<br/>
<br/>
<a href="quake2-3.21.zip"><img style="display: block; margin-left: auto;margin-right: auto;" width="64" height="64" src="../shmup_source_code/zip.png"/></a><br/>
<br/>
<u>Notes :</u> If you start working on this source you need to compile the sub-project libpng first otherwise you will get an error message at runtime: "Couldn't fall back to software refresh!". This is very easy to fix here is the solution i posted on reddit:<br/>
<br/>
<pre class="long">



   I ran into this issue a month ago and you are right it is a DLL loading error and it
   is very easy to fix. You see quake2 kernel loads some dlls using win32 API: LoadLibrary:
    
    If the DLL is not exactly what it was expecting or if the DLL dependencies cannot be resolved
     it will fail silently instead of displaying the error message. So:
     
     - Make sure you are linking all 5 projects with the same runtime library by right clicking on each project -> properties -> C/C++: 
     Check that "runtime library" = Multi-threaded Debug DLL (with configuration "Debug", otherwise use release).
     
     If you are using the quake2 release from id software it should fix the issue.
     If you are using my version: I added the engine capability to output PNG screenshots, 
     so you also need to build libpng and libz (it is in a subdirectory). Make sure your select the Debug DLL configuration. 
     Once built don't forget to place the libpng and zlib dlls in the same folder as quake2.exe.
     
     Done ;) !

     
     
</pre>
</p>













<br/><br/>
<h3>Memory managment</h3>
<br/>
<p id="paperbox">
Doom and Quake1 had their own memory manager called "Zone Memory Allocation": A big <code>malloc</code> was done at startup
and the memory block was managed via linked list. Memory Zone could be tagged so a certain category of memory could be freed very fast.<br/>
<br/>
The Zone Memory Allocator(<code>common.c: Z_Malloc, Z_Free, Z_TagMalloc , Z_FreeTags</code>) is still here in Quake2 but it is pretty much useless:
<ul>
<li>Tagging is never used and allocation/deallocation is build on top of <code>malloc</code> and <code>free</code> (I have no idea why id software decided to trust the C Standard Library at this point). 
<li>The overflow detector (using the <code>Z_MAGIC</code> contant) is never used either</li>
</ul>
<p>
It is still pretty usefull to measure memory consumption thanks to the <code>size</code> attribute in the header inserted before each memory chunks allocated:
<pre class="long">

  
    #define    Z_MAGIC    0x1d1d


    typedef struct zhead_s
    {
	    
    struct   zhead_s    *prev, *next;
    short    magic;
    short    tag;			// for group free
    int      size;
    
    } zhead_t; 


</pre>
<p>
<br/>
The Surface caching system has its own memory manager. The amount of memory allocated depends on the resolution with a bizarre formula that has the merit to
avoid trashing very efficiently:<br/>
<br/>
<pre class="long">

      Surface caching inital malloc:
      ==============================
      
        size = SURFCACHE_SIZE_AT_320X240;  //1024*768

        pix = vid.width*vid.height;	
        	
        if (pix > 64000)				
           size += (pix-64000)*3;		

</pre>
<p>
<br/>
<img  style="display: block; margin-left: auto;margin-right: auto;" src="../fd_proxy/quake2/Surface&#32;Cache.jpg"/>
<br/>
<br/>

<br/>
The "Hunk allocator" that is used for resource loading (images, sounds and textures). It is actually pretty cool
and try to use <code>virtualAlloc</code> and align with a pagesize (8KB even tough Win98 was using 4KB ?! WTF ?!).<br/>
<br/>
To finish there are a also lot of FIFO stacks (for spans storing among other things), despite the obvious limited capability they work very well.<br/>
</p>












<br/><br/>
<h3>Memory management: Alignment trick</h3>

<p id="paperbox">

    Since Quake2 still does manipulate a lot of raw pointers there is a nice trick to align a pointer on 32bits (or align on 8KB to minimize PAGE_FAULT...even though windows 98 used 4KB pages).<br/>
    <br/>
    <u>Page alignment (on 8KB):</u>
    <pre class="long">
    
    
     int roundUpToPageSize(int size)
     {
          size = (size + 8191) & ~8191; 
          return size;
     
     }
    
        
    </pre>
    <p>
    <u>Memory alignment (on 4B):</u>
    <pre class="long">
    
   
    
     memLoc = (memLoc + 3) & ~3;                         //Aligning on 4 bytes address.
	
    
        
    </pre>

</p>













<br/>
<br/>
<h3>Console subsystem</h3>

<p id="paperbox">
Quake2 kernel features a powerful console system that relies heavily on linked-lists and linear search.<br/>
<br/>
	Three objects types:<br/>
	<ul>
		<li>Commands: Give a function pointer for a given string value.</li>
		<li>Cvars: Store a string value for a given string value.</li>
		<li>Alias: Provide a replacement for a given string value.</li>
	</ul>
	
	<p>
	From a code perspective, each object type has a linked list:
	   </p>
	<pre class="long">
	 
	     
    cmd_function_t    *cmd_functions     // A linked list, each element contains a string name and a function pointer: void (*)() .
	      
	      
    cvar_t            *cvar_vars         // A linked list, each element contains a string name and a string value.
	      
	      
    cmdalias_t        *cmd_alias         // A linked list, each element contains a string name and a string alias.
	      
	      
	      
	</pre>
	    <p>
	    Every time a line is entered in the console, it is scanned,expanded (completed via alias and cvar matches) and broken into tokens 
	    that are stored in two global variables: <code>cmd_argc</code> and <code>cmd_argv</code>:
	
	    <pre class="long">
	    
	    
    static   int       cmd_argc;                     
    static   char     *cmd_argv[MAX_STRING_TOKENS];  
	  
    
	    </pre>
	    <p>
	    <br/>
	    Example:
		<img  style="display: block; margin-left: auto;margin-right: auto;" src="../fd_proxy/quake2/parsing_design.jpg"/><br/><br/>

    	Each token identified in the buffer is <code>memcpy</code>ed to a <code>malloc</code>ed location pointed by an <code>cmd_argv</code> entry. The process is 
    	quite inefficient, showing that this subsystem received little attention. This is totally justified
    	by the way: it is rarely used and has little impact hence was not worth the effort. A better approach would have been an in-place patching of the original string, writing pointer value for each token:<br/>
    	<br/>
		<img  style="display: block; margin-left: auto;margin-right: auto;" src="../fd_proxy/quake2/parsing_fab_design.jpg"/><br/><br/>
    	<br/>
    	<br/>
    	Once token are in the argument array, <code>cmd_argv[0]</code> is checked 
    	in a very slow and linearly way against all
    	functions declared in the function linked list. If a match exist, the function pointer is called.<br/>
    	<br/>
    	If no match exist the alias linked list is checked linearly in order to to check if
    	it is a function call. If the alias did replace a function call, it is called.<br/>
    	<br/>
    	Finally if nothing worked, Quake2 treats it like a variable declaration (or update 
    	if the variable is already in the linked list).<br/>
    	<br/>
    	A lot of linear search in linked list is happening here, a hashmap would have been ideal to reach a O(n) complexity instead of O(n&#178;).<br/>
    	<br/>
    	
    	<u><b>Parsing trivia 1</b> :</u> ASCII table were cleverly organized: When parsing a string for tokens, you can skip a separators and white space only testing
		if the character i is inferior to ' ' (space).<br/>
		<br/>
		</p>
		<pre class="long">
		
		
    char* returnNextToken(char* string)
    {
        while (string && *string < ' ')
            string++;
						    
        return string;
    }
    
	
		</pre>
    	<br/>
    	<p>
    	<u><b>Parsing trivia 2</b> :</u> ASCII table were super cleverly organized: You can convert a char c to an integer as follow:<br/>
		int value = c - '0' ;<br/>
		<br/>	 
		</p>
		<pre class="long">
		
		
    int charToInt(char v)
    {
        return  v  - '0' ;
    }
		
		      
		</pre>


    	<br/>
    	<br/>    	
    <p>
	    <u>Cvar value caching:</u><br/>
	    <br/>
	    Since searching for a Cvar (<code>Cvar_Get</code>) memory location in this system is O(n&#178;) (linear search + <code>strcmp</code> on each entry) 
	    the renderers cache the cvar memory location:<br/>
	   </p> 
<pre class="long">
	    

    //Caching variable
    cvar_t		*crosshair;
	    
    // During engine init step, this create 
    // and return the memory location of the Cvar.
    
    crosshair = Cvar_Get ("crosshair", "0", CVAR_ARCHIVE);    //THIS IS SLOOOOW 
    
    
    //At runtime, in the renderer.
    void SCR_DrawCrosshair (void)
    {                          
	      
        if (!crosshair->value)                                 //THIS IS FAST   
            return;
    }
            
            
</pre>
	   <p>
	   The value can then be accessed in O(1).
<br/>
</p>


	

<br/><br/>
<h3>Anti Badguys systems</h3>

<p id="paperbox">
A few mecanisms were inserted to prevent cheating:
<ul>
	<li>Even though UDP has its own CRC, a Quake CRC as added to each packets in order to prevent
	modification (<code>COM_BlockSequenceCRCByte</code>).</li>
	<li>Before the beginning of a deathmatch, maps were hashed via MD4. This hash was sent to 
	    the server so it could check client were not using modified maps (<code>Com_BlockChecksumM</code>).
	</li>
	<li>There is even a system checking the number of commands per seconds per player (<code>SV_ClientThink</code>) but I am unsure how efficient this was.</li>
</ul>
	</p>
	
	
	
	
	
	
	
	
	
	
<br/><br/>
<h3>In-house assembly</h3>
<br/>	
<p id="paperbox">
Like every version of quake, some useful functions were optimized with assembly (there is no yet trace of the 
famous "Fast Inverse Square Root", this was in Quake3).<br/>
<br/>
<u>Fast Absolute Value on a 32bits float</u> (most compiler do it automatically now):<br/>
<pre class="long">


    float Q_fabs (float f)
    {
        int tmp = * ( int * ) &f;
        tmp &= 0x7FFFFFFF;
        return * ( float * ) &tmp;
    }

    
</pre>
<p>
<br/>
<u>Fast Float to Integer</u>
<br/>
<pre class="long">


    __declspec( naked ) long Q_ftol( float f )
    {
        static int tmp;
        __asm fld dword ptr [esp+4]
        __asm fistp tmp
        __asm mov eax, tmp
        __asm ret
    }

</pre>



</p>	
	
	
	
	
	
	
	
	
	
	
	
	
	
<br/><br/>
<h3>Code Statistics</h3>

<p id="paperbox">

Code analysis by Cloc shows a total of  138,240 lines of code. As usual this number is NOT representative of
the effort since a lot was discarded during the iterative engine version cycle but I think it is a good indicator
of the overall complexity of the engine.

<pre class="long">


    $ cloc quake2-3.21/
         338 text files.
         319 unique files.
          34 files ignored.

          
    http://cloc.sourceforge.net v 1.53  T=3.0 s (96.0 files/s, 64515.7 lines/s)
    
    -------------------------------------------------------------------------------
    Language                     files          blank        comment           code
    -------------------------------------------------------------------------------
    C                              181          24072          19652         107757
    C/C++ Header                    72           2493           2521          14825
    Assembly                        22           2235           2170           8331
    Objective C                      6           1029            606           4290
    make                             2            436             67           1739
    HTML                             1              3              0           1240
    Bourne Shell                     2             17              6             54
    Teamcenter def                   2              0              0              4
    -------------------------------------------------------------------------------
    SUM:                           288          30285          25022         138240
    -------------------------------------------------------------------------------


</pre>
<p>
<br/>
<u><b>Note :</b></u> All of the assembly was for the handcrafted software renderer.
</p>
</p
<h3>Recommended tools for Quake2 hacking session</h3>
<br/>
<p id="paperbox"> 
<ul>
<li>Visual Studio Express 2008.</li>
<li>Quake2 free demo fom id's website.</li>
<li>A <a href="../fd_proxy/quake2/MyPakExplorer.zip">Pak explorer</a> I wrote.</li>
<li><a href="../fd_proxy/quake2/wally1.55b.zip">Wally</a>: WAL image format viewer.</li>
<li>A famous pak explorer (<a href="../fd_proxy/quake2/pakexplr.zip">PakExpl</a>)</li>
<li>FlipCode's <A href="http://www.flipcode.com/archives/Quake_2_BSP_File_Format.shtml">BSP Format article</a> (<a href="../fd_proxy/quake2/quake2_bsp_format.zip")>mirror</a>).</li>
<li>C Profilers: VTune(intel), CodeAnalysis(AMD), Visual Studio Team Profiler(the best imho).</li>
<li>A big 24"/30" screen.</li>
<li>IBM Model M Keyboard.</li> 
</ul>
<br/>
</p>


<h3>Recommended readings</h3>
<p id="paperbox"> 
				
				It seems that I keep on recommending the same books :/ !<br/> 
				<br/> 
				<a href="http://www.amazon.com/Michael-Abrashs-Graphics-Programming-Special/dp/1576101746"><img src="BlackBookGfxProg.png" style="margin: 0 5px 0 0;"></a> 
				<a href="http://www.amazon.com/Masters-Doom-Created-Transformed-Culture/dp/0375505245"><img src="mastersDoom.png" style="margin: 0 5px 0 0px;"></a> 
				<a href="http://www.amazon.com/Computer-Graphics-Principles-Practice-2nd/dp/0201848406"><img src="../fd_proxy/quake2/Computer&#32;Graphics&#32;Principles&#32;and&#32;Practice&#32;in&#32;C.png" style="margin: 0 5px 0 0px;"/></a> 
				<a href="http://www.amazon.com/Programming-Language-2nd-Brian-Kernighan/dp/0131103628/ref=sr_1_1?s=books&ie=UTF8&qid=1312836220&sr=1-1"><img src="../fd_proxy/quake2/C&#32;programming&#32;language.png" style="margin: 0 5px 0 0px;"/></a> 
				<a href="http://www.amazon.com/Real-Time-Rendering-Third-Tomas-Akenine-Moller/dp/1568814240/ref=sr_1_1?s=books&ie=UTF8&qid=1312836258&sr=1-1"><img src="../fd_proxy/quake2/realtime_rendering.png" style="margin: 0 0px 0 0px;"/></a> 
				<br/> <br/> 
							
			
</p>

<h3>Good times</h3>
<p id="paperbox"> 
	<img src="../fd_proxy/quake2/DSC_0002-2.JPG" style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;margin: 0 10px 0 10px; width: 100%;"/>
</p>				

<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

