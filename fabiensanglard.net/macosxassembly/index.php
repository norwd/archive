<script type="text/javascript">
  var disqus_identifier = "macosxassembly";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Mac OS X snow-leopard, gas, as, ld, assembly, i386, x86_64"/>
		<meta name="Description" content="Mac OS X assembly problem"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Assembly on MacOS X</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       December 31th, 2009</div>
   <h1>IA-32 assembly on Mac OS X</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="macosxassembly.jpg"" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         	
				I had to do some low level work with Mac OS X Snow Leopard using my MacBook Pro Core 2 Duo. I learned plenty regarding GAS for i386 and x86_64 but I would not recommend this setup to learn assembly. I think Apple's specifics would discourage a beginner and impair his/her ability to use code samples found in most books. I would rather recommend a IBM T42 with Linux Ubuntu.<br/>
<br/>
<u><b>EDIT:</b></u> I've received numerous emails so I'm going to try to explain further. It's legitimate to buy a IA-32 book or to follow an online tutorial about i386 assembly intending to use a MacBookPro to experiment as it should be backward compatible. My concern is that by doing this: Nothing will work ! The code sample won't compile, the libc call won't link and the stack won't be aligned properly. That would be a huge learning curve.
</p>







<h3>Memory refresh</h3>
	
	<p id="paperbox">
		<img style="float: right; margin-left: 15px; margin-right: 45px; margin-bottom: 45px; align: right ; display: inline; " src="memStruct.jpg"/>
Just to make sure we are at on the same page, here is a schema of the memory the way I like to represent it:
<ul>
	<li>Lower  memory at the top.</li>
	<li>Higher memory at the bottom.</li>
	<li>Text section contains the actual code.</li>
	<li>Data section contains initialized global variables (with 0s).</li>
	<li>Bss section contains uninitialized global variables.</li>
	<li>Heap grows "down", toward higher address.</li>
	<li>Stack grows "up", toward lower address.</li>
	<li>Every function calls, a stack frame is created to hold parameters and local variables.</li>
</ul>
<p>
Registers EAX, EBX, ECX, EDX, Floating Points, MMX's, SSE's are used in operations but logistic is mostly done via ESP and EBP.<br/>



<div style="clear:both;"></div>


<img style="float: right; margin-left: 15px;  display: inline; " src="stackDetails.jpg"/>

<u>More about Stack Frames:</u><br/>
<br/>
Every time a function is called, a new stack frame is created relying mostly on the EBP and ESP registers.<br/><br/> ESP points to the last item inserted in the stack. EBP points to the base of the current stackframe:
<ol>
<li>Function parameters are pushed on the stack in reverse order of declaration in source code.</li>
<li>The EIP return address (instruction to start from when the function returns) is pushed on the stack.</li>

<li>The function prolog is:</li>
<ul>
<li>Current EBP value is pushed on the stack.</li>
<li>EBP takes the value of the current ESP.</li>	
</ul>

<li>Function's local variable are allocated on the stack in order of declaration.</li>
<li>While in the function body, arguments and local variables are referenced via the EBP register (see schema).</li>

<li>The function epilog is:</li>
<ul>
<li>ESP takes the value of the current EBP.</li>
<li>EBP value is popped from the stack.</li>
</ul>

</ol>
<p>
<pre class="long" style="width:65%;">

 void function(int parA, int parB, int parC, int parD)	
 {
   int foo;
   int bar;

   [...]

   return ;
  }

</pre>


<div style="clear:both;"></div>



</p>

	<h3>The annoying 16 byte stack alignment</h3>
	<p id="paperbox">
Because compilers try to take advantage of the SIMD unit (MMX,SSE,SSE2 and SSE3 instructions set) Apple want the stack to be 16 byte aligned even in an IA-32 environment, so ESP point to a  <code>0xXXXXXXXC</code> memory address. <br/>
<p>
 Let's take the example of a small program such as <code>cpuid2.s</code> which goal is to write on screen the type of CPU running, using the libc function <code>printf</code>:<br/>
</p>
<pre  class="long" >

.bss

.data
	output:
	.asciz "The processor Vendor ID is '%s' \n"

	.lcomm buffer, 13


.text

	.globl _main

	_main:

	movl $0, %eax		# define cpuid output option
	cpuid			


	movl $buffer, %edi	# put values in string
	movl %ebx, 0(%edi)
	movl %edx, 4(%edi)
	movl %ecx, 8(%edi)
	movl $0, %ecx
	movl %ecx, 12(%edi)
	
	# Now Calling printf

	subl $0x4, %esp		#padding stack :/ !
	pushl $buffer
	pushl $output
	
	
	
	call _printf		#macosx need libc  pre_
	
				# ESP is at 0xXXXXXXX0 now, 
				# with MacOS X Special stub it will be at 0xXXXXXXXC 
	
	call _exit
	nop
	


</pre>
<br/>
<p>
Here are three significant stack state at:<br/>
<ol>
	<li>Beginning of the program</li>
	<li>Just before <code>call _printf</code></li>
	<li>Inside libc's <code>printf</code></li>
</ol>
</p>
<p>
<br/>
<br/>
On a "regular" system:
</p>
</br>
<img style="padding-left: 15px; margin-left: auto; margin-right: auto ; display: inline;" src="normalStack.jpg"/>
<br/>
On Mac OS X:<br/>
</br>
<img style="margin-left: auto; margin-right: auto ; display: inline;" src="macStack.jpg"/>

Not only you need to pad the stack but you also need to take into account the fact that Mac OS X will perfom an extra 4 byte <code>push</code> on the stack. That's why with two 4 byte parameters, the stack is only padded with 4 byte so the Mac OS X special still find the stack aligned on <code>0xXXXXXXXC</code>.<br/><br/>
Also on the list of thing to adapt, you need to remember that function parameters are 4 byte further than where they would be because of "Mac OS X"'s special <code>push</code>. For example, the first parameter on regulat system is at <code>8(%EBP)</code> while it is at <code>12(%EBP)</code> on Mac OS X.
	</p>	

<h3>Compilation problems</h3>
	<br/>
	<p id="paperbox">
An other issue that beginners may find discouraging is that plain old compilation doesn't work. GAS assembly program can normally be compiled via <code>as</code> assembler &<code>ld</code> linker (or <code>gcc</code> directly) via:<br/>

<pre class="long" >

	as -o cpuid2.o cpuid2.s
	ld -e _main -o cpuid2 -lc cpuid2.o	

	//or

	gcc cpuid2.s -gstabs -o cpuid2

</pre>
<p>
But this won't work on a MacBookPro Core2 Duo running Snow Leopard, cpuid2.s althought IA-32 valid won't get assembled:<br/>
</p>
<pre class="long" >

	cpuid2.s:50:suffix or operands invalid for `push'
	cpuid2.s:51:suffix or operands invalid for `push'

</pre>
<p>
It seems <code>as</code> default to <code>x86_64</code> assembly. You need to be specific about the target architecture:<br/>
</p>
<pre class="long" >

	
	as -arch i386 -o cpuid2.o cpuid2.s
	ld -e _main -o cpuid2 -lc cpuid2.o	

	//or

	gcc  -arch i386 cpuid2.s -gstabs -o cpuid2

</pre>
<p>
<br/>
	<b><u>EDIT:</u></b> Reddit user jah6 pointed out that you can get rid of the alignment problem when compiling with gcc: Use <code>-mstackrealign</code> parameter.<br/>
</p>
	</p>

<h3>LibC method names</h3>
	
	<p id="paperbox">
		Mac OS S requires yout to prefix all your libc method name with "_". Most code sample in Unix world don't have this constraint.
	</p>


<h3>Recommended reading</h3>
	
	<p id="paperbox">
		Try <a href="http://www.amazon.com/Professional-Assembly-Language-Programmer/dp/0764579010" >"Professional Assembly Language"</a>, it's a pretty good book. Except that they should really really really stop putting the face of their author on the front cover. What a turn off.<br/>
<br/>
<img style="margin-left: auto; margin-right: auto ; display: inline;" src="prodassemblylanguage.jpg"/>
	</p>
<h3>Source code</h3>
<p>

	I've "ported" a few example from GAS Linux to GAS Mac OS X: <a href="cpuid.s">cpuid with Write System Calls</a> and <a href="cpuid2.s">cpuid with libc</a>

			
<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

