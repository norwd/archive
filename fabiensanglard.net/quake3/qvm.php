<script type="text/javascript">
  var disqus_identifier = "quake3" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake 3 Source Code Review, id tech3, Quake Live Source Code Review"/>
		<meta name="Description" content="Quake 3 Source Code Review, Quake Live Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake 3 Source Code Review: Virtual Machine</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       June 30, 2012</div>
   <h1>Quake 3 Source Code Review: Virtual Machine (Part 4 of 5) <a href="a.i.php">>></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quake3_icon.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         If previous engines delegated only the gameplay to the Virtual Machine, idtech3 heavily rely on them for essential tasks. Among other things:
<ul>
  <li>Rendition is triggered from the Client VM.</li>
  <li>The lag compensation mechanism is entirely in the Client VM.</li>
</ul>
<p>
Moreover their design is much more elaborated: They combine the security/portability of Quake1 Virtual Machine with the high performances of Quake2's native DLLs.
This is achieved by compiling the bytecode to x86 instruction on the fly.<br/>
<br/>
<u><b>Trivia :</b></u> The virtual machine was initially supposed to be a plain bytecode interpreter but performances were disappointing 
so the development
 team wrote a runtime x86 compiler. According to the <a href="../fd_proxy/doom3/pdfs/johnc-plan_1999.pdf">.plan from Aug 16, 1999</a>
 this was done in one day.<br/>
 <br/>
</p> 







<h3>Architecture</h3>
<p id="paperbox">
In Quake III a virtual machine is called a QVM: Three of them are loaded at any time:<br/>

<img style="margin-left: auto; margin-right: auto; display: block; width: 833px ; height: 594px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_workspace_architecture.png">
<br/>
<br/>
<ul>
    <li>Client Side: Two virtual machine are loaded. Message are sent to one or the other depending on the gamestate:
        <ul>
            	<li><code>cgame</code> : Receive messages during Battle phases. Performs entity culling, predictions and trigger <code>renderer.lib</code>.</li>
	            <li><code>q3_ui</code> : Receive messages during Menu phases. Uses system calls to draw the menus.</li>
        </ul>
    </li>
	<li>Server Side: 
	    <ul>
            	<li><code>game</code> : Always receive message: Perform gamelogic and hit <code>bot.lib</code> to perform A.I .</li>
        </ul>
     </li>
</ul>
</p>








<h3>QVM Internals</h3>
<p id="paperbox">
Before describing how the QVMs are used, let's check how the bytecode is generated. As usual I prefer drawing with a little bit of complementary text:
<br/>
<img style="margin-left: auto; margin-right: auto; display: block; width: 865px ; height: 521px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/vm_chain_prod.png">
<br/>
<br/>
<code>quake3.exe</code> and its bytecode interpreter are generated via Visual Studio but the VM bytecode takes a very different path:
<ol>
   <li>Each .c file (translation unit) is compiled individually via LCC.</li>
   <li>LCC is used with a special parameter so it does not output a PE (Windows Portable Executable) but rather its Intermediate Representation which is text based 
   stack machine assembly. Each file produced features a <code>text</code>, <code>data</code> and <code>bss</code> section with symbols exports and imports.</li>
   <li>A special tool from id Software <code>q3asm.exe</code> takes all text assembly files and assembles them together in one .qvm file. It also transform everything from text to binary (for speed in case the native converted cannot kick in). <code>q3asm.exe</code> also recognize which methods are system calls and give those a negative symbol number.</li>
   <li>Upon loading the binary bytecode, <code>quake3.exe</code> converts it to x86 instructions (not mandatory).</li>
</ol>
</p>

<h3>LCC Internals</h3>
<p id="paperbox">
Here is a concrete example starting with a function that we want to run in the Virtual Machine:
<pre class="long">

   
    extern <span style="color:blue;">int</span> variableA;
    
    <span style="color:blue;">int</span> variableB;
    
    <span style="color:blue;">int</span> variableC=0;
    
    <span style="color:blue;">int</span> fooFunction(char* string){
	    
        <span style="color:blue;">return</span> variableA + strlen(string);
        
    }
    
    
</pre>
<p>
<br/>
Saved in <code>module.c</code> translation unit, <code>lcc.exe</code> is called with a special flag in order to avoid generating a Windows PE object but
rather output the Intermediate Representation. This is the LCC .obj output matching the C function above:<br/>
<pre class="long">

   
    <span style="color:red;">data</span>
    <span style="color:green;">export variableC</span>
    align 4
    LABELV variableC
    byte 4 0
    <span style="color:green;">export fooFunction</span>
    <span style="color:red;">code</span>
    <span style="color:blue;">proc fooFunction 4 4</span>
    ADDRFP4 0
    INDIRP4
    ARGP4
    ADDRLP4 0
    ADDRGP4 strlen
    CALLI4
    ASGNI4
    ARGP4 variableA
    INDIRI4
    ADDRLP4 0
    INDIRI4
    ADDI4
    RETI4
    LABELV $1
    <span style="color:blue;">endproc fooFunction 4 4</span>
    <span style="color:green;">import strlen</span>
    <span style="color:red;">bss</span>
    <span style="color:green;">export variableB</span>
    align 4
    LABELV variableB
    skip 4
    <span style="color:green;">import variableA</span>

    
</pre>
<p>
A few observations:<br/>
<ul>
   <li>The bytecode is organized in sections (marked in red): We can clearly see the <code>bss</code> (uninitialized variables), <code>data</code> (initialized variables) and <code>code</code> (usually called <code>text</code> but whatever..)</li>
   <li>Functions are defined via <code>proc</code>, <code>endproc</code> sandwich (marked in blue).</li>
   <li>The Intermediate Representation of LCC is a stack machine: All operations are done on the stack with no assumptions made about CPU registers.</li>
   <li>At the end of the LCC phrase we have a bunch of files importing/exporting variables/functions.</li>
   <li>Each statement starts with the operation type (i.e: <code>ARGP4</code>, <code>ADDRGP4</code>, <code>CALLI4</code>...). Every parameter and result will be passed on the stack.</li>
   <li>Import and Export are here so the assembler can "link" translation units" together. Notice <code>import strlen</code>, since neither q3asm.exe nor the
   VM Interpreter actually likes to the C Standard library, <code>strlen</code> is considered a system call and must be provided by the Virtual Machine.</li>
</ul>
<p>
Such a text file is generated for each .c in the VM module.
<br/>
</p>



<h3>q3asm.exe Internals</h3>
<p id="paperbox">
	<code>q3asm.exe</code> takes the LCC Intermediate representation text files and assembles them together in a .qvm file:</br>
	</br>
<img style="margin-left: auto; margin-right: auto; display: block; 738px ; height: 368px " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/vm_q3asm.png">
<br/>
Several things to notice:
<ul>
    <li>q3asm makes sense of each import/export symbols across text files.</li>
    <li>Some methods are predefined via a system call text file. You can see the <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/cgame/cg_syscalls.asm">syscall for the client VM</a> and <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/g_syscalls.asm">for the Server VMs</a>. System calls symbols are attributed a negative integer value so they can
    be identified by the interpreter.</li>
    <li>q3asm change representation from text to binary in order to gain space and speed but that is pretty much it, no optimizations are performed here.</li>
   <li>The first method to be assembled MUST be <code>vmMain</code> since it is the input message dispatcher. Moreover it MUST be located at <code>0x2D</code> in the text segment of the bytecode.</li>
</ul>
<br/>
</p>


<h3>QVM: How it works</h3>
<p id="paperbox">
Again a drawing first illustrating the unique entry point and unique exit point that act as dispatch:<br/>
<br/>
<img style="margin-left: auto; margin-right: auto; display: block; width: 814px ; height: 591px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/vm_bb.png">
<br/>

A few details:<br/>
<br/>
<u>Messages (Quake3 -> VM) are send to the Virtual Machine as follow:</u>
<br/>
<ul>
   <li>Any part of Quake3 can call <code>VM_Call( vm_t *vm, int callnum, ... )</code>.</li>
   <li><code>VMCall</code> takes up to 11 parameters and write each 4 bytes value in the VM bytecode (<code>vm_t *vm</code>) from 0x00 up to 0x26.</li>
   <li><code>VMCall</code> writes the message id at 0x2A.</li>
   <li>The interpreter starts interpreting opcodes at 0x2D (where <code>vmMain</code> was placed by <code>q3asm.exe</code>).</li>
   <li><code>vmMain</code> act as a dispatch and route the message to the appropriate bytecode method.</li>
</ul>
<p>
You can find the list of Message that can be sent to the <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/cgame/cg_public.h">Client VM</a> and <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/g_public.h">Server VM</a> (at the bottom of each file).<br/>
<br/>
<u>System calls (VM -> Quake3) go out this way:</u>
<ul>
   <li>The interpreter execute the VM opcodes one after an other (<code>VM_CallInterpreted</code>).</li>
   <li>When it encounters a <code>CALLI4</code> opcode it checks the int method index.</li>
   <li>If the value is negative then it is a system call.</li>
   <li>The "system call function pointer" (<code>int   (*systemCall)( int *parms )</code>) is called with the parameters.</li>
   <li>The function pointed to by <code>systemCall</code> acts as a dispatch and route the system call to the right part of quake3.exe</li>
</ul>
<p>
You can find the list of system calls that are provided by <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/cgame/cg_public.h">the Client VM</a> and <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/game/g_public.h">the Server VM</a> (at the top of each file).<br/>
<br/>

<p>
<u><b>Trivia :</b></u> Parameters are always very simple types: Either primitives types (char,int,float) or pointer to primitive types (char*,int[]). I suspect this was done to minimize issues due to struct alignment between Visual Studio and LCC.
<br/>
<br/>
<u><b>Trivia :</b></u> Quake3 VM does not perform dynamic linking so a developer of a QVM mod had no access to any library, not even the C Standard Library 
(strlen, memset functions are here...but they are actually system calls). Some people still managed to fake it with preallocated buffer: <a href="http://icculus.org/homepages/phaethon/q3/malloc/malloc.html">Malloc in QVM</a> !!
</p>






<h3>Unprecedented freedom</h3>
<p id="paperbox">
With the kind of task offset to the Virtual Machine the modding community was able to perform much more than modding. The prediction system
was rewritten  with "backward reconciliation" in <a href="http://www.ra.is/unlagged/">Unlagged by Neil "haste" Toronto</a>.
</p>

<h3>Productivity issue and solution</h3>
<p id="paperbox">
With such a long toolchain, developing VM code was difficult:
<ul>
   <li>The toolchain was slow.</li>
   <li>The toolchain was not integrated to Visual Studio.</li>
   <li>Building a QVM involved using commandline tools. It was cumbersome and interrupted the workflow.</li>
   <li>With so many elements in the toolchain it was hard to identify which part was at fault in case of bugs.</li>
</ul>
<p>
So idTech3 also have the ability to load a native DLL for the VM parts and it solved everything:<br/>
<br/>

<img style="margin-left: auto; margin-right: auto; display: block; width: 865px ; height: 521px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/vm_chain_dev.png"><br/>
<br/>
Overall the VM system is very versatile since a Virtual Machine is capable of running:
<ul>
   <li>Interpreted bytecode</li>
   <li>Bytecode compiled to x86 instructions</li>
   <li>Code compiled as a Windows DLL</li>
</ul>
</p>




<h3>Recommended readings</h3>
<p id="paperbox"> 
  <a href="http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">
    <img style="display: inline;  box-shadow: #777 3px 3px 3px;  width:198px; height: 300px;" src="../lazy_load/grey.gif" data-original="/fd_proxy/doom3/comp.jpeg">
  </a>
  
  <a href="https://sites.google.com/site/lccretargetablecompiler/">
    <img style="display: inline;  margin-left: 20px; box-shadow: #777 3px 3px 3px; width:228px; height: 300px;" src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/c_retargetable_book.png">
  </a>
  
  <a href="../fd_proxy/quake3/building_a_c_based_processor.pdf">
  	 <img style="display: inline;  margin-left: 20px; box-shadow: #777 3px 3px 3px; width:228px; height: 300px;" src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/build_thesis.png">
  </a>
  
</p>




<h3>Next part</h3>
<p id="paperbox">

<a href="a.i.php">The A.I Model</a>
</p>

			
	<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

