<script type="text/javascript">
  var disqus_identifier = "quake3" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake 3 Source Code Review, id tech3, Quake Live Source Code Review"/>
		<meta name="Description" content="Quake 3 Source Code Review, Quake Live Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake 3 Source Code Review: Architecture</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       June 30, 2012</div>
   <h1>Quake 3 Source Code Review: Architecture (Part 1 of 5) <a href="renderer.php">>></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quake3_icon.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         

<style> 
table.credits{
    
    background: #fff;
   font: 12px 'DejaVu Sans';
    box-shadow: rgb(119, 119, 119) 3px 3px 3px;
    margin: 0px 0px 0px 15px;
    
}
	table.credits { width:97%; a:link:color:rgb(0, 136, 204);}
table.credits thead { background:transparent; }
	
	table.credits th { white-space:nowrap; }
	table.credits thead th { border-left:1px solid #ccc;  border-top:1px solid #ccc; padding:9px 9px 3px; color:#999; }
	table.credits tbody th,
	table.credits tbody td { border-top:1px solid #ccc; padding:6px 9px; }
	table.credits tbody th { padding:7px 0 7px 0; text-align:center; color:#999; }
	table.credits tbody th b { color:#333; font-weight:normal; }
	table.credits tbody td { border-left:1px solid #ccc; }
	
	table.credits tbody .session { background:#d4e6fa url(session_bgblue.png) repeat-x 0 0; }
	table.credits tbody .session.alt { background:#e9ecf0 url(session_bggray.png) repeat-x 0 0; }
	table.credits tbody .session h2 { font-size:1em; margin-bottom:0; color:rgb(0, 136, 204); }
	table.credits tbody .session .hud-content { display:none; }

	td.right
	{
		border-right:1px solid #ccc;
	}
	
	
	
	blockquote.style1 
	{
  		
  		padding: 8px;
  		
  		width: 80%;
  		
  		background-color: #eeeeee;
  		border: 1px solid #dddddd;
  		
  		
  		margin: 5px;
  		background-image: url(../quake2/images/openquote1.gif);
  		background-position: top left;
  		background-repeat: no-repeat;
  		text-indent: 23px;
  	
  	}
  	
  	blockquote.style1 span 
  	{
    	display: block;
    	font-style:italic;
    	background-image: url(../quake2/images/closequote1.gif);
    	background-repeat: no-repeat;
    	background-position: bottom right;
    	text-align: justify;
  	}
  	
  	
  	
  
	
	</style> 
	
	Since I had one week before my next contract I decided to finish my "cycle of id". After <a href="../doomIphone/index.php">Doom</a>, <a href="../doomIphone/doomClassicRenderer.php">Doom Iphone</a>, <a href="../quakeSource/index.php">Quake1</a>, <a href="../quake2/index.php">Quake2</a>, <a href="../wolf3d/index.php">Wolfenstein iPhone</a> and <a href="../doom3/index.php">Doom3</a> I decided to read the last codebase I did not review yet: <br/>
	<br/>
	idTech3 the 3D engine that powers Quake III and <a href="http://www.quakelive.com">Quake Live</a>. <br/>
	<br/>
	The engine is mostly an evolution of idTech2 but there are some interesting novelties. The key points can be summarized as follow:
	<ul style="text-align:left;">
	   	  <li>
           <a href="renderer.php">Part 2</a> : New dualcore renderer with material based shaders (built over OpenGL Fixed Pipeline).
           </li>

	  <li><a href="network.php">Part 3</a> : New Network model based on snapshots.</li>
	  <li>
           <a href="qvm.php">Part 4</a> : New Virtual Machines  playing an essential part in the engine, combining Quake1<br/> portability/security with Quake2 speed.
	  </li>
	  
	  <li><a href="a.i.php">Part 5</a> : New Artificial Intelligence for the bots.</li>
	</ul>
	<p>
	I was particularly impressed by :
	<ul> 
	    <li>The virtual machine<u>s</u> system and the associated toolchain that altogether account for 30% of the code released. Under this perspective idTech3 is a mini operating system providing system calls to three processes.</li>
	    <li>The elegant network system based on snapshots and memory introspection.</li>
	</ul>
	<p>
	As usual I wrote numerous <a href="q3_notes.txt">notes</a> that I have cleaned up and synthesized into drawings. 
	I hope it will save time to some people but also encourage others to read more code and become better engineers.<br/>
	<br/>
            <u>Edit :</u> <a href="https://twitter.com/ID_AA_Carmack/status/219234679285489666">Thanks</a> for the <a href="slashdot.png">support</a> :) !
	<div style="clear:both;"></div>
</p>





<h3>First contact</h3>
<p id="paperbox">
<img src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/quake3_workspace.png" style="float:left; margin: 0px 40px 10px 0px; box-shadow: #777 3px 3px 3px; width:214px; height:286px;"/>
Since the venerable ftp.idsoftware.com was recently decommissioned  the code can be found on 
<a href="https://github.com/id-Software/Quake-III-Arena">id Software's GitHub account</a>:<br/>
<pre class="long" style="margin-left:275px;">

 
    git clone https://github.com/id-Software/Quake-III-Arena.git    


</pre>
<br/>
When it comes to comprehend a huge codebase I prefer to use XCode: SpotLight speed, Command-click to find definition and strings highlight make the tool more powerful than Visual Studio.
But opening Quake III project showed that code rotting is not always about the code but also about the tools: XCode 4.0 is unable to open the Quake III XCode 2.0 projects.<br/>
<br/>
In the end I used Visual Studio 2010 Professional on Windows 8: Upon installation of <a href="http://blogs.msdn.com/b/kirillosenkov/archive/2010/06/07/copy-code-in-html-format-with-visual-studio-2010.aspx">Visual Studio 2010 Productivity Power Tools</a>
the toolset was actually enjoyable.<br/>
<br/>
<P>
 The first striking thing is that the Visual Studio workspace is not made of one project but eight. Not all of them are used depending if the build is DEBUG or RELEASE 
 (especially <code>game</code>,<code>cgame</code> and <code>q3_ui</code> : the virtual machines projects). Some of the projects are never used (<code>splines</code> and <code>ui</code>).<br/>
 <br/>
 <div style="clear:both;"></div>
 <p>
 A table is better to summarize what project is contributing to which module:<br/>
 <br/>
<table align="center" class="credits" cellspacing="0" cellpadding="0" border="0" >
<tbody>
	<tr>
	    <td align="center" ><b>Projects</b></td>
	    <td align="center" ><b>Type</b></td>
	    <td align="center" ><b>DEBUG Builds</b></td>
	    <td align="center" ><b>RELEASE Builds</b></td>
	    <td align="center" style=" border-right:1px solid #ccc;"><b>Comments</b></td>
	 </tr>
	<tr>
	    <td align="center" >botlib</td>
	    <td align="center" >Static Library</td>
	    <td align="center" >botlib.lib</td>
	    <td align="center" >botlib.lib</td>
	    <td align="center" style=" border-right:1px solid #ccc;">A.I</td>
	</tr>
	<tr>
	    <td align="center" >cgame</td>
	    <td align="center" >Dynamic Libary/Bytecode</td>
	    <td align="center" >cgamex86.dll</td>
	    <td align="center" >-</td>
	    <td align="center" style=" border-right:1px solid #ccc;"></td>
	</tr>  
	<tr>
	    <td align="center" >game</td>
	    <td align="center" >Dynamic Libary/Bytecode</td>
	    <td align="center" >qagamex86.dll</td>
	    <td align="center" >-</td>
	    <td align="center" style=" border-right:1px solid #ccc;"></td>
	</tr>
	<tr>
	    <td align="center"  >q3_ui</td>
	    <td align="center" >Dynamic Libary/Bytecode</td>
	    <td align="center" >uix86.dll</td>
	    <td align="center" >-</td>
	    <td align="center" style=" border-right:1px solid #ccc;"></td>
	</tr>
	<tr>
	    <td align="center" >quake3</td>
	    <td align="center" >Executable</td>
	    <td align="center" >quake3.exe</td>
	    <td align="center" >quake3.exe</td>
	    <td align="center" style=" border-right:1px solid #ccc;"></td>
	</tr>
	<tr>
	    <td align="center" >renderer</td>
	    <td align="center" >Static Library</td>
	    <td align="center" >renderer.lib</td>
        <td align="center" >renderer.lib</td>
	    <td align="center" style=" border-right:1px solid #ccc;">OpenGL based</td>
	</tr>
	<tr>
	    <td align="center" >Splines</td>
	    <td align="center" >Static Library</td>
	    <td align="center" >Splines.lib</td>
	    <td align="center" >Splines.lib</td>
	    <td align="center" style=" border-right:1px solid #ccc;">Used NOWHERE !</td>
	</tr>
	<tr>
	    <td align="center" >ui</td>
	    <td align="center" >Dynamic Libary/Bytecode</td>
	    <td align="center" >uix86_new.dll</td>
	    <td align="center" >-</td>
	    <td align="center" style=" border-right:1px ; solid #ccc;">Used for Quake III Arena.</td>
	</tr>
</tbody>
</table>
<br/>
<p>
<u><b>Trivia :</b></u> idTech3 working title was "Trinity". Since idTech4 was called "Neo" I assumed it was from the "Matrix" franchise...but id Software stated in <a href="http://www.firingsquad.com/features/carmack/page12.asp">interview with firingsquad.com</a> that
it was named after "Trinity River in Dallas":<br/>
<pre class="long">


    <b>John :</b> I've got a couple of engine things that I'm working on, as far as research.

    <b>FS :</b> So is one of those things Trinity? I think there's been a little confusion about "Trinity."

    <b>John :</b> I was never really certain how this got as confusing as it did to everybody. After Quake, when 
    I was starting on new rendering technologies and everything, everybody was just calling it "the next engine" 
    or whatever. Michael Abrash suggested we just take Intel's tack of naming your next project after a river near 
    you. We have the Trinity River in Dallas, and so it was just like "Trinity Engine," the next step.

    
</pre> 
<br/>
            <p><u><b>Edit ( July 07, 2012 ) :</b></u> Jeremiah Sypult contacted me after publication of this article: He "unrotted" the Mac OS X build with an XCode 4.0 project for Quake3. I have fixed it further and you can get
           it on <a href="https://github.com/fabiensanglard/Quake-III-Arena">here on github</a>. You will need the Quake III Arena <code>baseq3</code> (not the demo version) and be sure
            to use the parameters <code>"+set vm_game 0 +set vm_cgame 0 +set vm_ui 0"</code> in order to use the dylib virtual machines. Open <code>/code/quake3.xcworkspace</code> and it builds in one click !! 
            
</p>


<h3>Architecture</h3>
<p id="paperbox">
A convenient way to understand an architecture is to first look at the software as a black box receiving input (upper left arrows) and generating output (bottom arrows):<br/>
<br/>
<img style="margin-left: auto; margin-right: auto; display: block; width: 888px ; height: 645px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_workspace_architecture2_blackbox.png"><br/>
<br/>
Then look how the inputs flows towards the outputs in a whitebox fashion with the 6 modules (<code>quake3.exe</code>, <code>renderer.lib</code>, <code>bot.lib</code>, <code>game</code>, <code>cgame</code> and <code>q3_ui</code>) interacting as follow: </br>

<br/>
<img style="margin-left: auto; margin-right: auto; display: block; width: 888px ; height: 645px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_workspace_architecture2.png">
<br/> 
<br/>
Two important things to understand the design:
<ol>
<li>Every single input (keyboard, win32 message, mouse, UDP socket) is converted into an <code>event_t</code> and placed in a centralized event queue (<code>sysEvent_t eventQue[256]</code>). 
This allows among other things to record (journalize) each inputs in order to recreate bugs. This design decision was discussed at length in <a href="../fd_proxy/doom3/pdfs/johnc-plan_1998.pdf">John Carmack's .plan on Oct 14, 1998</a>.</li>
<br/>
<li>Explicit split of Client and Server (this was outlined in a Q&A I did with John Carmack):
<pre class="long">


    <b>Fabien Sanglard:</b> What do you think summarize the main innovations in idTech3 besides:
                       - Bot I.A 
                       - Virtual Machine: Combining QuakeC portability and Quake2 dll speed.
                       - SMP & Shaders renderer.
                       - New Network code.
 
    <b>John Carmack:</b> The explicit split of networking into a client presentation side and the server logical side was really the right 
    thing to do. We backed away from that in Doom 3 and through most of Rage, but we are migrating back towards it.  All of the Tech3
    licensees were forced to do somewhat more work to achieve single player effects with the split architecture, but it turns out that
    the enforced discipline really did have a worthwhile payoff.


</pre>
<br/>
    
    <ul>
	<li>The server side is responsible for maintaining the state of the game, determine what is needed by clients and propagate it over the network. 
	It is statically linked against <code>bot.lib</code> which is a separate project because of its chaotic development history mentioned in page 275 of "Masters of Doom":</br>
	</br>
	   <pre class="long">
	   
	   
    To make matters worse, a fundamental ingredient of the game - the bots - was missing. Bots 
    were characters controlled by the computer. A good bot would blend in with the action and flesh 
    out the scene like a robotic extra, as well as interact with the player. For Quake III, a deathmatch
    only game, bots were essential for single-player action. They were implicitly complex because they 
    had to behave like human beings.
    
    Carmack had decided, for the First time, to delegate the job of creating these bots to another 
    programmer in the company. But he failed to follow up. Once again, Carmack incorrectly assumed 
    that everyone was as self-motivated and adept as he was. He was wrong.
    
    When Graeme struggled to rein in the work, it was discovered that the bots were completely ineffective. 
    They din't behave at all like human beings. They behaved, basically, like bots. The staff began to panic.
    By March 1999, they had reason to be scared.
    [..]
    
    In the end the bot were farmed out to a well-known mod maker in the Netherlands, who heroically brought 
    them to life. (Note from Fab: This is Mr.Elusive: Jan Paul van Waveren).
	   
	   
	   </pre>
	   </br>
	</li>
	<li>The client side is responsible for predicting where entities are (latency compensation) and render the view. It is statically linked against <code>renderer</code> project: A separate project that would have allowed a Direct3D or even software renderer to be plugged in very easily.</li>
	</ul>
</ol>


<h3>The code</h3>
<p id="paperbox">
From a code point of view here is a partially unrolled loop that illustrate the event production and consumption by the client and server:</br>
<pre class="long">


    <span style="color:blue;">int</span> WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span style="color:blue;">int</span> nCmdShow)
    {
       
        Com_Init
        
        NET_Init
        
        <span style="color:blue;">while</span>( 1 )
        {
            <span style="color:green;">// Common code</span>
            IN_Frame()  <span style="color:green;">// Add Win32 joystick and mouse inputs  as event_t to unified event queue.</span>
            {
	             IN_JoyMove                                    
	             IN_ActivateMouse
	             IN_MouseMove
            }
	        
            Com_Frame
            {
                 <span style="color:green;">// Common code</span>
                 Com_EventLoop    <span style="color:green;">// Pump win32 message, UDP socket and console commands to the queue (sysEvent_t eventQue[256])</span> 
                 Cbuf_Execute
                 
                 <span style="color:green;">// Server code</span>
                 SV_Frame
                 {
                     SV_BotFrame                                 <span style="color:green;">// Jump in bot.lib</span>
                     VM_Call( gvm, GAME_RUN_FRAME, svs.time )    <span style="color:green;">// Jump in Game Virtual Machine where game logic is performed</span>
                     
                     SV_CheckTimeouts
                     SV_SendClientMessages                       <span style="color:green;">// Send snapshot or delta snapshot to connected clients</span>
                 } 
                 
                 <span style="color:green;">// Common code</span>
                 Com_EventLoop
                 Cbuf_Execute
                  
                 <span style="color:green;">// Client code</span>
                 CL_Frame
                 {
                     CL_SendCmd                                 <span style="color:green;">// Pump the event queue and send commands to server.</span>
                     
                     SCR_UpdateScreen
                        VM_Call( cgvm, CG_DRAW_ACTIVE_FRAME);   <span style="color:green;">// Send message to the Client Virtual Machine (do Predictions).</span>
                             or
                        VM_Call( uivm, UI_DRAW_CONNECT_SCREEN); <span style="color:green;">// If a menu is visible a message is sent to the UI Virtual Machine.</span>
                     
                     S_Update                                   <span style="color:green;">// Update sound buffers</span>
                 }
            }
            
        }
    }

</pre>
<p>
Here is a <a href="q3_loop_unrolled.txt">fully unrolled loop</a> that I used a a map while digging into the source code.<br/><br/>
An interesting thing to notice here that perfectly illustrates how paramount the virtual machines are: Nowhere we see a call to <code>RE_RenderScene</code>: the function that performs culling and issue OpenGL commands. Instead what happen is:<br/>
<ol>
   <li>Quake3.exe sends a message to the Client VM: <code>CG_DRAW_ACTIVE_FRAME</code> which signal that a refresh is needed.</li>
   <li>The Virtual Machine performs some entity culling and prediction then call for OpenGL rendition via a Quake3 system call (<code>CG_R_RENDERSCENE</code>).</li>
   <li>Quake3.exe receives the system call and actually calls <code>RE_RenderScene</code>.</li>
</ol>

<p>
<pre class="long">


    OpenGL                Quake3.exe                                 Client Virtual machine
   --------               ----------                                ----------------------
      |                        |                                                |
      |                        |                                                |
      |                   VM_Call(CG_DRAW_ACTIVE_FRAME)----------------->  CG_DrawActiveFrame
      |                        |                                           CG_DrawActive
      |                        |                                           trap_R_RenderScene
      |                        |                                           syscall( CG_R_RENDERSCENE, fd )
      |                   RE_RenderScene <--------------------------------------|
      |                        |                                                |
      | <----------------------|                                                |
      |                        |                                                |
      
              
</pre>
<br/>
</p>


<h3>Statistics</h3>
<p id="paperbox">
Here are some stats from cloc:<br/>
<pre class="long">

    -----------------------------------------------------------------------------------------------
                                                 files          blank        comment           code
    -----------------------------------------------------------------------------------------------
    cloc-1.56.exe code common                     559          48630          73501          233952
    cloc-1.56.exe lcc                             116           2270           1513           28067
    cloc-1.56.exe q3asm q3map                      44           4987           5565           22877
    cloc-1.56.exe q3radiant                       206          11870          13113           54922
    -----------------------------------------------------------------------------------------------
    TOTAL                                         919          68293          95509          341994
    -----------------------------------------------------------------------------------------------

</pre>
 <p>
  <br/>
On a pie chart we can vividly see how unusual the proportion are since 30% of the codebase is dedicated to tools: <br/>
 <br/>
 <img class="shadowed" style="margin-left: auto; margin-right: auto; display: block; width: 594px; height: 417px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/quake3_stats.png">
<p>
<br/>
This is explained partly because idtech3 features a ANSI C compiler: The open source <a href="http://en.wikipedia.org/wiki/LCC_(compiler)">Little C Compiler (LCC)</a> is used to generate  bytecode for the virtual machines.

			
</p>
















<br/>
<h3>Memory allocation</h3>
<p id="paperbox">
Two custom allocators at work here:

<ul>
   <li>Zone Allocator: Responsible for runtime,small and short-term memory allocations.</li>
   <li>Hunk Allocator: Responsible for on level load, big and long-term allocations from the pak files (geometry,map, textures, animations).</li>
</ul>
</p>





<br/>
<h3>A Better tomorrow</h3>
<p id="paperbox">
With this code review it seems I ran out of great 3D engine source code to read. But many great things are on the way in the CG world.
I am especially looking forward the Occulus Rift VR kits:</br>
</br>
<img class="shadowed" style="margin-left: auto; margin-right: auto; display: block; width: 600px ; height: 450px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/oculus-rift-john-carmack-e1338406610472.jpg">
</br></br>
<img class="shadowed" style="margin-left: auto; margin-right: auto; display: block; width: 600px ; height: 273px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/oculus-rift.png">
</br></br>
 Building ,coding and <a href="http://www.mtbs3d.com/phpBB/viewtopic.php?f=138&t=14777&p=73924&hilit=ZeniMax#p73924">
understanding the testbed</a> will be a lot of fun. It should arrive in late July so until then: Happy Hacking !
</p>



<h3>Recommended readings</h3>
<p id="paperbox"> 
Masters of Doom for history. <br/>
The two best compiler books to understand fully the Quake Virtual Machines.<br/>
A paper to understand LCC Intermediate Representation<br/>
<br/>
  <a href="http://www.amazon.com/Masters-Doom-Created-Transformed-Culture/dp/0375505245"><img src="../fd_proxy/quake3/mastersofdoom7xl.jpg" style="margin: 0 5px 0 0px; box-shadow: #777 3px 3px 3px;  width:197px; height: 300px;"></a> 
  
    <a href="http://en.wikipedia.org/wiki/Compilers:_Principles,_Techniques,_and_Tools">
    <img style="display: inline;  box-shadow: #777 3px 3px 3px;  width:198px; height: 300px;" src="../lazy_load/grey.gif" data-original="/fd_proxy/doom3/comp.jpeg">
  </a>
  
  <a href="https://sites.google.com/site/lccretargetablecompiler/">
    <img style="display: inline;  margin-left: 20px; box-shadow: #777 3px 3px 3px; width:228px; height: 300px;" src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/c_retargetable_book.png">
  </a>
  
  <a href="../fd_proxy/quake3/building_a_c_based_processor.pdf">
  	 <img style="display: inline;  margin-left: 20px; box-shadow: #777 3px 3px 3px; width:228px; height: 300px;" src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/build_thesis.png">
  </a>

</p>



<h3>Next part</h3>
<p id="paperbox">

<a href="renderer.php">The Rendition Model</a>
</p>

			
	<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

