<script type="text/javascript">
  var disqus_identifier = "quake3" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Quake 3 Source Code Review, id tech3, Quake Live Source Code Review"/>
		<meta name="Description" content="Quake 3 Source Code Review, Quake Live Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Quake 3 Source Code Review: Network Model</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       June 30, 2012</div>
   <h1>Quake 3 Source Code Review: Network Model (Part 3 of 5) <a href="qvm.php">>></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="quake3_icon.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         

The network model of Quake3 is with no doubt the most elegant part of the engine. At the lower level Quake III still abstract communications
with the <a href="../quakeSource/quakeSourceNetWork.php">NetChannel module that first appeared in Quake World</a>.
The most important thing to understand is:<br/><br/>
In a fast paced environment any information that is not received on first transmission is not worth sending again because it will be too old anyway.<br/>
<br/>
As a result the engine relies essentially on UDP/IP: There is no trace of TCP/IP anywhere since the "Reliable transmission" 
aspect introduced intolerable latency. The network stack has been augmented with two mutually exclusive layers:
<ul>
    <li>Encryption using preshared key.</li>
    <li>Compression with pre-computed huffman key.</li>
</ul>
<p>
<br/>
<img style="display: block; width: 533px ; height: 323px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_netstack.png"><br/>
<br/>
But where the design really shine is on the server side where an elegant system minimize the size of each UDP datagram while 
compensating for the unreliablity of UDP:
An history of snapshots generate deltas packets via memory introspection.

<br/>
<div style="clear:both;"></div>



<h3>Architecture</h3>
<p id="paperbox">
The Client side of the network model is fairly simple: Client sends commands to the Server each frame and receive update for the gamestate. The Server side is as bit more complex since it has to propagate the Master gamestate to each Client while accounting for lost UDP packets. This mechanism features three key elements:<br/>
<img style="margin-left: auto; margin-right: auto; display: block; width: 974px ; height: 594px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_network_archi.png"><br/>
<br/>

<ul>
  <li>A <b>Master Gamestate</b> that is the universal true state of things. Clients send theirs commands on the Netchannel. They are transformed in event_t which will modifiy the state of the game when they arrive on the Server.</li>
  <li>For each Client the server keeps the <b>32 last gamestate</b> sent over the network in a cycling array: They are called snapshots. The array cycle with the famous binary mask trick I mentioned in Quake World Network (<a href="../quakeSource/quakeSourceNetWork.php">Some elegant things</a>).</li>
  <li>The server also features <b>a "dummy" gamestate</b> with every single field set to zero. This is used to delta snapshots when there is no "previous state" available.</li>
 </ul>
 <p>
When the server decides to send an update to a client it uses each three elements in order to generate a message that is then carried over the NetChannel.<br/>
<br/>
<u><b>Trivia :</b></u> To keep so many gamestate for each players consumes a lot of memory: 8 MB for 4 players according to my measurements.  
</p>


<h3>Snapshot systems</h3>
<p id="paperbox">
In order to understand the snapshop system, here is an example with the following conditions:
<ul>
    <li>The server is sending update to a Client1.</li>
    <li>The server is attempting to propagate the state of Client2 which has four 4  fields (3 ints position[X], position[Y], position[Z] and one int health).</li>
    <li>Communication are done over UDP/IP: Those messages gets lost quite often on the internet.</li>
</ul>
<br/><br/>
<p>
<u>Server Frame 1:</u><br/>
<br/>
The Server has received a few updates from every client. They have impacted the Master gamestate (in green). It is now time to propagate the state to Client1:
<img style="margin-left: auto; margin-right: auto; display: block; width: 908px ; height: 396px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_network_t1.png"><br/>
<br/>
In order to generate a message the network module will ALWAYS do the following :
<ol>
   <li>Copy the Master gamestate in the next Client history slot.</li>
   <li>Compare it with an other snapshot.</li>
</ol>
<p>
This is what we can see in the next drawing:
<ol>
   <li> Master gamestate is copied at index 0 in Client1 history: It is now called"Snapshot1".</li>
   <li> Since this is the first udpate, there are no valid snapshot in Client1 history so the engine is going to use the "Dummy snapshot" where all fields are always ZEROed. This results in a FULL update since every single field is sent to the NetChannel.</li>
 </ol>
 <p>
<img style="margin-left: auto; margin-right: auto; display: block; width: 908px ; height: 396px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_network_t2.png"><br/>
The key point to understand here is that if no valid snapshots are available in the client history the engine will pick "dummy snapshot" to
 generate a delta message. This will result in a full udpate sent to the Client using 132 bits (each field is <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/qcommon/msg.c#L1200">
preceeded by a bit marker</a>): <code>[1 A_on32bits 1 B_on32bits 1 B_on32bits 1 C_on32bits]</code>.
<br/>
<br/>
<br/>
<u>Server Frame 2:</u><br/>
<br/>
Now let's move forward in time: this is the Server second frame. As we can see each client have sent commands and they have impacted the Master gamestate: Client2 has moved on the Y axis so pos[1] is now equal to E (in blue). Client1 has also sent commands but more important it has also acknowledged receiving the previous udpate so Snapshot1 has been marked as "ACK":
<img style="margin-left: auto; margin-right: auto; display: block; width: 908px ; height: 396px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_network_t3.png"><br/>

The process is the same:<br/>
<ol>
   <li>Copy the Master gamestate in the next Client history slot: (index 1): This is Snapshot2</li>
   <li>This time we have a valid snapshot in the client history (snapshot1). Compare those two snapshots</li>
</ol>
<p>
As result only a partial update (   pos[1] = E ) is sent over the network. This is the beauty of the design: The process is always the same.
<img style="margin-left: auto; margin-right: auto; display: block; width: 908px ; height: 396px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_network_t4.png"><br/>
<u>Note :</u> Since each field is <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/qcommon/msg.c#L1200">
preceeded by a bit marker</a> (1=changed, 0=not changed) the partial update above would uses 36 bits: <code>[0 1 32bitsNewValue 0 0]</code>. 
<br/>
<br/>
<br/>
<br/>
<u>Server Frame 3:</u><br/>
<br/>
Let's move forward one more step in order to see how the system deals with lost packets. This is now Frame 3. Clients have kept on sending commands to the server.
Client2 has lost life and health is now equal to H. But Client1 has not acknowledged the last update. Maybe the Server's UDP got lost, maybe the ACK from the Client
got lost but bottom line is that it cannot be used.

<img style="margin-left: auto; margin-right: auto; display: block; width: 908px ; height: 396px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_network_t5.png"><br/>
<br/>
<br/>
Regardless the process remains the same:
<ol>
   <li>Copy the Master gamestate in the next Client history slot: (index 2): This is Snapshot3</li>
   <li>Compare with the last valid acknowledged snapshot (snapshot1).</li>
</ol>
<p>
<img style="margin-left: auto; margin-right: auto; display: block; width: 908px ; height: 396px; " src="../lazy_load/grey.gif" data-original="/fd_proxy/quake3/q3_network_t6.png"><br/>
<br/>
As a result the message sent it partial and contains a combination of old changes and new changes: (pos[1]=E and health=H). Note that snapshot1 could have been too old to be used. In this case the engine would have used the "dummy snapshot" again, resulting in a full update.<br/>
<br/>
The beauty and elegance of the system resides in its simplicity. The same algorithm automatically:
<ul>
   <li>Generate partial or full update.</li>
   <li>Resend OLD information that were not received and NEW information in a single message.</li>
</ul>
</p>


<h3>Memory introspection with C</h3>
<p id="paperbox">
You may wonder how Quake3 is comparing snapshots with introspection...since C does not have introspection.<br/>
The answer is that each field locations for a <code>netField_t</code> is preconstructed via an array and some clever 
preprocessing directives:<br/>
</br>
<pre class="long">


    typedef struct {
        <span style="color:blue;">char</span>    *name;
        <span style="color:blue;">int</span>     offset;
        <span style="color:blue;">int</span>     bits;
    } netField_t; 

    // using the stringizing operator to save typing...
    #define	NETF(x) #x,(<span style="color:blue;">int</span>)&((entityState_t*)0)->x

    netField_t	entityStateFields[] = 
    {
    { NETF(pos.trTime), <span style="color:blue;">32</span> },
    { NETF(pos.trBase[0]), <span style="color:blue;">0</span> },
    { NETF(pos.trBase[1]), <span style="color:blue;">0</span> },
    ...
    }

</pre>
<p>
The full code of this part can be found in <a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/qcommon/msg.c">snapshot.c</a>'s 
<code>MSG_WriteDeltaEntity</code>. Quake3 does not even know what it is comparing: It just blindly follow <code>entityStateFields</code>'s index,offset and size...and
sends the difference over the network.

<br/>
<br/>
</p>





<h3>Pre-fragmentation</h3>
<p id="paperbox">
Digging into the code we see that the NetChannel module slices messages in chunks of 1400 bytes (<a href="https://github.com/id-Software/Quake-III-Arena/blob/master/code/qcommon/net_chan.c">
<code>Netchan_Transmit</code></a>), even though the maximum size of an UDP datagram is 65507 bytes. Doing so the engine avoid having its packets
fragmented by routers while traveling over the internet since most network MTU are 1500 bytes. Avoiding router fragmentation is very important since:<br/>
<ul>
   <li>Upon entering the network the router must block the packet while it is fragmenting it.</li>
   <li>Upon leaving the network problems are even worse since every part of the datagram have to be waited on and then time-costly re-assembled.</li>
</ul>
<p>
</p>









<h3>Reliable and Unreliable messages</h3>
<p id="paperbox">
If the snapshot system compensate for UDP datagrams lost over the network,  some messages and commands must be GUARANTEED to be delivered (when
a player quits or when the Server needs the Client to load a new level).<br/>
<br/>
	This guarantee is abstracted by the NetChannel: I wrote about it <a href="../quakeSource/quakeSourceNetWork.php">a few years ago</a> (wow my drawings have come a long way !!).
<br/>
</p>  






<h3>Recommended readings</h3>
<p id="paperbox">
Brian Hooks a member of the developing team <a href="The&#32;Quake3&#32;Networking&#32;Mode.html">wrote a little bit about the Network Model</a>.<br/>
<br/>
The author of Unlagged: Neil "haste" Toronto also <a href="http://www.ra.is/unlagged/network.html#Q3NP">described it</a>.
</p>







<h3>Next part</h3>
<p id="paperbox">

<a href="qvm.php">The Virtual Machine system</a>
</p>

			
	<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

