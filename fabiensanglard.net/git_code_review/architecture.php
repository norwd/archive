<script type="text/javascript">
  var disqus_identifier = "git_code_review";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Git Source Code Review"/>
		<meta name="Description" content="Git Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
	
 	
		
		<title>Git Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       March 30th, 2014</div>
   <h1>Git Source Code Review: Architecture</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="git_blue_print.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
        <!-- Add fancyBox -->
  <link rel="stylesheet" href="../fancybox/source/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
  <script type="text/javascript" src="../fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>

    <style>

 .comment{color: rgb(66,135,65);}
 .keyword{color: rgb(182,16,162);}
 .literal{color: rgb(218,37,36);}

 .include{color: rgb(117,85,119);}

 .numbers{color: rgb(96,0,205);}

</style>
Git has an unusual code structure that provides flexibility to developers (use of C/shell script and in theory any language they want) 
and users for calling conventions.<br/>
<br/>
<a href="index.php">Part 1: Overview</a><br/>
<a href="history.php">Part 2: Genesis</a></br>
<a href="architecture.php">Part 3: Architecture</a></br>
<a href="diff.php">Part 4: Algorithms for DIFF</a></br>
<br/>
    
<br/>
    <div style="clear:both;"></div>
</p>




<h2>Git Architecture</h2>
<p>
  As seen in the <a href="history.php">history</a> page, git commands can be either C or shell script (in theory new commands 
  can be added in any language). On top of that they can be called with two different syntax from the command line :
  <ul>
    <li>Using the git executable : <code class="git">git add newfile</code>.</li>
    <li>Using the command directly with the dashed syntax : <code class="git">git-add newfile</code>.</li>
  </ul>
  <p>
   How does this translate in terms of code ? 
      <ul>
        <li>Shell script is authored as usual but C commands must all have the same entry point within a translation unit.</li>
        <li>C implemented commands are compiled once but linked twice: Once to be included in git executable and once to be included in their own executable.</li>
        <li>git executable acts as a dispatch  for builtin commands but also as a launcher for shell scripts via <code>fork</code>/<code>exec</code>.</li>
        <li>Shell scripts with <code>.sh</code> extension are copied, marked as executable and renamed without extension to behave like binary executable.</li>
      </ul>
    <p>
      Here is a drawing showing how code pieces of code are compiled and how they interact together:<br/>
  <img src="git_architecture.png" style="display:block; margin-left:auto; margin-right:auto;margin-top:10px;"/><br/>
  <br/>

  </p>


  <h2>The dispatcher</h2>
  <p>
    Since the git executable is the most used part in the community, I spent more timelooking how this part worked. It behaves as follow :
     <ol>
      <li>Search if the command is builtin: <code>git.c</code> features an array <code>commands [ ]</code> with function pointers to all builtin entry points. Lookup is done with a simple linear search: Binary search/ Hashtable are not worth it for 100 items.</li>
       <li>If found, branch to the command and then return.</li> 
       <li>If not found, look for the command as external dashed shell script.</li>
       <li>If found, <code>fork</code>, <code>exec</code> and return.</li>
       <li>If still nothing found, try to find a suggestion and present it to user.</li>
     </ol>
     <p>
      Here is the flatened code :
   <pre>


   <span style="color:blue;">int</span> main(int argc, char **av){
  
      handle_options();

      setup_path();

      <span style="color:blue;">while</span>(1){


         run_argv(&argc, &argv){

            <span style="color:green;">/* See if it's a builtin */</span>
            handle_builtin(*argcp, *argv);
               run_builtin(struct cmd_struct *p, int argc,...)
                  status = p->fn(argc, argv, prefix);     <span style="color:green;">/* Just branch to the command function pointer */</span>

            <span style="color:green;">/* .. then try the external ones */</span>
            execv_dashed_external(*argv);
               run_command_v_opt
                  prepare_run_command_v_opt
                     run_command
                        start_command
                           fork                   <span style="color:green;">// 1. fork</span>
                           execv_shell_cmd
                              sane_execvp
                                 execvp           <span style="color:green;">// 2. exec</span>
                        finish_command
         }

         <span style="color:blue;">if</span> (errno != ENOENT)
            break;

         help_unknown_cmd(cmd);     <span style="color:green;">// Could not find the command: maybe a typo ? Let's find a suggestion. </span>

      }

      <span style="color:blue;">return</span> 1;

   }



    </pre>
  </p>


  <h2>Command Structure</h2>
<p>
  Each command must have an entry point with the following signature: <code>int cmd_foo(int argc, const char **argv, const char *prefix)</code>. Commands uses common API and modules as much as possible but also pointers to local functions in order to obtain specific behavior.<Br/>
  <Br/>
  <b><u>Example :</u></b> git-add is contained in translation unit <code>builtin/add.c</code>. It uses common code (<code>parse_options</code> from <code>parse-options.c</code>) to transform commands parameters flags into lexemes but the parsing behavior is defined with local function pointers (<code>builtin_add_options</code> and <code>builtin_add_usage</code> from <code>builtin/add.c</code>) :<br/>
  <br/>
  <pre>


    <span style="color:blue;">int</span> cmd_add(<span style="color:blue;">int</span> argc, <span style="color:blue;">const char</span> **argv, <span style="color:blue;">const char</span> *prefix)
    {

        <span style="color:green;">// the ADD command used the common function <code>parse_options</code> to parse the options...</span>
        <span style="color:green;">// but pass the function pointers <code>builtin_add_options</code> and <code>builtin_add_usage</code> to define a specific behavior.</span>

        argc = parse_options(argc, argv, prefix,builtin_add_options,builtin_add_usage, PARSE_OPT_KEEP_ARGV0);



        <span style="color:green;">// Global variables (but local to the translation unit) have been populated.</span>

        <span style="color:blue;">if</span> (patch_interactive)  ...
               
        <span style="color:blue;">if</span> (add_interactive) ...
               
        <span style="color:blue;">if</span> (edit_interactive) ...
               

        write_cache(newfd, active_cache, active_nr) ;
    }


  </pre>  
  <p>
    <div style="clear:both;"></div>
<p>

 The idea is better presented with a drawing :<br/>
<br/>
  <img src="command_struct.png" style="display:block; margin-left:auto; margin-right:auto;"/><br/>
  
</p>

<h2>Commands inter-communications</h2>
<p>
  Builtin commands call each others by building only the parameters string and then calling the builtin C method: See <a href="https://github.com/git/git/blob/db699a8a1f2c8063620efae41e66786c11a31d8f/builtin/merge.c#L1112">how</a> <code>git-merge</code> calls <code>git-reset --merge</code>:
  <pre>

    <span style="color:blue;">int</span> cmd_merge(<span style="color:blue;">int</span> argc, <span style="color:blue;">const char</span> **argv, <span style="color:blue;">const char</span> *prefix)
    {

        [..]

        <span style="color:blue;">const</span> <span style="color:blue;">char</span> *nargv[] = {<span style="color:red;">"reset"</span>, <span style="color:red;">"--merge"</span>, NULL};

        <span style="color:green;">/* Invoke 'git reset --merge' */</span>
        ret = cmd_reset(nargc, nargv, prefix);

    }


 </pre>
 <p>
    Alternatively a builtin command can use the Command API (from <code>run-command.c</code>) which will do a <code>fork</code>/<code>exec</code>.
    <br/>
    <br/>
  External shell script commands just call other command by building the full string (command+parameteres). Here is an <a href="https://github.com/git/git/blob/master/git-pull.sh#L19">example</a> where <code> git-pull.sh</code> calls <code>git-diff-index</code>.
  <div style="clear:both;"></div>
</p>






<!--
 <h2>Recommended readings</h2>
<p>
   If you enjoy reading the code of git, you may also enjoy looking at <a href="http://mercurial.selenic.com/">Mercurial</a> SCM. It is written in Python, share many ideas and concepts with git and interestingly both projects were started around the same time.<br/>
   <br/>
   And to finish, here are two good online books :
   <ul>
      <li><a href="https://github.com/pluralsight/git-internals-pdf/releases">Git Internals</a></li>
      <li><a href="http://git-scm.com/book/en/Git-Internals">Pro Git </a></li>
  </ul>
</p>
-->

<h2>Next</h2>
<p>
    <a href="diff.php">Git algorithm: diff</a>.
  </p>


  <!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

