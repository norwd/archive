<script type="text/javascript">
  var disqus_identifier = "git_code_review";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Git Source Code Review"/>
		<meta name="Description" content="Git Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
	
 	
		
		<title>Git Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       April 1st, 2014</div>
   <h1>Git Source Code Review: Diff Algorithms</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="git_blue_print.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
        <!-- Add fancyBox -->
  <link rel="stylesheet" href="../fancybox/source/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
  <script type="text/javascript" src="../fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>

    <style>

 .comment{color: rgb(66,135,65);}
 .keyword{color: rgb(182,16,162);}
 .literal{color: rgb(218,37,36);}

 .include{color: rgb(117,85,119);}

 .numbers{color: rgb(96,0,205);}

</style>
To find the differences between two "things" is a difficult task that Git has to perform very often:
<ul>
   <li>Find the differences between two binaries files in order to generate a delta.</li>
   <li>Find the differences between two text files in order to merge properly.</li>
   <li>Find the differences between two text files in order to display it.</li>
   <li>Find the differences between two commands in order to find typos.</li>
</ul>
<p>
Here is a summary of all the algorithms used with an associated genesis.<br/>
<br/>
<a href="index.php">Part 1: Overview</a><br/>
<a href="history.php">Part 2: Genesis</a></br>
<a href="architecture.php">Part 3: Architecture</a></br>
<a href="diff.php">Part 4: Algorithms for DIFF</a></br>
<br/>
    
<br/>
    <div style="clear:both;"></div>
</p>




<h2>Diff on text</h2>
<p>
 Find the difference between text files is something Git has to do the most commonly :
  <ul>
    <li>Look at the difference between index and working directory: <code class="git">git diff file.txt</code>.</li>
    <li>Compare the change between two commits: <code class="git">git diff commitBefore commitAfter</code></li>
    <li>Generate a patch : <code class="git">git format-patch master --stdout > mypatch.patch</code>.</li>
  </ul>
  <p>
   The <a href="https://github.com/git/git/blob/e83c5163316f89bfbde7d9ab23ca2e25604af290/show-diff.c#L39">first implementation</a> simply leveraged the system <code>diff</code> executable via a call to <code>popen</code> in <code>show-diff.c</code>.
    <code>diff</code> is a very
  famous and ubiquitous tool in the Linux world originally developed in the early 1970 for Unix. Its first version used <a href="http://en.wikipedia.org/wiki/Hunt%E2%80%93McIlroy_algorithm">Huntâ€“McIlroy algorithm</a>. The core algorithm was later notoriously improved thanks to the work of <A href="http://en.wikipedia.org/wiki/Eugene_Myers">Eugene W. Myers</a> and <a href="http://en.wikipedia.org/wiki/Webb_Miller">Webb Miller</a>, work extensively document in the papers:
   <A href="http://www.xmailserver.org/diff2.pdf">An O(ND) Difference Algorithm and its Variations</a> by Eugene W. Myers and  
   <a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.189.70&rep=rep1&type=pdf">A File Comparison Program</a> by Webb Miller and Myers.<br/>
   <br/>
   The two most important metrics for diff operations are:
   <ol>
     <li>Speed</li>
     <li>Quality</li>
   </ol>
   <p>
     <u>Effort on Speed :</u><br/>
     <p>
    System diff not only consumed a <code>fork</code>/<code>exec</code>, it 
    also required a lot of useless access disks because of temporary data. A builtin diff module was needed and implemented in <a href="https://github.com/git/git/commit/3443546f6ef57fe28ea5cca232df8e400bfc3883">March 2006 patch</a> which introduced the <code>xdiff</code> folder containing a simplified version of <a href="http://www.xmailserver.org/xdiff-lib.html">libxdiff</a>:
<style>
    .comment{
      display:block; width:70%; 
          margin-left: auto;
          margin-right:auto;

    background: #e6f1f6;
    border: 1px solid #c5d5dd;
    border-radius: 4px;

    text-shadow: none;


color: #333333;

font: 13px Helvetica, arial, freesans, clean, sans-serif;
line-height: 1.4;
padding: 20px;
text-align:left;
    }
</style>
    <div class="comment">
    <b>Use a *real* built-in diff generator</b><br/>
    <br/>
     This uses a simplified libxdiff setup to generate unified diffs _without_
doing  fork/execve of GNU "diff". HUGE performance improvement and no disk access.
</div>


<p>
  Since libxdiff used Eugene W. Myers's algorithm, the diff strategy was called <code>myers</code>. To this day it is still the 
default way git perform all diffs on text. <br/>
   <br/>
    <u>Effort on Quality :</u><br/>
    <p>
    If speed is an easy metric to understand and benchmark, quality is subjective and not intuitive. Take for example two versions of a file where a developer simply added a method <code>functhreehalves</code> in the middle. There are two way to reconstruct the change but one is of much higher quality because it clearly shows what was added where the other seems to indicate something was modified.<br/>
    <br/>
    <table border="0" style="width:100%;">
      <tr>
        <td>
   <pre style=""> 

   
   $diff -y file2 file1
   void func1() {            void func1() {
     x += 1                     x += 1
   }                         }
<span style="color:green;" >
                           > void functhreehalves() {
                           >   x += 1.5
                           > }
                           > </span>
   void func2() {            void func2() {
     x += 2                    x += 2
   }                         }


   </pre>
 </td>
 <td>


   <pre style=""> 

   
   $diff -y file2 file1
   void func1() {            void func1() {
     x += 1                     x += 1
   }<span style="color:green;" >                       > }
                           >
                           > void functhreehalves() {
                           >   x += 1.5
                            </span> }
                           
   void func2() {            void func2() {
     x += 2                    x += 2
   }                         }


   </pre>
 </td>
</tr>
</table>
   <p>
    The discussion started in <a href="http://marc.info/?l=git&m=123082787502576&w=2">[PATCH 0/3] Teach Git about
     the patience diff algorithm</a> where quality between git's myers and bazar's patience were compared. 
     Since patience algorithm seemed to provide a better quality on specific input it was shortly added in a 
     <A href="https://github.com/git/git/commit/92b7de93fb7801570ddc3195f03f30b9c201a3bd">patch</a> 
      that modified further <code>xdiff</code> :
    <div class="comment">
<b>Implement the patience diff algorithm</b><br/>
<br/>
The patience diff algorithm produces slightly more intuitive output
than the classic Myers algorithm, as it does not try to minimize the
number of +/- lines first, but tries to preserve the lines that are
unique.

    </div>
    <p>
    You can find more documentation on patience algorithm from the author himself Bram Cohen (yes, the guy who also invented Bittorrent):
    <a href="http://bramcohen.livejournal.com/73318.html">Patience Diff Advantages</a> and <a href="http://alfedenzo.livejournal.com/170301.html">Patience Diff, a brief summary</a>.<br/>
    <br/>
    Further work was done by people from <a href="http://www.eclipse.org/jgit/">jgit project</a> (which is a Java/Eclipse based). Their histogram based technique was supposed to be faster than <code>myers</code> while still based on based on Cohen's four rules found in <code>patience</code> (best of both world). A <a href="https://github.com/git/git/commit/8c912eea94a2138e8bc608f7c390eb0b313effb0">patch</a> was eventually submitted: 

<div class="comment">

<b>teach --histogram to diff</b><br/>
<br/>
Port JGit's HistogramDiff algorithm over to C. Rough numbers (TODO) show
that it is faster than its --patience cousin, as well as the default
Meyers algorithm.

</div>
    <br/>
<u>Note :</u> So which diff strategy should be used? I personally have always used the default 
(<code>myers</code>). <code>histogram</code> and <code>patience</code> seem to provide better 
output on specific case but they are so marginal and poorly documented that it is impossible to 
know when they will be good withiout trial/errors. If non-obsolete test cases could be provided 
users could probably make educated decisions.
    <br/>
    <br/>
<u>Note :</u> There is a fourth diff strategy called <code>minimal</code> which is actually an extended version of myers: 
If no minimal diff is requested the myers algo <a href="https://github.com/git/git/blob/master/xdiff/xdiffi.c#L153">simply returns</a>. 
But if minimal is requested, the algorithm will iterate until a certain amount of CPU time has been consumed and keep 
the "best" diff. Best being the smallest diff. <code>Minimal</code>was always part of xlibdiff and came with the first "speed" patch mentioned earlier.<br/>
   <br/>

<u>Trivia :</u> This need for speed also triggered the creation of a <a href="http://marc.info/?l=git&m=133103975225142">performance testing framework</a> for diff strategies.<br/>
  <br/>

<u>Trivia :</u> diff is such an important feature that git developer even allow user to use their own external custom engine via the 
<code>GIT_EXTERNAL_DIFF</code> variable (<a href="http://stackoverflow.com/questions/12590947/using-git-diff-to-detect-code-movement-how-to-use-diff-options">Using Git diff to detect code movement</a>).
   <br/>
   <br/>
   To finish on text diff, and example of trace trace execution that I found useful:<br/>
   <br/>
   <pre>

   main                  (git.c)
   cmd_diff              (builtin/diff.c)
   builtin_diff_files    (builtin/pack-objects.c)   
   run_diff_files        (diff-lib.c)
   xdi_diff_outf         (xdiff-interface.c)
   xdi_diff              (xdiff-interface.c)
   xdl_diff              (xdiff/xdiffi.c)
   xdl_do_diff           (xdiff/xdiffi.c)
        xdl_do_patience_diff
        xdl_do_histogram_diff
        meyes
        meyes mininmal
  </pre>
</p>


<h2>Diff on binaries (deltas)</h2>
<p>
  The initial architecture of Git was: one text file => one sha1 => one deflated blob. 
  The only drawback was HD storage consumption but "disk is cheap" was a fair approach 
  and things worked well this way for a while. But big repositories suffered when being 
  cloned across a network and all those blobs required a lot of disk access.<br/> 
  <br/> 
  
  The topic <a href="http://www.gelato.unsw.edu.au/archives/git/0505/2821.html">
  RFC: adding xdelta compression to git</a> raised those issues and in the end it was decided
   that storage was cheap but bandwidth and I/O were not. The <A href="http://xdelta.org/">xdelta lib</a> was briefly
   considered but a customized version of xlibdiff was favored and 
   <a href="https://github.com/git/git/commit/a310d4349467d78266f38d29e500c77b96ee5bef">added to xdiff</a>.

<div class="comment">
  <b>[PATCH] Deltification library work by Nicolas Pitre.</b><br/>
  <br/>
This patch adds the basic library functions to create and replay delta
information.  Also included is a test-delta utility to validate the
code.
</div>

<p>
  Since binary files miss the CR character used to build atomic units in text algorithm (lines), different heuristic can be used in
  order to cut the stream. Set length of 48 bytes is an approach but git used <a href="http://en.wikipedia.org/wiki/Adler-32">adler32</a> 
  before being replaced later with Rabin's <a href="http://www.xmailserver.org/rabin.pdf">Fingerprinting by random polynomials</a>
  in an other <a href="https://github.com/git/git/commit/3dc5a9e4cdcc7124c665a050547d1285d86a421f">patch</a>:<br/>

</p>
  <div class="comment">
<b>replace adler32 with Rabin's polynomial in diff-delta</b><br/>
<br/>
  This brings another small repacking speedup for sensibly the same pack
size.  On the Linux kernel repo, git-repack -a -f is 3.7% faster for a
0.4% larger pack.
</div>
  <br/>
  <p>
    Rabin's finger print technique was a big improvement since the sliding window allowed to detect short addition at the beginning of a zip
    and keep deltas tiny.<br/>
    <br/>
  To finish with binary diff, here is the execution path of pack creation :
  <pre>

   main                  (git.c)
   cmd_pack_objects      (builtin/pack-objects.c)
   prepare_pack          (builtin/pack-objects.c)
   ll_find_deltas        (builtin/pack-objects.c)
   threaded_find_deltas  (builtin/pack-objects.c)
   find_deltas           (builtin/pack-objects.c)
   try_delta             (builtin/pack-objects.c)
   create_delta          (diff-delta.c) 
  </pre>
  <p>
<br/>

   
</p>

<!--
<h2>Git merge diff</h2>
<p>
  DEFAULT_TWOHEAD
  DEFAULT_OCTOPUS

  Why do you need to find the merge base ? Why not just merge the two last commits ? Is it better to replay all the commit
  diffs ?

  resolve
  recursive (single head)
      ours
      theirs
      patience|
      minimal|
      histogram|
      myers
  octopus
  ours
  subtree
  What ?

  cmd_merge

</p>
-->

<h2>Diff on command-line</h2>
<p>
  git sometimes is not interested by the exact difference but rather by the distance between two strings. 
  In 2008 was <a href="https://github.com/git/git/commit/8af84dadb142f7321ff0ce8690385e99da8ede2f">introduced</a> a "suggestion" feature : 

<div class="comment">
  <b>git wrapper: DWIM mistyped commands</b><br/>
This patch introduces a modified Damerau-Levenshtein algorithm into
Git's code base, and uses it with the following penalties to show some
similar commands when an unknown command was encountered
</div>
<p>
  That is how the dispatcher seen in the <a href="architecture.php">architecture</a> part is able to provide suggestions when a typo is suspected :
    <pre>


    $git adt test.txt
    git: 'adt' is not a git command. See 'git --help'.

    Did you mean this?
      add

    </pre>  
    <p>
      Word suggestion are generated by calculating an edit distance for each 
      <a href="https://github.com/git/git/blob/afc711b8e1ee89626f0dddf0ef01fb73168d47ca/git.c#L335">known builtin 
        command</a> using <a href="https://github.com/fabiensanglard/git/blob/master/levenshtein.c">levenshtein distance</a>
        . Found in <a href="https://github.com/git/git/blob/afc711b8e1ee89626f0dddf0ef01fb73168d47ca/levenshtein.c">levenshtein.c</a> 
      , it is a nice example of dynamic programming.
</p>

<!--
 <h2>Recommended readings</h2>
<p>
   If you enjoy reading the code of git, you may also enjoy looking at <a href="http://mercurial.selenic.com/">Mercurial</a> SCM. It is written in Python, share many ideas and concepts with git and interestingly both projects were started around the same time.<br/>
   <br/>
   And to finish, here are two good online books :
   <ul>
      <li><a href="https://github.com/pluralsight/git-internals-pdf/releases">Git Internals</a></li>
      <li><a href="http://git-scm.com/book/en/Git-Internals">Pro Git </a></li>
  </ul>
</p>
-->


<h2>diffcore, xdiff, xdelta ... what ?</h2>
<p>
    Just to summarize (because I was confused when I started) :
    <ul>
      <li>xdelta: A binary diff library which was considered but NOT used in Git.</li>
      <li>xdiff: The text diff module of git. Originally based on <code>libxdiff</code>  but<a href="http://git.661346.n2.nabble.com/diff-ing-files-td6446460.html">the current code in Git doesn't bear any resemblance with the libxdiff code at all. However the basic algorithm behind both implementations is the same.</a>.
        <li>diffcore: A module of git that transforms the diff format after it has been generated.</li>
    </ul>
</p>


<h2>Next</h2>
<p>
    To be published: Git internal algorithms for graphs and  merge operation.
  </p>


  <!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

