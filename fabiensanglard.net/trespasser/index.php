<script type="text/javascript">
  var disqus_identifier = "trespasser_code_review";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Jurassic Park: Trespasser CG Source Code Review"/>
		<meta name="Description" content="Jurassic Park: Trespasser CG Source Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
	
 	
		
		<title>Jurassic Park: Trespasser CG Source Code Review</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       June 10th, 2014</div>
   <h1>Jurassic Park: Trespasser CG Source Code Review</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="trespasser.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
        <!-- Add fancyBox -->
  <link rel="stylesheet" href="../fancybox/source/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
  <script type="text/javascript" src="../fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>

    <style>

 .comment{color: rgb(66,135,65);}
 .keyword{color: rgb(182,16,162);}
 .literal{color: rgb(218,37,36);}

 .include{color: rgb(117,85,119);}

 .numbers{color: rgb(96,0,205);}
  <link rel="stylesheet" href="../fancybox/source/jquery.fancybox.css?v=2.1.5" type="text/css" media="screen" />
  <script type="text/javascript" src="../fancybox/source/jquery.fancybox.pack.js?v=2.1.5"></script>

</style>
<p>
<a href="http://en.wikipedia.org/wiki/Jurassic_Park:_Trespasser">Jurassic Park: Trespasser</a> is an unique piece of software: It is a game that has managed 
to reach both infamous and cult status.<br/>
<br/>
Released in October 1998 after a three years development cycle, it was <a href="http://web.archive.org/web/20070624090605/http://www.computerandvideogames.com/article.php?id=8366">unanimously</a> <a href="http://www.gamespot.com/reviews/trespasser-review/1900-2535286/"
>destroyed</a> <a href="http://www.hardcoregaming101.net/trespasser/trespasser.htm">by</a> <a href="http://ca.ign.com/articles/1998/10/31/trespasser">critics</a>. But it did not fail by much and managed to grow an impressive <a href="http://www.trescom.org/about-us/">mass of fans</a>
that wrote <a href="http://tresed.trescom.org/">editors</a>, released patches, <a href="http://www.trescom.org/files/docs/formats.html">reverse-engineered
the assets</a>, added features, produced <a href="http://www.bytehazard.com/trespasser/tpdc/">new dinosaurs</a>, levels and even started a <a href="https://www.flickr.com/photos/trespassingpetrolia/13367830085/">remake</a>. 20 years later, <a href="http://blog.codinghorror.com/trespasser-postmortem/">bloggers still write about it</a> and the <a href="http://www.gamasutra.com/view/feature/131746/postmortem_dreamworks_.php?print=1">post-mortem by Richard Wyckoff</a> is one of the most fascinating behind-the-scene
 tale I have ever read.<br/>
<br/>
From a technology standing point, Trespasser engine is a milestone in the history of realtime CG: It demonstrated that physics and outdoor environments were indeed possible.<br/>
<br/>
 During my exploration, I found a special flavor of C++ that was representative of the game final result: Genius and Talent ultimately
 impaired by ambition and it's resulting complexity.<br/>
<div style="clear:both;"/>
</p>



<h2>Moon shot and high expectations</h2>
<p>
    Jurassic Park: Trespasser  was a moon shot. An attempt to make the impossible become reality powered by a lot of money and insanely talented developers/artists.
    But it happened during the late 90s which saw widespread adoption of Internet: Online magazine florished, developers were getting interviews, news and rumors circulated fast and high expectations resulted from customers (a phenomenon later exhacerbated during the development of <a href="http://en.wikipedia.org/wiki/Daikatana">Daikatana</a>).<br/>
    <br/>
    The trailer demonstrated unprecedented interactivity and graphisms :<br/>
    <br/>
    <iframe style="display:block;margin-left:auto;margin-right:auto;" width="640" height="480" src="https://www.youtube.com/embed/NxEUmNRfFZ0" frameborder="0" allowfullscreen></iframe>
    <br/>
    CD-Rom were also becoming common. Embedded in magazines they often contained videos and interview of developers. Here are
    Seamus Blackley (Lead Programmer) and Terry Izumi (Art Director) talking for Next Generation :<br/>
    <br/>
    <iframe style="margin-left:auto;margin-right:auto;box-shadow: rgb(119, 119, 119) 3px 3px 3px;" width="420" height="315" src="https://www.youtube.com/embed/KDOLYuxRU3I" frameborder="0" allowfullscreen></iframe>
    <iframe style="margin-left:auto;margin-right:auto;box-shadow: rgb(119, 119, 119) 3px 3px 3px;" width="420" height="315" src="https://www.youtube.com/embed/SPf3mrNEoFo" frameborder="0" allowfullscreen></iframe>
    <br/>
    <iframe style="margin-left:auto;margin-right:auto;box-shadow: rgb(119, 119, 119) 3px 3px 3px;" width="420" height="315" src="https://www.youtube.com/embed/HZ72f30uDtQ" frameborder="0" allowfullscreen></iframe>
    <iframe style="margin-left:auto;margin-right:auto;box-shadow: rgb(119, 119, 119) 3px 3px 3px;" width="420" height="315" src="https://www.youtube.com/embed/l38h4UP0wYc" frameborder="0" allowfullscreen></iframe>
    <br/>
    <br/>
    Many impressive "screenshot" were exchanged on the internet :<br/>
<br/>

<a class="preview" href="previews/preview.jpg">
  <img src="previews/preview_thumb.png" alt=""/>
</a>
<a class="preview" href="previews/preview2.jpg">
  <img src="previews/preview2_thumb.png" alt=""/>
</a>
<a class="preview" href="previews/preview3.jpg">
  <img src="previews/preview3_thumb.png" alt=""/>
</a><br/>
<a class="preview" href="previews/preview4.jpg">
  <img src="previews/preview4_thumb.png" alt=""/>
</a>
<a class="preview" href="previews/preview5.jpg">
  <img src="previews/preview5_thumb.png" alt=""/>
</a>
<a class="preview" href="previews/preview6.jpg">
  <img src="previews/preview6_thumb.png" alt=""/>
</a>


 <script type="text/javascript">
$(".preview")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });

 </script>


  

       <br/>
   <br/>
    Even the game box was quite appealing:<br/>

     <a id="trespasser_box_back1" href="box/trespasser_box_back1.jpg" >
  <img src="box/trespasser_box_back1_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <a id="trespasser_box_back2" href="box/trespasser_box_back2.jpg" >
  <img src="box/trespasser_box_back2_thumb.png" style=" margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
<br/><br/>
 <script type="text/javascript">
  $(document).ready(function() {
     
       $("#trespasser_box_back1").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
       $("#trespasser_box_back2").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
   });
  </script>
 The printed press, usually more reserved was also praising the game:<br/>
<br/>
<u><b>Wired (March, 1997):</b></u><br/>
<br/>
  <a href="http://archive.wired.com/culture/lifestyle/news/1997/03/2379">Jurassic Game Flouts Hyper-Real Physics</a><br/>
   <br/>
 <u><b>Game Master (December, 1998):</b></u><br/>
     <a id="gm1" href="articles/game&#32;master/1.jpg" >
  <img src="articles/game&#32;master/1_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <a id="gm2" href="articles/game&#32;master/2.jpg" >
  <img src="articles/game&#32;master/2_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <br/>
 <script type="text/javascript">
  $(document).ready(function() {
     
       $("#gm1").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });

       $("#gm2").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });

   });
  </script>
<br/>


 <u><b>Next Generation (November, 1997) :</b></u><br/>
 <a id="ma1" href="articles/mg&#32;alpha/1.jpg" >
  <img src="articles/mg&#32;alpha/1_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
<a id="ma2" href="articles/mg&#32;alpha/2.jpg" >
  <img src="articles/mg&#32;alpha/2_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <a id="ma3" href="articles/mg&#32;alpha/3.jpg" >
  <img src="articles/mg&#32;alpha/3_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <a id="ma4" href="articles/mg&#32;alpha/4.jpg" >
  <img src="articles/mg&#32;alpha/4_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <a id="ma5" href="articles/mg&#32;alpha/5.jpg" >
  <img src="articles/mg&#32;alpha/5_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  
<br/><br/>
 <script type="text/javascript">
  $(document).ready(function() {

       $("#ma1").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });

       $("#ma2").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });

       $("#ma3").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
       $("#ma4").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
       $("#ma5").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
   });
  </script>
<br/>
   
  
   
  
 The list of features was crazy :
<ul>
  <li>Bump-mapped dinosaur skin.</li>
  <li>Outdoor environments with hundreds of trees.</li>
  <li>Inverse kinematics (no predetermined animation).</li>
  <li>Realtime shadows.</li>
  <li>Physic engine.</li>
  <li>Physic based sound engine.</li>
  </ul>
  <p>
Gamers were crazy too. But after the dissapointment brilliantly naratted by Research Indicates in "Let's play Trespasser":<br/>
<br/>
<iframe style="display:block;margin-left:auto;margin-right:auto;" width="800" height="600" src="https://www.youtube.com/embed/k6A3SaRr26M?list=PL0058A651EB882B48" 

   frameborder="0" allowfullscreen></iframe>
   <p>
   I decided I wanted to know how it worked.
<p>
  
</p>

<h2>Source Code: First contact</h2>
<p>
   The source code has never been officially released but it is everywhere on the internet. I will obviously not provide a link to the source or even show code snippets
    but I think to provide a roadmap for historical value is acceptable and will probably help fellow code readers.<br/>
    <br/>
   <img src="jp2_pc_visualstudio.png" style="float:left; margin-right:21px;margin-bottom:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;" />
   The solution is for Visual Studio 6.0 (development started on VS 4.1 but C++ support was not satisfactory: The team updated the dev tools as soon as a new version became available). It can be automatically converted to a modern version of Visual Studio (2008/2010/2012). Attempting to compile shows that the source
   code has heavily suffered from erosion: C++ has evolved a lot since 1998 and certain things are not permited anymore (like things that now require the <a href="http://pages.cs.wisc.edu/~driscoll/typename.html">typename keyword</a>).<br/>

  
<br/>
   <br/>
   <br/> Before starting to open files and read, I ran a few metrics since <a href="http://cloc.sourceforge.net/">cloc</a> can give an idea of the volume of code to read:
      <pre style="width:68%; margin-left: 320px;">


    fabiensanglard$ cloc jp2_pc
    1596 text files.
    1555 unique files.                                          
     418 files ignored.

    http://cloc.sourceforge.net v 1.60  T=14.08 s (88.1 files/s, 40859.1 lines/s)
    -------------------------------------------------------------------------------
    Language                     files          blank        comment           code
    -------------------------------------------------------------------------------
    C++                            469          64881          86607         195287
    C/C++ Header                   762          32170          89234         105606
    C                                2            253            177            884
    DOS Batch                        7              5              0            174
    Teamcenter def                   1              0              0              8
    -------------------------------------------------------------------------------
    SUM:                          1241          97309         176018         301959
    -------------------------------------------------------------------------------

      </pre>
<div style="clear:both;"/>
      <p>
      Standing alone, those numbers don't mean much. But comparing them to others games (Quake,Doom,Duke3D,...) helps a lot:<br/>
      <div style="clear:both;"></div>
  <p>
   <pre>

 
    -------------------------------------------------------------------------------
    Game             Year         files         blank         comment          code
    -------------------------------------------------------------------------------
    Wolfenstein3D    1992           80           7223           7516          27311
    Doom             1993          149          10213          10234          39080
    Duke 3D          1996          182          18537          11364          77166
    Quake 1          1996          543          45550          38262         171065
    Quake 2          1997          399          37743          31735         163928 
 <span style="color:red;">   Trespasser       1998         1241          97309         176018         301959 </span>
    Quake 3          1999          799          65988          93977         313311
    Doom  3          2004         1466         137589         164894         593899
    Doom iOS         2009          237          15080          24054          70766
    Wolfenstein iOS  2009          326          20403          20170          63609
    Doom  3 BFG      2012          977          92735         119965         363239
    -------------------------------------------------------------------------------

    </pre>
<p>
   The volume of code is twice more than other titles released at the same time. The volume is very 
   representative of the complexity of the engine and the collosal scope of features. What really stands out is the volume of comment: Trespasser
   code base is exceptionnaly well commented and that is usually an indication of high skills.<br/>
   <br/>
    <style>
    table.archi tr td, th {
    border: 1px solid black;
    }
    table.archi {
    border-collapse: collapse;
    background-color: #FFF;
    }
     tr td{
      margin: 10px;
      padding: 10px;
    }
  </style>
  The solution contains 23 projects which clearly show the different subsystems but I suspect was done to make compile time bearable. Even on a modern machine a full built take close to 10mn. I would not be surprised if 1998 and its lack of precompiled header took an hour for a full build.<br/>
  <br/>
  An <a href="http://www.trescom.org/interviews/seamus-blackley-interview/">interview of Seamus Blackley</a> (Lead developer on Trespasser) shows that compile time was a problem back in the days:
  <pre>


   Qtrescom.org    : What fraction of the development time was spent waiting on the C++ compiler?

   Seamus Blackley : It felt like 103%

  </pre>
  <p>
  <br/>
  Details of each projects :<br/>
  <br/>
   <table  class="archi" border=1 width="100%">
<tr><td>Projects</td><td>       Generates</td><td>               Notes:</td></tr>
<tr><td>AI</td><td>Artificial Intelligence subsystem</td><td>A lot of code unused since most traits had to be disabled.</td></tr>
<tr><td>AI Test</td><td>          JP2_PC.exe</td><td>            A standalone program allowing to test AI with graphics.</td></tr>
<tr><td>Audio</td><td>            Audio.lib</td><td>             The audio sub-system static library featuring the "real time Foley".</td></tr>
<tr><td>Bug</td><td>              Bugs.exe</td><td>              A project concentrating all compiler errors. Since the team switched from VS4 to VS4.1 to VS4.2 to VS6.0 it was usefull</td></tr>
<tr><td>CollisionEditor</td><td>  CollisionEditor.exe</td><td>   Sound effects editor to test the audio engine (very powerful at the time)</td></tr>
<tr><td>EntityDBase</td><td>      EntityDBase.lib</td><td>       Classes representing all objects in the game.</td></tr>
<tr><td>File</td><td>             File.lib</td><td>Abstraction classes for File and Images, used to build the Groff archives.</td></tr>
<tr><td>File Test</td><td>      File</td><td> Test for the file and image abstractions.</td></tr>
<tr><td>Game</td><td>             Game.lib</td><td>              Glue, triggers, Player, Gun classes.</td></tr>
<tr><td>GeomDBase</td><td>        GeomDBase.lib</td><td>         The 3D representation (Geometry) of all objects defined in EntityDBase.</td></tr>
<tr><td>GroffBuild</td><td>       GroffBuild.exe</td><td>        The tool in charge of gathering all game assets (3d,sounds,maps) in one GOFF file.</td></tr>
<tr><td>GroffExp</td><td>         GroffExp.dle</td><td>          The DLL loaded by 3DS Max that export all data to GOFF sections. This was originally outsourced to an other dev and is standalone.</td></tr>
<tr><td>GUIApp</td><td>           GUIApp.exe</td><td>            A wrapper around the game. The GUI allows to change the game values at runtime for testing. Like the console allowing to change the cvar in Quake engines.</td></tr>
<tr><td>Loader</td><td>           Loader.lib</td><td>            The library loading GOFF assets to RAM.</td></tr>
<tr><td>Math</td><td>             Math.lib</td><td>              The math library (features a fInvSqrt that is not as good as QuakeIII's InvSqrt since it uses a lookup table but also uses Newton-Raphson).</td></tr>
<tr><td>Math Test</td><td>        MathTest.exe</td><td>A few functions to test the speed of the math routines.          </td></tr>
<tr><td>Physics</td><td>          Physics.lib</td><td>           The pelvis heavy,  penalty force based Physic engine library.</td></tr>
<tr><td>PhysicsTest</td><td>      PhysicsTest.exe</td><td>  A sandbox level where physic can be tested. </td></tr>
<tr><td>PipeLineTest</td><td>     PipeLineTest.exe</td><td>      Testbed for the rendering pipeline</td></tr>
<tr><td>Processor</td><td>        Processor.dll</td><td>         Uses CPUID to detect 8086, 80286, 28386 or a 80486, Pentium,  K6-3and K7, Detect Floating Point Unit and CPU speed. Loaded at runtime by System project in order to set automatically details level (based on CPU Mhz).</td></tr>
<tr><td>QuantizerTool</td><td>    QuantizerTool.exe</td><td>     Aborted project. Does nothing.</td></tr>
<tr><td>Render3D</td><td>         Render3D.lib</td><td>          The hybrid software/Direct3D renderer.</td></tr>
<tr><td>ScreenRenderDWI</td><td>  ScreenRenderDWI.lib</td><td>   Pentium, PentiumPro and K6_3D specific code ASM optimized code for scanline and cache rendering. Direct3D code.</td></tr>
<tr><td>Std</td><td>              Std.lib</td><td>               Extension of STL. An horrible mess of specific containers of containers of set of hashmap. Arg.</td></tr>
<tr><td>System</td><td>           System.lib</td><td>            Contains scheduler, Virtual Memory. Thread control. SetupForSelfModifyingCode (via  modify the page tables associated with the application). Many things are not used.</td></tr>
<tr><td>trespass</td><td>         trespass.exe</td><td>          The game we played.</td></tr>
<tr><td>View</td><td>             View.lib</td><td>              Raster to window code. Blitter, DirectDraw, Direct3D, software palette viewers.</td></tr>
<tr><td>WaveTest</td><td>         WaveTest.exe</td><td>          Shell to test wave modeling.</td></tr>
<tr><td>WinShell</td><td>         WinShell.lib</td><td>          win32 windows creation and management library</td></tr>
   </table>
   <br/>
      <br/>
   The project names and the post-mortem are giving us a good idea of the production pipeline :<br/><br/>
   <img src="trespass_archi.png" style="display:block;margin-left:auto;margin-right:auto;"/><br/>
   <br/>
   <ol>
    <li>Artist and game designer used <code>3D Studio Max</code>.</li>
    <li>When a level was ready, it was exported (<code>GroffExp</code>).</li>
    <li>All assets were compiled into a resource file GROFF (<code>GroffBuild</code>).</li>
    <li>The engine worked on all subsystems and generated the game (<code>trespass</code>).</li>
    <li>Debugging and research was done with a secondary screen displaying <code>GUIAPP</code>, allowing to change the
      engine settings at runtime.</li>
   </ol>
  <p>
    
    
</p>



<h2>Renderer</h2>
<p>
  The 3D Renderer is based on <a href="http://en.wikipedia.org/wiki/Painter's_algorithm">Depth Sorting Algorithm</a> coupled with a quadtree sliced map to help remove as many polygons as possible. There is actually a comment in the code which indicate the implementation is taken straight
  from "pages 673 to 675 in "Computer Graphics: Principles and Practices by Foley, Van Dam et al". Here are the pages (and I highly recommend you to buy the book):<br/>
  <br/>
  <a id="depth_sorting1" href="depth_sorting1.png" >
  <img src="depth_sorting1_thumb.png" style=" margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <a id="depth_sorting2" href="depth_sorting2.png" >
  <img src="depth_sorting2_thumb.png" style=" margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
  <a id="depth_sorting3" href="depth_sorting3.png" >
  <img src="depth_sorting3_thumb.png" style=" margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>

 <script type="text/javascript">
  $(document).ready(function() {
      $("#depth_sorting1").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
       $("#depth_sorting2").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
       $("#depth_sorting3").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
   });
  </script>
  <br/>
  <br/>
  The engine walks the map quadtree recursively, discarding as much geometry (terrain and objects) as
  possible via backface culling and frustum culling. The list of surviving polygon is then sorted 
  by depth and the scene is sent to the rasterizer: Back to front in one batch as illustrated by the wikipedia drawing : <br/>
 <br/>
 <img src="Painter's_algorithm.svg.png" style="display:block; margin-right:auto; margin-left:auto; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
 <br/>
 This method generates a visually correct scene but can potentially lead to overdraw that waste a lot of CPU cycles. A typical worse case scenario would be the player in front of mountains but inside a house :<br/>
<br/>
  The engine would first rasterize all the mountains in the back:<Br/>
  <Br/>
   <a id="inside0" href="inside/occ0.png" >
  <img src="inside/occ0_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
 <script type="text/javascript">
  $(document).ready(function() {
      $("#inside0").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
   });
  </script>
  <br/>  <br/>
  Only to overwrite every single pixel with the front objects such as walls, stairs and crates resulting in a terrible waste :<br/>
  
      <a id="inside2" href="inside/occ2.png" >
  <img src="inside/occ2_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>
 <script type="text/javascript">
  $(document).ready(function() {
      $("#inside2").fancybox({
            helpers: {
                title : {
                    type : 'float'
                }
            }
        });
   });
  </script>
 <br/>
 

  <br/>
Even though the rasterizer was fast hand optimized ASM (even exploiting floating point SIMD from AMD processor K6), something had to be done in order to limit overdraw.
The developers asked the 3DS Max designer to place "occluders" on the map : Invisible surfaces that were used to create occluding volumes. Here they are in gray on the right image: <br/>
<a class="house" href="house_occluders/LOST.png" >
  <img src="house_occluders/LOST_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>


    <a class="house" href="house_occluders/LOST1.png" >
  <img src="house_occluders/LOST1_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>

 <script type="text/javascript">
$(".house")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });

 </script>
<br/>
<br/>
 Those occluders were used to construct occluding volume and discard more primitives during the quadtree rundown. Each frame the quadtree was used to find all the occluders
 intersecting the view frustum. By connecting the player's point of view through each occluder vertice, an occluding volume was created.
 Each primitive retrieved via the quadtree was hence tested not only against the view frustum but also against each occluding volume. This is a technique that reminded me a lot of shadow volumes.<br/>
<br/>
 This technique was instrumental when the player was inside a building but it also to important to limit overdraw in pure outdoor scenes. Items behind a hill could be discarded this way so occluders are also placed within hills and terrain curves :<br/>
 <br/>
<a class="crag" href="occ_mountain/occ_mountain.png" >
  <img src="occ_mountain/occ_mountain_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>


    <a class="crag" href="occ_mountain/occ_mountain2.png" >
  <img src="occ_mountain/occ_mountain2_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
  </a>

 <script type="text/javascript">
$(".crag")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });

 </script>
<Br/>
 <br/>
This mechanism worked well but it could be problem if the designers placed them poorly. In the following scene, at first sight things looks fine but if we look
 closer we can see that occluder are "sticking out": Crossing that part would result in objects suddenly appearing:<br/>
<br/>
<a class="occproblem1" href="occ_problem/mountainOccluders.png" >
  <img src="occ_problem/mountainOccluders_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
</a>
<a class="occproblem1" href="occ_problem/mountainOccludersVisible.png" >
  <img src="occ_problem/mountainOccludersVisible_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
</a>
<a class="occproblem1" href="occ_problem/mountainOccludersred.png" >
  <img src="occ_problem/mountainOccludersred_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
</a>

 <script type="text/javascript">
$(".occproblem1")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });
</script>
<br/><br/>
A other occurence at the end of the first level :<br/>
<br/>
<a class="occproblem2" href="occ_problem/oclluderWALl2.png" >
  <img src="occ_problem/oclluderWALl2_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
</a>
<a class="occproblem2" href="occ_problem/oclluderWALl3.png" >
  <img src="occ_problem/mountainOccludersVisible_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
</a>
<a class="occproblem2" href="occ_problem/oclluderWALl2red.png" >
  <img src="occ_problem/oclluderWALl2red_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>
</a>

 <script type="text/javascript">
$(".occproblem2")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });
</script>
<br/><br/>
Not to mention the problems related to generating the terrain on the fly based on wavelet: Sometimes occluders did not match the geometry :/ !



 <Br/>
 <br/>
 The engine also used two other big tricks to lower the poly count: The most famous was "object caching": While rendering objects, the distant ones would
 be rendered to a cache and drawn as sprite on a quad. This trick originally resulted in mixed results since the mesh would remain a sprite too close from the player 
 and changed from 2D to 3D in a very noticeable way as see in the two next images :<br/>
<br/>
 <a class="cache" href="cache/cachingPRE.png" ><img src="cache/cachingPRE_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/></a>
 
 <a class="cache" href="cache/cachingPOST.png" ><img src="cache/cachingPOST_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/></a>

 <script type="text/javascript">
$(".cache")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });

 </script>
 <br/>
 <br/>

 The pixelating problems were partly corrected in a patch 1.1 
 (see comparative in this <a href="http://www.hardcoregaming101.net/trespasser/trespasser.htm">no so kind review</a>).
  There were still issues related to depth correctness since the trick turned a volume turned into a plane but visual results were much more acceptable as seen 
  on the right image (Trespasser v1.1):<br/>
<br/>
 <a class="patch" href="patch/trespasser-comp-nopatch.jpg" ><img src="patch/trespasser-comp-nopatch_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/></a>
 
 <a class="patch" href="patch/trespasser-comp-patch.jpg" ><img src="patch/trespasser-comp-patch_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/></a>

 <script type="text/javascript">
$(".patch")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });

 </script>
 <br/>
<br/>
 An other less known trick to reduce the number of primitive to rasterize was to generate the terrain poly on the fly via
 wavelets. Wavelets can be used in order to generate lower detail version of a mesh. Depending on the distance of the terrain to draw, a specific Level Of Detail wavelet was selected. If you want to read deeper into this topic, here are two very good PDFs:<br/>
<ul>
  <li><a href="wavelets/sig95.course.pdf">SIGGRAPH ’95.course: Wavelets and their Applications in Computer Graphics</a></li>
  <li><a href="wavelets/waveletsforcomputergraphicspart1.pdf">Wavelets for Computer Graphics: A Primer Part 1</a></li>
</ul>

<p>
  <br/>
The renderer high level pipeline is a follow. 
<ul>
  <li>For each frame :
 <ol>

   <li>Update the terrain and generate appropriate distance related LOD polygons using wavelet.</li>
   <li>Draw skybox (called backdrop).</li>
   <li>Walk the quadTree and find occluders within the view frustum, use them to build occlusion volume tetrahedron.</li>
   <li>Walk the quadTree to select all terrain polygons: Discard via backface culling, frustum culling and occlusion culling.</li>
   <li>Walk the quadTree to select all objects meshes:  Discard via backface culling, frustum culling and occlusion culling. For distant objects, generate a proxy and render to a cache that is then rendered as a sprite.</li>
   <li>If shadow is enabled: Generate a shadowmap .</li>
   <li>Sort all polygons far to near using the Depth Sorting algorithm.</li>
   <li>Rasterize the full scene. Use bumpmapping and shadowmapping.</li>

 </ol>
 </li>
</ul>

<p>
  <br/>
  Here is the first scene with each steps. In this scene, overdraw is severely limited (the mountains polygon are generated but not rasterized, some overdraw occurs where crates and walls are in front of each others):<br/>

 <a class="fullscene" href="inside/occ0.png" ><img src="inside/occ0_thumb_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/>  </a>
  
      
   <a class="fullscene" href="inside/occ1.png" ><img src="inside/occ1_thumb_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/></a>

 <a class="fullscene" href="inside/occ3.png" ><img src="inside/occ3_thumb_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/></a>
 
 <a class="fullscene" href="inside/occ2.png" ><img src="inside/occ2_thumb_thumb.png" style="margin-right: 15px; margin-top:15px; box-shadow: rgb(119, 119, 119) 3px 3px 3px;"/></a>

 <script type="text/javascript">
$(".fullscene")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });

 </script>
<br/>
<br/>
<b><u>Note :</u></b> The C++ polymorphism really was beautiful when shadow was enabled: An instance of the renderer pipeline templated with a depth only rasterizer generated the shadow map. That part of the code was extremely elegant.<br/>
  <br/>
  <br/>
 The same scene viewed from above (notice the occluders placed within the mountains in the distance):<br/>
<br/>

<a class="city" href="city_occluders/city0.png">
  <img src="city_occluders/city0_thumb.png" alt=""/>
</a>
<a class="city" href="city_occluders/city2.png">
  <img src="city_occluders/city2_thumb.png" alt=""/>
</a>
<a class="city" href="city_occluders/city1.png">
  <img src="city_occluders/city1_thumb.png" alt=""/>
</a>


 <script type="text/javascript">
$(".city")
    .attr('rel', 'gallery')
    .fancybox({
        padding : 0,
        nextEasing: 'none',
        prevEasing: 'none',
        nextEffect: 'elastic',
        prevEffect: 'elastic',
    });

 </script>
  <div style="clear:both;"/>
</p>  


<br/>
The rasterizer code was hard to read since it features a lot of ASM and "old" AMD K6-2 3DNow! instructions but it was state of the art 
especially when bumpmapping T-Rex skin :<br/>
<br/>
<img src="bumpmap/trespasser_bumpmapping_actually_released.jpg" /><br/>
<br/>
<br/>In the end, the renderer did no have the elegance of Quake II software renderer "zero overdraw (<a href="../quake2/quake2_software_renderer.php#scanline_zero_overdraw">video</a>)" but thanks to a few tricks, it worked well enough.
</p>


<h2>The rest and the C++ box of chocolate</h2>
<p>
  The rest of the engine looked interesting (I.A, Physics, "real time Foley" Sound) and I would have loved to read and write more about it. Unfortunately the code is hard to read for me
  and the experimental/research/release date rush aspects of it felt very real. Once I figured the 3D renderer, my motivation vanished.<br/>
  <br/>
  
  On top of time constraints and research aspects, I felt like the team was pushing C++ at a time it should't have:
  <ul>
    <li>The code is full of cursing against Visual Studio bugs.</li>
    <li>The code is full of cursing against slow generated code.</li>
    <li>A full build took forever.</li>
  </ul>
  <p>
    <u><b>Trivia :</b></u> The first things one should run on a new codebase are the following greps :<br/>
     <pre>

    find . -exec grep --with-filename --ignore-case fuck   {}   \; 2>/dev/null
    find . -exec grep --with-filename --ignore-case shit   {}   \; 2>/dev/null
    find . -exec grep --with-filename --ignore-case hack   {}   \; 2>/dev/null
    find . -exec grep --with-filename --ignore-case lame   {}   \; 2>/dev/null
    find . -exec grep --with-filename --ignore-case stupid {}   \; 2>/dev/null

    </pre>
    <p>
      I was not a game developer in the 90s but I wonder if C++ was a good choice (many did <a href="http://gigamonkeys.wordpress.com/2009/10/16/coders-c-plus-plus/">not recommend it</a>) when the solid C with Watcom was available.<br/>
  <br/>
  My second issue with C++ is that a C++ codebase it is like a box of chocolate: You never know what flavor you are going to get :<br/>
  <pre>


    I think C++ was pushed well beyond its complexity threshold and yet there are a lot of people programming it. But what you do is you
    force people to subset it. So almost every shop that I know of that uses C++ says, “Yes, we’re using C++ but we’re not doing 
    multiple-implementation inheritance and we’re not using operator overloading.” There are just a bunch of features that you’re not going
    to use because the complexity of the resulting code is too high. And I don’t think it’s good when you have to start doing that. You 
    lose this programmer portability where everyone can read everyone else’s code, which I think is such a good thing.

                                                                                                                     - Joshua Bloch (<a href="http://gigamonkeys.wordpress.com/2009/10/16/coders-c-plus-plus/">source</a>)

  </pre> 
  <p>
    Or more simply :<br/>
    <pre>
        

          With C++, it’s possible to make code that isn’t understandable by anyone, with C, this is very hard. 

                                                                                                                     — Mike Abrash (<a href="https://groups.google.com/forum/#!msg/golang-nuts/FuEameKjmNY/4H7PTfjd9wkJ">source</a>)

    </pre>

<p>
    In the case of Trespasser the subset selected was STL, smart pointers and extreme metaprogramming which is not a flavor I really enjoy.
    I will probably get back to it one day when I am more comfortable with it.<br/>
    <br/>
    For now I will feel better thinking <a href="http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml?showone=Boost#Boost">I</a> <a href="https://twitter.com/ID_AA_Carmack/status/452586892282695680">am</a> <a href="https://twitter.com/ID_AA_Carmack/status/81104943490146304">not</a> <a href="https://github.com/fabiensanglard/carmack/blob/master/plan_files/johnc_plan_20101026.txt#L63">alone</a>. <a href="http://harmful.cat-v.org/software/c++/">Really Really not alone</a> :) !
  <br/> 
   
</p>


<h2>Closing up</h2>
<p>
  In the end, the source code of Jurassic Park: Trespasser re-inforced the sense of a missed opportunity which Seamus Blackley summarized in his
   <a href="http://www.trescom.org/interviews/seamus-blackley-interview/">an interview </a>with trecom.org:
  <pre>


   Q: Trespasser is unfortunately known for not bringing in the sales it deserved. If you could change one thing about the production what 
      would you do differently?

   A: I would have assigned the 25-year-old Seamus a strong producer, who would have bullied him to restrict the scope of innovation to 
      something manageable. I wanted to make this beautiful vision that I had for this amazing island become real, and I was too young 
      and stupid to realize that less is more.


  </pre>
  <p>
   Less is more. Enough said.
</p>







<h2>Recommended readings</h2>
<p>

  <pre>


   TreCom:    The physics system in Trespasser was your baby, how much work went into developing the setup achieved in the final product and 
              how much heart ache came from the realization that the hardware at the time simply did not support the complexity of some ideas 
              for  gameplay?

   SBlackley: Well, in order to make it fast enough, it had to be compromised in various ways. Today, there’s power to do analytic constraint 
              and such. In the 90s, it was tough. The real issue, honestly, was that it was too much for me to do physics and also be in charge,
              and I never figured out how to fix that. Back then, there were no books or libraries on game physics, it was all research, and 
              it was really, really hard.


  </pre>
<p>
  Two excellent books are availables now :<br/>
 <br/>
 <a href="http://www.amazon.com/Game-Physics-Engine-Development-Commercial-Grade/dp/0123819768/ref=sr_1_1?s=books&ie=UTF8&qid=1402360221&sr=1-1&keywords=physic+engine"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px; margin-right:10px;" src="reco/phy.jpg"/></a>
<a href="http://www.amazon.com/Real-Time-Collision-Detection-Interactive-Technology/dp/1558607323/ref=pd_sim_b_1?ie=UTF8&refRID=19WM41B77EF12RP51QA0"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;"  src="reco/real.jpg"></a>
  <br/>
<br/>
  <u><b>Pot Pourri</b></u><br/>
  <br/>
<a  href="http://www.amazon.com/Postmortems-Game-Developer-Developers-Top-Selling/dp/1578202140"><img style="margin-right:10px;box-shadow: rgb(119, 119, 119) 3px 3px 3px;"src="reco/postmortem.jpg"/></a>
  <a  href="http://www.amazon.com/Wavelets-Computer-Graphics-Theory-Applications/dp/1558603751/ref=sr_1_1?ie=UTF8&qid=1402274886&sr=8-1&keywords=Wavelets+for+Computer+Graphics"><img style="box-shadow: rgb(119, 119, 119) 3px 3px 3px;"src="reco/cover.jpg"></a>
  
  <br/>
  <br/>
    <u><b>All of Trescom.org</b></u><br/>
  <ul>
    <li><a href="http://www.trescom.org/">Main site</a></li>
   <li><a href="http://www.trescom.org/interviews/">Interviews</a></li>
    <li><a href="http://www.trescom.org/articles/">Articles</a></li>
   <li>...</li>
   </ul>
   
</p>













  <!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

