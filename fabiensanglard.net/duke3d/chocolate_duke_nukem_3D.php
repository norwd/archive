<script type="text/javascript">
  var disqus_identifier = "Duke3D_Code_Review" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Duke Nukem 3D: Build Engine Internals"/>
		<meta name="Description" content="Duke Nukem 3D: Build Engine Internals"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Duke Nukem 3D: Build Engine Internals</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="https://fabiensanglard.net/" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="http://fabiensanglard.net/" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="http://fabiensanglard.net/about/">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="http://fabiensanglard.net/faq/">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="http://fabiensanglard.net/rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="http://fabiensanglard.net/rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="http://fabiensanglard.net/rss.xml" />
<div id="date">
       February 14th, 2013</div>
   <h1>Duke Nukem 3D: Chocolate Duke Nukem 3D (PART 4 OF 4) <a href="index.php">>></a></h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="duke3d.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         

<a href="https://github.com/fabiensanglard/chocolate_duke3D">Chocolate Duke Nukem 3D</a> is a port of Duke Nukem 3D aimed 
at <u>education</u>. The main goal is to clarify the code
so programmers can extract knowledge easily and get a better idea of what it was to program game engines in the 90s.<br/>
<br/>
Like an archeologist working on bones it was important to keep things the way they were and only the "dust" has been removed with focus 
on:<ul>
<li>Readability : Make the code easy to understand.</li>
<li>Portability : Make the code easy to compile, run and tinker with.</li>
</ul>
<div style="clear:both;"></div>

<h3>Binaries</h3>
<p id="paperbox">
<p>
  This is a port for game developers that want to learn about the architecture and source code of Duke Nukem 3D. If you just want to play the
  game, I would recommend to use <A href="http://eduke32.com/">EDuke32</a> instead.<br/>
  <br/>
  If you want to play Chocolate Duke Nuken 3D anyway, just download the source code which features an XCode/Visual Studio project and built it :  
  <a href="https://github.com/fabiensanglard/chocolate_duke3D">Link to the source code</a>.
</p>

<h3>Portability</h3>
<p id="paperbox">
	The lack of portability was an issue now Chocolate Duke Nukem 3D compiles on Windows, Intel MacOS X 
	and Linux is one <code>makefile</code> away. Here is what has been done:<br/>
	<br/>
	<ul>
		<li><u>Usage of Integral type aliases</u> now guarantee the size of integers. The <code>long</code> was used everywhere 
		because it was tought during development that this type would always be 32 bits wide. 
			It is one of the reason the engine cannot be compiled in 64 bits mode. Using <code>int32_t</code> from the standard 
			<code>inttypes.h</code>.</li>
		<li><u>Removal of <code>char</code></u> for arithmetic operations: Since it can be <code>signed</code> or <code>unsigned</code> 
	depending on the platform, <code>char</code> for maths resulted in nasty wraparound ; <code>char</code> should only be used 
	for strings. 
	For arithmetic, <i>Build</i> is now explicit with <code>int8_t</code> or <code>uint8_t</code> from <code>inttypes.h</code> that
	 guaranty signedness.<br/>
	</li>
	<li><u>Removal of platform dependent API</u>. Back when SDL timer accuracy was average, the port had trouble replicating 
	the mandatory 120ticks/frame. Now the engine either use SDL or
	provide a platform specific implementation for POSIX and Windows.</li>
	</ul>
	<p>
	The code is much more portable but still not 64 bits ready: More work is still necessary in the interface between the 
	<i>Engine Module</i> and the <i>Drawing Module</i> where memory address are manipulated as 32 bits integers. This part 
	will require many hours and I am unsure I will be able
	to dedicate that much time.
</p>

<h3>Understandability</h3>
<p id="paperbox">
	Most of the workload went into making the code easy to read. Here is a list of what was done:
</p>

<h3>Modules definition</h3>
<p id="paperbox">
	<img src="../lazy_load/grey.gif" data-original="/fd_proxy/duke3d/vanilla_modules.png" 
style=" margin: 10px 10px 10px 0px; width: 297px; height: 214px; float:left;"/>
<br/>The vanilla source code was essentially contained in three translation units:
<ul   style="margin-left:320px;">
	<li><code>Engine.c</code> : Accounting for 95% of the code.</li>
	<li><code>a.c</code> : Containing a crude C implementation of what was once optimized ASM.</li>
	<li><code>cache1d.c</code> :  Containing the caching and GRP file systems.</li>
</ul> 
<br/>
<br/>
<br/>
<br/>

<p>
<img src="../lazy_load/grey.gif" data-original="/fd_proxy/duke3d/chocolate_modules.png" 
style=" margin: 10px 10px 10px 0px; width: 297px; height: 214px; float:left;"/>

The code has been redistributed in units that give a clear idea of what the code inside does :
<ul   style="margin-left:320px;">
	<li><code>Engine.c</code> : Now 50% of the code.</li>
	<li><code>display.c</code> : SDL surfaces buffers where the screen is rendered, palette utilities.</li>
	<li><code>draw.c</code> : The C implementation of the ASM routines.</li>
	<li><code>tiles.c</code> : The sprite engine.</li>
	<li><code>filesystem.c</code> : Anything abstracting the GRP filesystem.</li>
	<li><code>network.c</code> : Multiplayer is not here.</li>
	<li><code>cache.c</code> : The custom memory allocator and cache service.</li>
	<li><code>math.c</code> : Most of the fixed arithmetic helper functions are here.</li>
</ul> 
<p>
	I was tempted to break down <code>Engine.c</code> into a frontend and backend: Mimicking the Quake3/Doom3 architecture with two
	parts communicating via the bunch stack. In the end I judged it too far from the original spirit of the engine and dropped the idea.


<div style="clear:both;"></div>
</p>



<h3>Data structure</h3>
<p id="paperbox">
	<i>Build</i> used <code>struct</code> to communicate with the <i>Game Module</i> via
	 <a href="https://github.com/fabiensanglard/chocolate_duke3D/blob/master/Engine/src/build.h#L64">build.h</a>
	  but internally everything was done with arrays
	of primitive data types: No <code>struct</code> and no <code>typedef</code>.<br/>
	 This has been modified and especially with regards	to the Visual Surface Determination and Filesystem:<br/>
	 <br/>
	 <a href="https://github.com/fabiensanglard/vanilla_duke3D/blob/master/SRC/CACHE1D.C#L232">Before</a>:
	 <pre class="long">

     <span style="color:blue">long</span> numgroupfiles = 0;
     <span style="color:blue">long</span> gnumfiles[MAXGROUPFILES];
     <span style="color:blue">long</span> groupfil[MAXGROUPFILES] = {-1,-1,-1,-1};
     <span style="color:blue">long</span> groupfilpos[MAXGROUPFILES];
     <span style="color:blue">char</span> *gfilelist[MAXGROUPFILES];
     <span style="color:blue">long</span> *gfileoffs[MAXGROUPFILES];

     <span style="color:blue">char</span> filegrp[MAXOPENFILES];
     <span style="color:blue">long</span> filepos[MAXOPENFILES];
     <span style="color:blue">long</span> filehan[MAXOPENFILES];

	 </pre>
     <p>
     <a href="https://github.com/fabiensanglard/chocolate_duke3D/blob/master/Engine/src/filesystem.c#L27">After</a>:
	 <pre class="long">


    <span style="color:green">// A typical GRP index entry:</span>
    <span style="color:green">//     - 12 bytes for filename</span>
    <span style="color:green">//     -  4 for filesize</span>
    <span style="color:blue">typedef uint8_t</span>  grpIndexEntry_t[16]; 

    <span style="color:blue">typedef struct</span> grpArchive_s{
        <span style="color:blue">int32_t</span>  numFiles             ;<span style="color:green">//Number of files in the archive.</span>
        grpIndexEntry_t  *gfilelist   ;<span style="color:green">//Array containing the filenames.</span>
        <span style="color:blue">int32_t</span>  *fileOffsets         ;<span style="color:green">//Array containing the file offsets.</span>
        <span style="color:blue">int32_t </span> *filesizes           ;<span style="color:green">//Array containing the file offsets.</span>
        <span style="color:blue">int</span> fileDescriptor            ;<span style="color:green">//The fd used for open,read operations.</span></span>
        <span style="color:blue">uint32_t</span> crc32                ;<span style="color:green">//Hash to recognize GRP archives: Duke Shareware, Duke plutonimum etc...</span>
    } grpArchive_t;

    <span style="color:green">//All GRP opened are in this structure</span>
    <span style="color:blue">typedef struct</span> grpSet_s{

       grpArchive_t archives[MAXGROUPFILES];
       <span style="color:blue">int32_t</span> num;

    } grpSet_t;

	 </pre>
<br/>
</p>


<h3>Symbols name sanitization</h3>
<p id="paperbox">
	Variable names have been modified when they provided little clue about their usage:<br/>
	<br/>

	<a href="https://github.com/fabiensanglard/vanilla_duke3D/blob/master/SRC/ENGINE.C#L130">Before</a>:
	      <pre  class="long">

    <b>static</b> <span style="color:blue">long</span> xb1[MAXWALLSB], yb1[MAXWALLSB], xb2[MAXWALLSB], yb2[MAXWALLSB];
    <b>static</b> <span style="color:blue">long</span> rx1[MAXWALLSB], ry1[MAXWALLSB], rx2[MAXWALLSB], ry2[MAXWALLSB];
    <b>static</b> <span style="color:blue">short</span> p2[MAXWALLSB], thesector[MAXWALLSB], thewall[MAXWALLSB];

            </pre>
            <p>
<a href="https://github.com/fabiensanglard/chocolate_duke3D/blob/master/Engine/src/engine.c#L109">After</a>:

<pre   class="long">


    <span style="color:blue">enum</span> vector_index_e {VEC_X=0,VEC_Y=1};
    <span style="color:blue">enum</span> screenSpaceCoo_index_e {VEC_COL=0,VEC_DIST=1};
    <span style="color:blue">typedef int32_t</span> vector_t[2];
    <span style="color:blue">typedef int32_t</span> coo2D_t[2];

    <span style="color:green">// This is the structure emitted for each wall that is potentially visible.</span>
    <span style="color:green">// A stack of those is populated when the sectors are scanned.</span>
    typedef struct pvWall_s{
        vector_t cameraSpaceCoo[2]; <span style="color:green">//Camera space coordinates of the wall endpoints. Access with vector_index_e.</span>
        <span style="color:blue">int16_t</span> sectorId;           <span style="color:green">//The index of the sector this wall belongs to in the map database.</span>
        <span style="color:blue">int16_t</span> worldWallId;        <span style="color:green">//The index of the wall in the map database.</span>
        coo2D_t screenSpaceCoo[2];  <span style="color:green">//Screen space coordinate of the wall endpoints. Access with screenSpaceCoo_index_e.</span>
    } pvWall_t;

    <span style="color:green">// Potentially Visible walls are stored in this stack.</span>
    pvWall_t pvWalls[MAXWALLSB];


</pre>
   <p>

</p>





<h3>Comments and documentation</h3>
<p id="paperbox">
	<ul>
		<li><u>Documentation :</u> Since the JoFo forum posts are gone, I hope the <a href="build_engine_internals.php">Build Internals page</a> 
		will helps developers to have an idea of the high level architecutre of the engine.</li>
		<li><u>Comments :</u> This is the point where I tried to invest most of the time. I am a huge believer of a lot of comments in code 
		(<a href="https://fabiensanglard.net/doom3/dmap.php">Dmap</a> is a great example of source with more comments than statements).</li>
	</ul>
</p>


<h3>Magic numbers</h3>
<p id="paperbox">
	I haven't had the time to remove all the magic numbers. Change decimal literal in favor of <code>enum</code> or <code>#define</code>
	would improve readability a lot.<br/>
</p>




<h3>Memory allocation</h3>
<p id="paperbox">
	<i>Chocolate Duke</i> attemps to avoid global variables. Especially if they are used only for the lifetime of a 
	frame. In those cases the memory used will be on the stack:<br/>
<p>
<a href="https://github.com/fabiensanglard/vanilla_duke3D/blob/master/SRC/ENGINE.C#L180">Before</a>:
	<pre class="long">

    <span style="color:blue">long</span> globalzd, globalbufplc, globalyscale, globalorientation;
    <span style="color:blue">long</span> globalx1, globaly1, globalx2, globaly2, globalx3, globaly3, globalzx;
    <span style="color:blue">long</span> globalx, globaly, globalz;

    <i><b><span style="color:blue">static short</span> sectorborder[256], sectorbordercnt;</b></i>
    
    <span style="color:blue">static char</span> tablesloaded = 0;
    <span style="color:blue">long</span> pageoffset, ydim16, qsetmode = 0;

	</pre>
<p>
	</br>
	<br/>
	<a href="https://github.com/fabiensanglard/chocolate_duke3D/blob/master/Engine/src/engine.c#L334">After</a>:
	<pre class="long">

    <span style="color:green">/*</span>
    <span style="color:green">FCS:</span>
    <span style="color:green">Scan through sectors using portals (a portal is wall with a nextsector attribute >= 0).</span>
    <span style="color:green">Flood is prevented if a portal does not face the POV.</span>
    <span style="color:green">*/</span>
    <span style="color:blue">static void</span> scansector (<span style="color:blue">short</span> sectnum)
    {
    
        <span style="color:green">//The stack storing sectors to visit.</span>
        <span style="color:blue">short</span> sectorsToVisit[256], numSectorsToVisit;
        .
        .
        .
    }
   
	</pre>
	<p>
	<br/>
		<u><b>Note :</b></u> Be careful when using a stack frame to store big variables. The following code ran well when compiled on clang
	and gcc but failed with Visual Studio:</br>
	<pre class="long">

	
    <span style="color:blue">int32_t</span> initgroupfile(const char  *filename)
    {
        <span style="color:blue">uint8_t</span>          buf[16]                  ;
        <span style="color:blue">int32_t</span>          i, j, k                  ;
        grpArchive_t*    archive                  ;
        <b><span style="color:blue">uint8_t</span>        crcBuffer[ 1 << 20]   ;</b>
   
        printf(<span style="color:red">"Loading %s ...\n"</span>, filename)   ;
        .
        .
        .
    }
    
	</pre>
	<p>
	A stack overflow occurred because Visual Studio reserves only 1MB for the Stack by default. Trying to use 1MB overflowed 
	the stack and that made
	<code>chkstk</code> very unhappy. This code ran fine with Clang on Mac OS X.
</p>


<h3>Source code</h3>
<p id="paperbox">
	The source code is <a href="https://github.com/fabiensanglard/chocolate_duke3D">available on github</a>.
</p>



<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

