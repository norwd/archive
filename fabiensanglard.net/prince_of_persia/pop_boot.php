<script type="text/javascript">
  var disqus_identifier = "Prince_of_persia_Code_Review" ;
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Prince Of Persia, 6502, Apple II, Code review,RWT18"/>
		<meta name="Description" content="Prince Of Persia Code Review"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Prince Of Persia Code Review  Part 2 (Bootloader)</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="https://fabiensanglard.net/" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="http://fabiensanglard.net/" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="http://fabiensanglard.net/about/">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="http://fabiensanglard.net/faq/">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="http://fabiensanglard.net/rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="http://fabiensanglard.net/rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="http://fabiensanglard.net/rss.xml" />
<div id="date">
       June 14th, 2013</div>
   <h1>Prince Of Persia Code Review: Part 2 (Bootloader)</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="prince_of_persia.png" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         
<style type="text/css">
.shadowed-book{
  box-shadow: rgb(119, 119, 119) 3px 3px 3px;
  
 
  
  margin-right: 12px;
}

</style>
In order to save RAM and processing power, Apple II game developers did not use the operating system that came with the machine. As a result, they had to write their own bootloader: 
<ul>
<li>A tiny program that would load the game engine from floppy disk to the RAM.</li>
</ul>
<p>
    Routines located in the Apple II ROM would help a lot: RWTS16 was a set of instructions that piloted the floppy disk unit and allowed to read/write 16 sectors of 256 bytes per track on 35 tracks for a total of 140kB per disk.<br/>
<br/>
But games from Br√∏derbund did not use RWTS16. They came up with a better format: RWTS18 which allowed higher data capacity and proved to be a strong copy protection mechanism.
<br/>
<br/>
<a href="index.php">Part I : Introduction</a><br/>
<a href="pop_boot.php">Part II : Bootloader</a><br/>
<a href="pop_boot2.php">Part III : Code explained</a><br/>
<div style="clear:both;" />
</p>




<br/>
<h3>Traditional bootloader</h3>
<p id="paperbox">
    <img src="../fd_proxy/prince_of_persia/boot1.png" style="float:left;margin-right: 10px;width:422px;height:385px;"/> 
    Before emphasizing on what was different, here is how things were usually done in the video game industry:<br/><br/>
    Three components interacted together when the computer started :
<ul style="overflow: hidden;">
    <li>Floppy disk.</li>
    <li>Booting routine in the Apple ROM.</li>
    <li>Floppy disk reading routines (RWTS16)in the Apple ROM.</li>
</ul>
<p>
   
    <div style="clear:both;" /><br/><br/>
    <img src="../fd_proxy/prince_of_persia/boot2.png" style="float:left;margin-right: 10px;width:424px;height:380px;"/><br/>
    Upon startup the Apple II would :
    <ol style="overflow: hidden;">
       <li>Set its Instruction Pointer on the booting instructions in the Apple ROM</li>
       <li>The Apple booting routines used RWTS16 to load sectors from the floppy to the RAM at <code>$800</code>.</li> 
       <li>Those sectors contained the game bootloader.</li>
       <li>The Apple II booting routines will then branch to <code>$800</code>.</li>
    </ol>
    <p>
    <div style="clear:both;" /><br/><br/>
    <img src="../fd_proxy/prince_of_persia/boot3.png" style="float:left;margin-right: 10px;width:477px;height:387px;" /><br/>
    The game's bootloader would be in charge from there to load the game engine from the floppy to the RAM:<br/>
    <br/>
    <ol style="overflow: hidden;">
   <li>Using the Apple II RWTS16 routines...</li>
    <li>It would transfer the game engine from floppy to the RAM...</li>
   <li> and then branch to the engine.</li>
    </ol>
    <div style="clear:both;" />
    <p style="padding-top: 3ch;">
      Note that this boot explanation contained simplification. To be completly accurate, the RWTS 16 code is not part of the Apple ][ ROM. It is contained on the PROM on the Disk II card does. The Apple ][ <a href="https://www.xtof.info/blog/?p=1121">Autostart ROM</a> scan the extension card and gives control to mass storage ones.
      <br/>
      <br/>

       David Galloway kindly wrote to clarify how it works.
      <br/>

          <style>
  blockquote.style1 
  {
      
      padding: 8px;
      
      width: 80%;
      
      background-color: #eeeeee;
      border: 1px solid #dddddd;
      
      
      margin: 5px;
      background-image: url(../quake2/images/openquote1.gif);
      background-position: top left;
      background-repeat: no-repeat;
      text-indent: 23px;
    
    }
    
    blockquote.style1 span 
    {
      display: block;
      font-style:italic;
      background-image: url(../quake2/images/closequote1.gif);
      background-repeat: no-repeat;
      background-position: bottom right;
      text-align: justify;
    }
    </style>


      <blockquote  class="style1">
        The Boot routine, the 256 bytes that is in the PROM on the Disk II card does not call out to any other ROM routine. It is completely self contained which was always kind of magic to me as a teenager. One of the first things it does is build a 6+2 decode table at location $0300.
      <br/>
      <br/>

         It has the code to step the head 40 tracks and you hear the characteristic clatter as it bumps against the stop to ensure it's at track 0. It then has a small routine to find track 0 sector 0 and load and decode it at $0800. It then jumps to $0801 ($800 contains a # which potentially could cause the boot ROM to load additional sectors) $801 is another 256 byte routine and in the case of DOS 3.3 uses the boot PROM to help load in DOS 3.3 at either the Master or Slave location. 
      <br/>
      <br/>
      This is when RWTS is finally loaded as it is not located in ROM.  
      </blockquote>
</p>

<br/>
<h3>RWTS 16</h3>
<p id="paperbox">
     <img src="../fd_proxy/prince_of_persia/rwts16_disk.png" style="float:left;margin-right: 10px;width:315px;height:309px;" /><br>
  
     RWTS16 was the floppy disk format that came with the Apple II. It is extensively described in the gem of a 
     book "<a href="https://fabiensanglard.net/fd_proxy/prince_of_persia/Beneath%20Apple%20DOS.pdf">Beneath Apple DOS</a>" and also on <a href="https://www.bigmessowires.com/2015/08/27/apple-ii-copy-protection/">bigmessowires</a>. In a nutshell it consisted in a set of routines in the ROM that piloted the disk drive in order to write and read 16 sectors per track.<br/>
     <br/>
     Sectors of 256 bytes were written on a track as in the drawing below :<br/>
 <img src="../fd_proxy/prince_of_persia/rwts16_gap.png" style="display:block;margin-left:auto;margin-right:auto;width:509px;height:214px;" />
  
 <div style="clear:both;" />
 <br/>
 <br/>
  Because drives lacked accuracy, huge gaps had to be left between sectors in order to allow delete/rewritten without overlaps :
  As you can see in the following drawing, the drive head could write a little bit before or a little bit after the "ideal" location. Gaps compensated for those inaccuracies :<br/>
  <br/>
   <img src="../fd_proxy/prince_of_persia/rwts16_gap2.png" style="display:block;margin-left:auto;margin-right:auto;width:671px;height:220px;" /><br/> 
  </p>

<br/>
<h3>RWTS 18</h3>
<p id="paperbox">
  
    <img src="../fd_proxy/prince_of_persia/rwts18_disk.png" style="float:left;margin-right: 10px;width:324px;height:320px;" /><br/>
    RWTS18 was a floppy disk format authored by Roland Gustafsson for Br√∏derbund. It was a complete departure from RWTS16 that not only provided more storage space: it also made hacker's work much harder.<br/>
    <br/>
    RWTS18 higher capacity was based on a clever observation: Game distribution involved mainly <u>reading</u> data, not writing. RWTS18 almost dropped the concept of sectors: It wrote entire tracks and read much larger sectors.<br/>
    <br/>
    This design allowed to remove most of the gaps RWTS16 had to put between sectors: Only the minimum XXX self-synchronizing bytes are between sectors.<br/>
    <br/>
    <img src="../fd_proxy/prince_of_persia/rwts16_rwts18.png" style="display:block;margin-left:auto;margin-right:auto;width:570px;height:77px;" />
    <div style="clear:both;" />
     <br/>
    As a result, RWTS18 allowed 768 byte on each 6 sectors for a total of 157 kB per disk instead of the 140 kB allowed with RWTS16.<br/>
     <br/>
    But higher capacity was not the only asset RWTS18 provided. It also featured anti-copy mechanisms :<br/>
    <ul>
      <li>Every disk manufactured was physically difference: Data was encoded differently thanks to a nibble table that was loaded by RWTS18 at runtime.</li>
      <li>Different sector Prolog and Epilog confused disk copy programs.</li>  
    </ul>
   
    <br/>
    <u><b>Note :</b></u> RWTS18 did not totally drop sectors for two reasons:
    <ul>
        <li>The maximum latency to start reading a track was 1/6 revolution.</li>
        <li>Developers still had a bit of granularity (a full track may have been too much data).</li>
    </ul>

    <br/>
    <u><b>Note :</b></u> Roland Gustafsson also commented the following :
    <br/>
<blockquote class="style1"> 
<br/> 
<span> 
<br/> When reading a track, the 18 sectors could go into 18 different pages of RAM as specified, not just sequencial reads of 18 sectors ($1200 bytes) in whatever order they were encountered... this is a method that is now used on hard disks, I believe it is called scatter-read (for me, it just seemed like a good idea at the time! :)<br/> 
<br/> 
The self-modifying code I used allowed for 4 cycle reads instead of 6, saved 2 cycles for both reading/writing. Plus it allowed for "throw-away" reads where every sector/page was not necessarily desired. There was an API that handled the variations required. The innermost loops for reading and writing were extremely tight, in fact, the write routines needed to pre-process the data a bit before writing in one revolution. I believe it was about a 20% overhead, if I'm not mistaken.<br/>
<br/>
</span> 
</blockquote> 
    <br/><br/>
    <u><b>Trivia :</b></u> Roland Gustafsson was so devoted to Apple II that he made his car license plate "<code>D5 AA 96</code>" which is RWTS16 prologue 3 bytes marker.<br/>
    <br/>
    <a href="https://fabiensanglard.net/fd_proxy/prince_of_persia/license_plate.jpeg"><img src="../fd_proxy/prince_of_persia/license_plate_mini.jpeg" style="display:block;margin-left:auto;margin-right:auto;"/></a>
    <br/>
    <u><b>Trivia :</b></u> The source of RWTS18 was written with LISA assembler which is a tokenized file format... not just a basic text file. Roland is planning on releasing the source as soon as he find a way to extract it. If you know how to do that, get in touch with him.<br/>
    <u><b>Trivia :</b></u> RWTS18 was so difficult to decipher that it gave birth to bizarre legends: It was originally thought that authoring RWTS18 disks required using <a href="http://compgroups.net/comp.sys.apple2/toy-shop-for-apple-ii-available-and-a-long-st/1133956">slower disk drives</a>.<br/>
    <u><b>Trivia :</b></u> Hackers did end up cracking Prince Of Persia...but they had to reverse-engineer the game and write it
    on 3 disk formatted with RWTS16 to allow further re-distribution. The original release of POP was contained on two disk using RWTS18. Even Apple II emulators can only run the cracked version of Prince Of Persia !
<div style="clear:both;" />
</p>


<br/>
<h3>Prince Of Persia bootloader</h3>
<p id="paperbox">
 
 <img src="../fd_proxy/prince_of_persia/rwts18_boot1.png" style="float:left;margin-right: 10px;width:423px;height:381px;"/><br/>
 Now we have everything we need to understand POP bootloader:<br/>
 <br/>
 POP started booting in a typical fashion: The first track was formated with RWTS16 so the Apple II boot routines would load POP bootloader in RAM.
 <div style="clear:both;" /><br/><br/>

 <img src="../fd_proxy/prince_of_persia/rwts18_boot2.png" style="float:left;margin-right: 10px;width:465px;height:400px;"/><br/>
 POP bootloader would then load RWTS18 routines from the rest of track 0 using RWTS16.
 <div style="clear:both;" /><br/><br/>

 <img src="../fd_proxy/prince_of_persia/rwts18_boot3.png" style="float:left;margin-right: 10px;width:455px;height:407px;" /><br/>
 The bootloader then used RWTS18 to load the game engine from the other tracks which where formatted with RWTS18.<br/>
 <br/>
 The bootloader would branch to the game engine...which would also use RWTS18 routines to load game assets.
 <div style="clear:both;" /><br/><br/>

    <div style="clear:both;" />
</p>



<br/>
<h3>Interview with Roland Gustafsson</h3>
<p id="paperbox">
  Rolans accepted to answer a few questions, here is the interview :<br/>
  <br/>
  <div style="background-color:white;padding:10px;border-style:solid;border-width:1px;border-color:black;">
 <b>Fabien Sanglard :</b> Hello Roland, can you give us some background about you: When were you born,
Where did you grow up, how was school for you and how did you get to become a programmer ?<br/>
 <b>Roland Gustafsson :</b> Born in Sweden but lived in California all my life. I did not really like school, graduated from high school, however, and was already programming and making a good living at it at age 17. (That's why I didn't go on to college, the computer classes offered back then in university weren't relevant with these new things called personal computers... this was in the late 70's)<br/>
<br/>
<br/>




  <b>FS :</b> How did you end up working at Broderbund in the 80s ? How long
 did you stay with them. How did you get the idea of RWTS18, why did you write it ? Except for RWTS18, what else did you program at Br√∏derbund ?<br/>
<b>RG :</b> Broderbund. I was never an employee, never have had a real job, always freelancer. :)
<br/>
The idea for RW18 was borne out of necessity. There were some Bank Street products (after Bank Street Writer) that wouldn't fit on a standard 16 sector disk. Having pulled rabbits out of hats before, they asked me if it was possible to come up with a way to store more data. Having worked on copy protection for years, thinking outside the box and fully understanding the capabilities of the Disk II drive, I rubbed my chin for a bit and hashed out the most efficient way I could think of. This was done on a plane to Japan, so had main hours of paper and pencil time to do so. My friend Corey Kosak was convinced he could come up with a way to store 19 sectors (the theoretical limit) but it involved math so intensive that the lowly 6502 back then would not be able to handle it. The underlying math for nibble management is essentially base 64, whereas it would be possible to store more data if you could easily work with base 78 or something like that, can't remember. The math was a bit mind-numbing. :) Base 64, of course, is child's-play for binary systems. :)
<br/>
<br/>




<b>FS :</b> How was it working with Br√∏derbund (working hours, salary, were people as passionate as you ) ? How would you compare that experience to today working conditions ?<br/>
<b>RG :</b> I have never had a real job, don't want one, not an office person. :)<br/>
<br/>
<br/>




<b>FS :</b> Did you work on prince on Persia at all ? Did you usually provide support
   to game developers or you just gave then the assembly source and manual ?<br/>
<b>RG :</b> I worked directly with Jordan Mechner implementing RW18 and the copy protection. We had lots of fun coming up with devious ways to make it difficult to copy... in some cases the game would seem to work but ultimately be unplayable. With most other games, I came in after the game was complete and added the copy protection. The exception was any RW18 program, that needed to be implemented during development phase, of course! I had a basic manual for it that was super easy to use.<br/>
<br/>
<br/>




 <b>FS :</b> The book "Hackers: Heroes of the Computer Revolution" features a chapter
  about Spiradisc and Sierra On-Line fight against piracy. In retrospect did you
  consider RWTS18 to be effective fighting Br√∏derbund game piracy ? Did you ever study other publisher copy protection mechanism (Spiradisc)? If yes, what did you think of them ?<br/>
<b>RG :</b> The only other copy protection that I carefully studied was the cassette version of Microsoft's Flight Simulator. That's when I realized that copy protection existed. From that point on, I developed my own copy protection and it was rare for me to look at what others were doing. I came up with the spiral disk copy protection method myself and it was used on many Broderbund and Gebelli games. I was not aware of anyone else coming up with the 18 sector thing but heard many years later that someone either copied or came up with their own method. Still not sure on that. I know for sure I invented RW18, however. :) :)<br/>
<br/>
<br/>




<b>FS :</b> Still about fighting software piracy: Did you keep up with the opposite side techniques
 in order to improve RWTS18 ? Opponents can sometimes develop respect for each other skills:
 Were you ever impressed by what pirates were able to do (like for example pirating POP on three RWTS16 floppy).<br/>
<b>RG :</b> Yes, I would at least keep on top of the latest Locksmith, Nibbles Away or other software for copying and also the hardware boards. I added code to prevent hardware copy boards from working that was so thorough that Apple couldn't figure out how to get around it with their then still unannounced and secret Apple //e... so they brought one to my house so I could make it work. I had a disguised Apple //e for quite a while before it was announced and released.<br/>
<br/>
Honestly, I thought the idea of creating a 3 disk version of a 2 disk RW18 game was silly and really not impressive. It would have been better for them to have created a copy-system that created exactly the same format, RW18 and just make exact copies!! The experience was MUCH better, faster, etc... :)<br/>
<br/>
<br/>




<b>FS :</b> What do you consider the greatest hack in the history of software engineering ?<br/>
<b>RG :</b> Nothing jumps to mind. I would say that anytime someone comes up with a surprisingly clever solution to a perplexing problem that involves inventive thinking, that's praiseworthy. :)<br/>
<br/>
<br/>




<b>FS :</b> What is your all-time favorite video game ?<br/>
<b>RG :</b> Even though I haven't played it for many years, the original GameBoy version of Tetris, the "networked" version playing against others. I used to play that at Broderbund competitively. :)<br/>
<br/>
<br/>




<b>FS :</b> I'm the computer industry do you have any role model, personal hero ?<br/>
<b>RG :</b> Steve Wozniak's insistence on publishing the source code for the original Apple II ROMs... that was essential in my learning experience. I also met him once at the Apple users group in San Francisco, I was able to talk to him enough to get details on the Disk II system that got me started on copy protection.<br/>
<br/>
<br/>




<b>FS :</b> What was your proudest moment as a software engineer ?<br/>
<b>RG :</b> Whenever I was able to exceed expectations, pull rabbit out of hat, etc... those were great moments. I still think RW18 is right up there as one of my best tricks.<br/>
<br/>
<br/>


<b>FS :</b> What are you working on today ?<br/>
<b>RG :</b> CTO at Oceanhouse Media developing mobile apps. What Apple has done with iOS and app development is truly ground breaking! We develop for the other mobile markets as well and they still have a lot of catching up to do. Yes, I'm still a huge Apple fan. ;)
<br/>
<br/>
</div>
</p>


<br/>
<h3>Recommend readings</h3>
<p id="paperbox">
    <a href="https://fabiensanglard.net/fd_proxy/prince_of_persia/Beneath&#32;Apple&#32;DOS.pdf"><img src="../fd_proxy/prince_of_persia/beneath_apple_DOS.png" class="shadowed-book" style="float:left;margin-left:10px;width:184px;height:278px;"/></a>
    "<a href="https://fabiensanglard.net/fd_proxy/prince_of_persia/Beneath%20Apple%20DOS.pdf">Beneath Apple DOS</a>" is a great book that describe the internals of Apple II computers. Very useful to understand RWTS16 and 6+2 translation.<br/>

    <div style="clear:both;"></div>
    <br/>
    <p>
<a href="http://www.amazon.ca/Hackers-Heroes-Computer-Revolution-Anniversary/dp/1449388396/ref=sr_1_1?ie=UTF8&qid=1371144548&sr=8-1&keywords=hackers+hero"><img src="../fd_proxy/prince_of_persia/hackers_bookcover.jpg" class="shadowed-book" style="float:left;margin-left:10px;width:184px;height:262px;"/></a>
   
    <br/><a href="http://www.amazon.ca/Hackers-Heroes-Computer-Revolution-Anniversary/dp/1449388396/ref=sr_1_1?ie=UTF8&qid=1371144548&sr=8-1&keywords=hackers+hero">Hackers: Heroes of the Computer Revolution</a> features a chapter about Sierra On-Line and the difficult relationships with their anti-hacker wizkid responsible for <a href="http://en.wikipedia.org/wiki/Spiradisc">Spiradisc</a>:  Mark Duchaineau.<br/>
    <div style="clear:both;" />
    <br/>
    <br/>
</p>


<br/>
<h3>Next</h3>
<p id="paperbox">
    Now that we have all the knowledge we need, we can actually dive in the code: <a href="pop_boot2.php">Prince Of Persia code explained</a>
<p/>
			
	<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

