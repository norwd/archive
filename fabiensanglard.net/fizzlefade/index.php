<script type="text/javascript">
  var disqus_identifier = "fizzlefade";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Wolfeinstein 3D"/>
		<meta name="Description" content="Wolfenstein 3D fizzlefade"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Fizzlefade</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       August 28th, 2017</div>
   <h1>Fizzlefade</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="die.gif" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         	
				I enjoy reading a lot of source code and after 15 years in the field I feel like I have seen my fair share. Even with a full-time job, I still
        try to spare evenings here and there to read. I don't see myself ever stopping.
				It is always an opportunity to learn new things to follow somebody's mind process.<br/>
        <br/>
        Every once in a while I come across a solution to a problem that is so 
				elegant, and so creative that there is no other word but "beautiful" to describe it. 
				<a href="https://en.wikipedia.org/wiki/Fast_inverse_square_root">Q_rsqrt</a>, better known as "Inverse Square Root" and popularized 
        by Quake 3, definitely belong to the family of breathtaking code. While I was working on the <a href="https://play.google.com/store/books/details/Fabien_Sanglard_Game_Engine_Black_Book?id=Lq4yDwAAQBAJ"><i>Game Engine Black Book: Wolfenstein 3D</i></a> I came across an other one: Fizzlefade.<br/>
				 <br/>
				Fizzlefade is the name of the function in charge of fading from a scene to an other in Wolfenstein 3D. What it does is turn the pixels of the 
				screen to a solid color, only one at a time, seemingly at random.<br/>
        <br/>
        <!-- 
        The following is an extract from the <i>Game Engine Black Book: Wolfenstein 3D</i>, I hope you will enjoy discovering it as much as I did.
        -->
	<div style="clear:both;"></div>
			</p>


<style>
img.center {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

img.pixel { 
    image-rendering: optimizeSpeed;             /* STOP SMOOTHING, GIVE ME SPEED  */
    image-rendering: -moz-crisp-edges;          /* Firefox                        */
    image-rendering: -o-crisp-edges;            /* Opera                          */
    image-rendering: -webkit-optimize-contrast; /* Chrome (and eventually Safari) */
    image-rendering: pixelated; /* Chrome */
    image-rendering: optimize-contrast;         /* CSS3 Proposed                  */
    -ms-interpolation-mode: nearest-neighbor;   /* IE8+                           */

}

</style>
<h3>// What The Fizzle ?!</h3>
<p id="paperbox">	
	In Wolfenstein 3D, most screen transitions are done with a fade to black (by shifting the palette), there
are two instances when the screen transitions via fizzling:<br/>
<ul>
<li>When dying
<li> When killing a boss
</ul>
<p>
Below are a series of screenshots to illustrate fizzling. During the transition, each pixel on
the screen is turned to red (when dying) or blue (when dispatching a boss). Each pixel is
written only once and seemingly at random.<br/>
<br/>
<img class="center pixel" src="die.gif" width=640 height=480/><br/>
<br/>
To implement this effect, a naive approach would have been to use the pseudo random
generator <a href="https://github.com/id-Software/wolf3d/blob/05167784ef009d0d0daefe8d012b027f39dc8541/WOLFSRC/ID_US_A.ASM#L85">US_RndT</a> and keep track of which pixels had been fizzled. However, this would
make the fade non-deterministic with regard to duration and would also waste CPU cycles
since the same pixel coordinates (X,Y) could come up several times. There is a much
faster and more elegant way to implement a pseudo-random value generator. The code
responsible for this effect can be found in <a href="https://github.com/id-Software/wolf3d/blob/05167784ef009d0d0daefe8d012b027f39dc8541/WOLFSRC/ID_VH.C">id_vh.cpp</a>, function <a href="https://github.com/id-Software/wolf3d/blob/05167784ef009d0d0daefe8d012b027f39dc8541/WOLFSRC/ID_VH.C#L471">FizzleFade</a>. At first, it is
not obvious how it works.<br/>
<br/>
<pre style='color:#000000;background:#ffffff;'>

  boolean FizzleFade <span style='color:#800080; '>{</span>
    <span style='color:#800000; font-weight:bold; '>long</span> rndval <span style='color:#808030; '>=</span> <span style='color:#008c00; '>1</span><span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>int</span> x <span style='color:#808030; '>,</span> y <span style='color:#800080; '>;</span>
    <span style='color:#800000; font-weight:bold; '>do</span>
    <span style='color:#800080; '>{</span>
      <span style='color:#696969; '>// seperate random value into x/y pair</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#000080; '>ax</span> <span style='color:#808030; '>,</span><span style='color:#808030; '>[</span> <span style='color:#800000; font-weight:bold; '>WORD</span> <span style='color:#800000; font-weight:bold; '>PTR</span> rndval <span style='color:#808030; '>]</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#000080; '>dx</span> <span style='color:#808030; '>,</span><span style='color:#808030; '>[</span> <span style='color:#800000; font-weight:bold; '>WORD</span> <span style='color:#800000; font-weight:bold; '>PTR</span> rndval <span style='color:#008c00; '>+2</span><span style='color:#808030; '>]</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#000080; '>bx</span> <span style='color:#808030; '>,</span> <span style='color:#000080; '>ax</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>dec</span> <span style='color:#000080; '>bl</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#808030; '>[</span> <span style='color:#800000; font-weight:bold; '>BYTE</span> <span style='color:#800000; font-weight:bold; '>PTR</span> y <span style='color:#808030; '>]</span><span style='color:#808030; '>,</span> <span style='color:#000080; '>bl</span> <span style='color:#696969; '>// low 8 bits - 1 = y</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#000080; '>bx</span> <span style='color:#808030; '>,</span> <span style='color:#000080; '>ax</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#000080; '>cx</span> <span style='color:#808030; '>,</span> <span style='color:#000080; '>dx</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#808030; '>[</span> <span style='color:#800000; font-weight:bold; '>BYTE</span> <span style='color:#800000; font-weight:bold; '>PTR</span> x <span style='color:#808030; '>]</span><span style='color:#808030; '>,</span> <span style='color:#000080; '>ah</span> <span style='color:#696969; '>// next 9 bits = x</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#808030; '>[</span> <span style='color:#800000; font-weight:bold; '>BYTE</span> <span style='color:#800000; font-weight:bold; '>PTR</span> x <span style='color:#008c00; '>+1</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>,</span> <span style='color:#000080; '>dl</span>
    
      <span style='color:#696969; '>// advance to next random element</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>shr</span> <span style='color:#000080; '>dx</span> <span style='color:#808030; '>,</span><span style='color:#008c00; '>1</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>rcr</span> <span style='color:#000080; '>ax</span> <span style='color:#808030; '>,</span><span style='color:#008c00; '>1</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>jnc</span> <span style='color:#e34adc; '>noxor</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>xor</span> <span style='color:#000080; '>dx</span> <span style='color:#808030; '>,</span><span style='color:#008c00; '>0x0001</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>xor</span> <span style='color:#000080; '>ax</span> <span style='color:#808030; '>,</span><span style='color:#008c00; '>0x2000</span>
    
      noxor <span style='color:#800080; '>:</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#808030; '>[</span> <span style='color:#800000; font-weight:bold; '>WORD</span> <span style='color:#800000; font-weight:bold; '>PTR</span> rndval <span style='color:#808030; '>]</span> <span style='color:#808030; '>,</span> <span style='color:#000080; '>ax</span>
      <span style='color:#004a43; '>asm</span> <span style='color:#800000; font-weight:bold; '>mov</span> <span style='color:#808030; '>[</span> <span style='color:#800000; font-weight:bold; '>WORD</span> <span style='color:#800000; font-weight:bold; '>PTR</span> rndval <span style='color:#008c00; '>+2</span><span style='color:#808030; '>]</span> <span style='color:#808030; '>,</span> <span style='color:#000080; '>dx</span>

      <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>x <span style='color:#808030; '>></span> width <span style='color:#808030; '>|</span><span style='color:#808030; '>|</span> y <span style='color:#808030; '>></span> height <span style='color:#808030; '>)</span> <span style='color:#800000; font-weight:bold; '>continue</span> <span style='color:#800080; '>;</span>
          
      fizzle_pixel <span style='color:#808030; '>(</span>x <span style='color:#808030; '>,</span> y <span style='color:#808030; '>)</span> <span style='color:#800080; '>;</span>
    
      <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span> rndval <span style='color:#808030; '>=</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span> <span style='color:#800000; font-weight:bold; '>return</span> false <span style='color:#800080; '>;</span> <span style='color:#696969; '>// end sequence</span>

    <span style='color:#800080; '>}</span> <span style='color:#800000; font-weight:bold; '>while</span> <span style='color:#808030; '>(</span><span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span>
  <span style='color:#800080; '>}</span>

</pre>
<p>
<br/>
If you can't read 16 bits TASM (I won't blame you), this is the C equivalent:<br/>
<br/>

	<pre style='color:#000000;background:#ffffff;'>
  
  <span style='color:#800000; font-weight:bold; '>boolean</span> fizzlefade<span style='color:#808030; '>(</span><span style='color:#800000; font-weight:bold; '>void</span><span style='color:#808030; '>)</span>
  <span style='color:#800080; '>{</span>
    uint32_t rndval <span style='color:#808030; '>=</span> <span style='color:#008c00; '>1</span><span style='color:#800080; '>;</span>
    uint16_t x<span style='color:#808030; '>,</span>y<span style='color:#800080; '>;</span> 
    <span style='color:#800000; font-weight:bold; '>do</span>
    <span style='color:#800080; '>{</span>
       y <span style='color:#808030; '>= </span> rndval <span style='color:#808030; '>&amp;</span> <span style='color:#008000; '>0x000FF</span><span style='color:#800080; '>;</span>  <span style='color:#696969; '>/* Y = low 8 bits */</span>
       x <span style='color:#808030; '>= (</span>rndval <span style='color:#808030; '>&amp;</span> <span style='color:#008000; '>0x1FF00</span><span style='color:#800080; '>) >> 8;</span>  <span style='color:#696969; '>/* X = High 9 bits */</span>
       <span style='color:#800000; font-weight:bold; '>unsigned</span> lsb <span style='color:#808030; '>=</span> rndval <span style='color:#808030; '>&amp;</span> <span style='color:#008c00; '>1</span><span style='color:#800080; '>;</span>   <span style='color:#696969; '>/* Get the output bit. */</span>
       rndval <span style='color:#808030; '>></span><span style='color:#808030; '>></span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>1</span><span style='color:#800080; '>;</span>                <span style='color:#696969; '>/* Shift register */</span>
       <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>lsb<span style='color:#808030; '>)</span> <span style='color:#800080; '>{</span>                 <span style='color:#696969; '>/* If the output is 0, the xor can be skipped. */</span>
            rndval <span style='color:#808030; '>^</span><span style='color:#808030; '>=</span> <span style='color:#008000; '>0x00012000</span><span style='color:#800080; '>;</span>
        <span style='color:#800080; '>}</span>
        <span style='color:#800000; font-weight:bold; '>if</span> <span style='color:#808030; '>(</span>x <span style='color:#808030; '>&lt;</span> <span style='color:#008c00; '>320</span> <span style='color:#808030; '>&amp;</span><span style='color:#808030; '>&amp;</span> y <span style='color:#808030; '>&lt;</span> <span style='color:#008c00; '>200</span><span style='color:#808030; '>)</span>
          fizzle_pixel<span style='color:#808030; '>(</span>x <span style='color:#808030; '>,</span> y<span style='color:#808030; '>)</span> <span style='color:#800080;'>;</span>
    <span style='color:#800080; '>}</span> <span style='color:#800000; font-weight:bold; '>while</span> <span style='color:#808030; '>(</span>rndval <span style='color:#808030; '>!</span><span style='color:#808030; '>=</span> <span style='color:#008c00; '>1</span><span style='color:#808030; '>)</span><span style='color:#800080; '>;</span>

    <span style='color:#800000; font-weight:bold; '>return</span> <span style='color:#008c00; '>0</span><span style='color:#800080; '>;</span>
  <span style='color:#800080; '>}</span>

</pre>
<p>
  Which can be read as:<br/>
<ul>
<li>Initialize rndval to 1.
<li>Break it down in 9 + 8 bits: use 8 bits to generate a Y coordinate and 9 bits for a X
coordinate. Turn this pixel to red.
<li>Subject rndval to a soup of XORing.
<li>When rndval value is somehow back to 1: Stop, the screen is solid red.
</ul>
<p>
<br/>
<br/>
This feels like dark magic. How is rndval supposed to return to value 1? That technique
is called <a href="https://en.wikipedia.org/wiki/Linear-feedback_shift_register">Linear Feedback Shift Register</a>. The idea is to use one register to store a state,
generate the next state, and also generate a value. To get the next value, you do a right
shift. Since the rightmost bit disappears, a new one to the left is needed. To generate this
new bit, the register uses "taps" which are bit offsets used to XOR together values and
generate the new bit value. A Fibonnaci representation shows a simple LFSR with two
taps.<br/>
<br/>
<img class="center" src="4bits_lfsr.svg"/><br/>
<br/>
This register (with taps on bit 0 and 2) is able to generate 6 values before it cycles back to it original state. The
following listing shows all of them (the stars indicate the taps location).<br/>
<br/>
<pre>

   * * | value
  ======================
  0001 | 1
  1000 | 8
  0100 | 4
  1010 | A
  0101 | 5
  0010 | 2
  0001 | 1 -> CYCLE

  Sequence of 6 numbers before cycling .

</pre>
<p>
<br/>
Various arrangements of taps will produce different series. In the case of this four bits
register, the maximum number of values in a series is 16-1 = 15 (zero cannot be reached.)
This can be achieved with taps on bits 0 and 1. This is called a "Maximum-Length" LFSR.<br/>
<br/>
<pre>

    ** | value
  ======================
  0001 | 1
  1000 | 8
  0100 | 4
  0010 | 2
  1001 | 9
  1100 | C
  0110 | 6
  1011 | B
  0101 | 5
  1010 | A
  1101 | D
  1110 | E
  1111 | F
  0111 | 7
  0011 | 3
  0001 | 1 -> CYCLE

  Sequence of 15 numbers before cycling .

</pre>
<p>
Wolf uses a 17 bits Maximum-Length LFSR with two taps to generate a serie of pseudorandom
values. Of these 17 bits, on each iteration, 8 are used to generate a Y coordinate
and 9 for a X coordinate. The corresponding pixel on screen is turned red/blue.<br/>
<br/>
<img class="center" src="fibonacci.svg"/><br/>
<br/>
The Fibonacci representation helps to understand the general idea. But it is not how a LFSR is usually implemented in software. The reason is that it scales linearly
with the number of taps. With four taps, you need three sequential XOR operations:<br/>
<br/>
<img class="center" src="fibonacci_hard.svg"/><br/>
<br/>

There is an alternative way to represent a LFSR called "Galois" which requires only one XOR regardless of the number of taps and it is the way Wolfenstein 3D writes 320x200=64000 pixels exactly once with deterministic duration.<br/>
<br/>
<img class="center" src="galois.svg"/><br/>
<br/>


<u><b>Note :</b></u> Because the effect works by plotting pixels individually, it was hard to replicate when
developers tried to port the game to hardware accelerated GPU. None of the ports managed
to replicate the fizzlefade except Wolf4SDL, which found a LFSR taps configuration
to reach resolution higher than 320x200.<br/>
<br/>
<u><b>Note :</b></u> The tap configuration on 17 bits generates 131,072 values before cycling. Since
320x200=64000, it could have been implemented with a 16 bits Maximum-length register
with taps on 16,15,13 and 4 (in "Galois" notation.). My assumption is that LFSR literature was hard to come across in 1991/1992 and finding the correct tap for a 16 bit maximum length register was not worth the effort.<br/>
<br/>
</p>


	<br/><h3>Recommended reading</h3>
	<p id="paperbox">
		<a href="https://play.google.com/store/books/details/Fabien_Sanglard_Game_Engine_Black_Book?id=Lq4yDwAAQBAJ">Game Engine Black Book: Wolfenstein 3D</a><br/>
	</p>
    
<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>

