<script type="text/javascript">
  var disqus_identifier = "cellphoneModem";
</script>
<!DOCTYPE html>
<html>
	<head>	
		<meta http-equiv="content-type" content="text/html; charset=utf-8">
		<meta name="Author" content="Fabien Sanglard">
		
		<meta name="Keywords" content="Android, ARM toolchain, iPhone, Hayes command set,RIL daemon MITM, AT Commands"/>
		<meta name="Description" content="Exploring Hayes command set in cellphones based on Android and iPhone OS"/>
		<meta name="viewport" content="width=device-width, initial-scale=1">
	

		
		

 
 	
		
		<title>Tracing the baseband</title>
		
	</head>
	<body>
		<div id="main">
           
					
			<link rel='stylesheet' href='../css/neo_style.css' type='text/css'  />



    <h1 id="site-name">
        <a  href="../index.html" >Fabien Sanglard's Website</a>
    </h1>

<script>
   function setEmailTitle()
	{
 		var folders = window.location.href.split("/"); 

		var currentFolder = folders[folders.length-2];

		var emailLink = document.getElementById("mail");

		emailLink.href = "mailto:fabiensanglard.net@gmail.com?subject="+currentFolder;

	}
	
	window.onload = setEmailTitle;
</script>
<style type='text/css'>
		/**
		 * Bulletproof syntax:
		 * http://www.fontspring.com/blog/further-hardening-of-the-bulletproof-syntax
		 * Font files generated by Font Squirrel:
		 * http://www.fontsquirrel.com
		 * License: Open Font License. See http://evenchick.com/wp-content/themes/blaskan/OFL.txt.
		 */
		@font-face {
			font-family: 'LeagueGothic';
			src: url('../font/league_gothic/league_gothic-webfont.eot'); /* IE9 Compat Modes */
			src: url('../font/league_gothic/league_gothic-webfont.eot?iefix') format('eot'), /* IE6-IE8 */
			     url('../font/league_gothic/league_gothic-webfont.woff') format('woff'), /* Modern Browsers */
			     url('../font/league_gothic/league_gothic-webfont.ttf')  format('truetype'), /* Safari, Android, iOS */
			     url('../font/league_gothic/league_gothic-webfont.svg') format('svg'); /* Legacy iOS */
		}
		
		@font-face {
			font-family: 'DejaVu Sans';
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf'); /* IE9 Compat Modes */
			src: url('../font/dejavu-sans/DejaVuSansMono.ttf')  format('truetype') /* Safari, Android, iOS */
			     
		}

		
</style>

<header id="header" role="banner"><nav id="nav" role="navigation"><div class="menu">
	<ul id="menu-primary-navigation-1" >
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-91">
           <a href="../index.html" >Home</a>
         </li>
         <li class="menu-item menu-item-type-post_type menu-item-object-page menu-item-95">
           <a href="../about/index.html">About</a>
         </li>
          <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-96">
           <a href="../faq/index.html">FAQ</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-92">
            <a id="mail" href="mailto:fabiensanglard.net@gmail.com?subject=Tunnel" title="Send me an email.">Email</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-93">
            <a href="../rss.xml" title="Suscribe to RSS Feed.">Rss</a>
         </li>
         <li class="menu-item menu-item-type-custom menu-item-object-custom menu-item-home menu-item-94">
            <a href="http://twitter.com/fabynou" title="Follow me on Twitter.">Twitter</a>
         </li>
     </ul></div></nav></header>
<!-- / #header -->
<section id="content" role="main">



		
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Feed" href="../rss.xml" />
<link rel="alternate" type="application/rss+xml" title="Fabien Sanglard &raquo; Comments Feed" href="../rss.xml" />
<div id="date">
       May, 11th 2010</div>
   <h1>Tracing the baseband: Part 1</h1>
   <p id="paperbox">
	   	
          <a  href="index.php">
          <img src="androIphone.jpg" style="margin-left: 2ch;float:right; border:1px black solid;width:35%;">   
          </a> 
         

    I was reading an article on <a href="http://linuxoniphone.blogspot.com/2008/07/when-bootloader-is-not-bootloader.html">planetbeing's blog</a> the other day and my curiosity was tipped off when he mentioned that phones don't run only one operating system but <u>two</u>. I decided to learn a bit how all this really works and here are my notes with the source code associated. Hopefully it will help someone investigating the subject.<br/>
<div style="clear:both;"></div>


<h3>The smart and the phone</h3>
			<p id="paperbox">
Modern smartphones are made of two parts: The "smart" part and the "phone" part. They are very independent from each other, on iPhone for example MacOSX can crash during a call but user will still be able to pursue a conversation. Those two part use separate boards, processors, run different operating system started with different bootloader and of course don't use the same RAM. More interesting is that they are "poorly" coupled and communicate with each other via an UART serial line to pass commands, the same old way a 386 was communicating with a modem plugged on a port COM 14 years ago. The protocol (Hayes Command Set) is 30 years old, human readable and extendable: even relatively new function such as "unlocking" are done over AT-Commands.<br/><br/>
This architecture is valid for both the Androids and the iPhones:<br/>
<br/>
<img style="padding-left:50px;"  title="The iphone architecture" src="../fd_proxy/cellphoneModem/iPhone_arch.png"/><br/>
<br/>
A kernel module exposes the serial line over an UNIX pseudo-terminal in the <code>/dev</code> folder. On Androids there is only one pseudo terminal: <code>/dev/smd0</code> but on iPhone the UART is divided by a kernel module and several pseudo-terminals are exposed: <code>/dev/mux.h5-baseband.reg</code>, <code>/dev/dlci.h5-baseband.call</code> or <code>/dev/dlci.h5-baseband.sms</code>. The user land process can then <code>open</code>  any terminal and perform I/O commands with simple <code>read</code> and <code>write</code>.<br/>
<br/>
<img style="padding-left:50px;" title="The android architecture" src="../fd_proxy/cellphoneModem/android_arch.png"/><br/>
<br/>
<br/>
<p>

<br/>
Note: That's why the iPhone hackers use two words for their activity:

<ul>
<li> "Jaibreak" which refers to open the "smart" MacOS X access.</li>
<li>"Unlock" which refer to allowing the modem to use any SIM card, even is the SIM's MMC/MNC are not matching the operator's MMC/MNC.</li>
</ul>	
</p>
<br/>
</p>
<h3>Getting in the middle
			</h3>
			<p id="paperbox">
				
				I wanted to take a look at a real stream of communication between the smart part and the phone part. It seemed there was three ways to do it:<br/>
<ul>
	<li>From within the CommCenter/RILd, using tricks such as:</li>
	<ul>
	<li>Library preloading</li>
	<li>Method interposition</li>
	</ul>
	<li>From the smart OS, dealing right with the unix pseudo-terminal</li>
	<ul> 
	<li>Pseudo-terminal MITM (Also called Termial in the middle)</li>
	</ul>
</ul><br/>
<br/>

<br/>





<h3>Library preloading & Method interposition: Theory
			</h3>
			<p id="paperbox">
			<br/>
			In MacOS X/Linux, programs are stored on hard-drive with missing parts referencing methods and functions from bigger libraries (<code>libc</code>,<code>zlib</code>,...). Only when they are started the missing symbols are linked, it is called dynamic linking and it's done by <code>ld</code> on Linux and <code>dyld</code> on MacOS X:<br/>
<br/>
<ol>
	<li>
After a new process is forked an <code>execv</code> occurs, the program is read from hard-drive and different sections are loaded in RAM, <code>.text</code> is loaded into "read only" pages while <code>.data</code> and a stack are created with "read and write" pages.<br/> Note: In the drawing <code>.data</code>'s pages are mapped starting at <code>0x00000000</code> but in reality this is reserved so you get a nice "segmentation fault" upon derefencing a null pointer.
	</li>
</ol>
<br/>
<img style="padding-left:100px;"  src="../fd_proxy/cellphoneModem/normalLoading.png"/><br/>
<br/>

<ol>
	<li value="2">
		Once the program's different section are all in pages, the kernel reads which loader should be used and integrate it in the process address space. The loader is usually already resident in memory somewhere on the system so it is not loaded from hard-drive but mapped by adding an entry in the progress's page table. Execution control is them transferred to the loader, passing via parameters where the different program sections are.
	</li>
	<li>
		The loader reads the missing symbols names and search for them in the default libraries.
	</li>
	<li>
		The libraries are usually also resident in memory so there is no need to read them from the hard-drive. They are mapped in the process address space via the process's page table and symbols resolution occurs. If all symbols are resolved, execution of the program can begin.
	</li>
</ol>
<br/><br/>
Library preloading is a way to get in front of the libraries when the loader is looking for symbols (step 3). This is done by instructing the loader to lookup for missing symbols in a library we wrote before looking anywhere else: <br/>

<br/>
<img style="padding-left:20px;"  src="../fd_proxy/cellphoneModem/lib_preloading.png"/><br/>
<br/>
Note that the loader is performing symbols resolution (intercepted by our library) at <u>launchtime</u>. The interceptor library then uses the loader to create a hook at <u>runtime</u>.
<br/><br/>
It is not complicated to do:<br/>
<ul>
	<li>Write a library with function prototyp matching the one you want to intercept (let's say: <code>void *malloc(size_t size)</code>) </li>
	<li>Compile as a shared library</li>
	<li>Instruct the loader to lookup this library before anything else:</li>
	<ul> 
		<li>On linux this is done via the <code>LD_PRELOAD</code> environment variable.</li>
		
		<li>On MacOS X it is slighty different because <code>lyld</code> uses a two-level namespaces ( a symbol not only features a method's name but also the name of the library) hence you have to specify the name of your interceptor library via <code>DYLD_INSERT_LIBRARIES</code> but also instruct <code>lyld</code> to use a flat lookup system via <code>DYLD_FORCE_FLAT_NAMESPACE</code></li>
	</ul>
</ul>
<br/>

<br/>
Of course to make the program run you also have to get a hold on the "real" function via <code>dlsym(RTLD_NEXT, "malloc")</code> and relay the call so everything is transparent to the program.<br/>
<br/>
<u>Dummy source code (malloc_interposer.c):</u><br/>
<pre class="long">



	#include &#60;stdio.h>
  	#include &#60;dlfcn.h>
  	#include &#60;sys/types.h>
  	#include &#60;sys/stat.h>



  	void *malloc(size_t size)
  	{
    		static void * (*func)();

  
    		if(!func)
      			func =  dlsym(RTLD_NEXT, "malloc");


    		printf("malloc(%d) is called\n", size);     
    		return(func(size));
  	} 


</verbatim>
</pre>
<p>
<u>Compilation :</u><br/>
<pre class="long">


   $: gcc -D_GNU_SOURCE -rdynamic -shared malloc_interposer.c -o /lib/malloc_interposer.so.1.0 -ldl

 
</pre>
<p>
<br/>
<vr/>
<u>Execution :</u><br/>
<pre class="long">


   $: LD_PRELOAD=/lib/malloc_interposer.so.1.0 cat /dev/null

   malloc(20) is called

	
</pre>
<br/>
<p>

<h3>Library preloading & Method interposition: Practice
			</h3>
			<p id="paperbox">
	While the method described previously works very well on Linux, MacOS X tend to behave poorly when you flatten the lookup system of <code>lyld</code>. Lukily there is an other way to place a hook on MacOS X and this method is described in Amit Singh's gem: <a href="http://www.amazon.com/Mac-OS-Internals-Systems-Approach/dp/0321278542">MacOS X Internals</a> as <b>method interposition</b>:<br/>
<br/>
By placing a special sub-section <code>__interpose</code> in the <code>data</code> portion of the executable, <code>dyld</code> will perform all the interceptions <u>automatically</u>. Here is an example hooking open,close,write and read.
<br/>
<pre class="long">

  
	static const interposer_t interposers[] __attribute__ ((section("__DATA, __interpose")))=
	{
		{ (void*)my_open, (void*)open },
		{ (void*)my_close, (void*)close},
		{ (void*)my_read, (void*)read},
		{ (void*)my_write, (void*)write},
	};

	
	int my_open  (const char* path, int flags, mode_t mode){..}
	int my_close (int d){..}
	int my_read  (int  handle,  void  *buffer,  int  nbyte ){..}
	int my_write (int  handle,  void  *buffer,  int  nbyte  ){..}


 
</pre>
<p>
With this trick, it was easy to identify the pseudo-terminals used by placing a hook on <code>open</code> and <code>close</code>. Then hook <code>read</code> and <code>write</code>. The tracing is performed by maintaining a mapping between file descriptor returned by <code>&lt;fcntl.h&gt;</code> and <code>FILE*</code>'s <code><stdio.h></code>. Here is the resulting source code: <a href="fdinterceptor.c">fdinterceptor.c</a> and a zip containing a plist and the script to inject: <a href="injector.zip">injector.zip</a>.<br/>
<br/>
<br/>
<u>Toolchain in action:</u><br/>
<pre class="long">


  	// Build the tools
	$ cd /Developer/Platforms/iPhoneOS.platform/Developer/usr/bin
	$ gcc-4.2 -arch armv6 -dynamiclib -isysroot ../../SDKs/iPhoneOS3.1.3.sdk -o fdinterceptor.dylib fdinterceptor.c


	// Send the tools
	$ scp fdinterceptor.dylib injectCommCenter.sh com.apple.CommCenter.plist root@192.168.1.103:/tmp


	// Jump in and inject
 	$ ssh -l root 192.168.1.103
	# cd /tmp
	# ./injectCommCenter.sh


</pre>
<p>
Notice that injection is performed via a script <code>injectCommCenter.sh</code>:<br/>
<pre class="long">


	cd /System/Library/LaunchDaemons/
	cp com.apple.CommCenter.plist com.apple.CommCenter.plist.vanilla
	cp /tmp/com.apple.CommCenter.plist /System/Library/LaunchDaemons/com.apple.CommCenter.plist

	launchctl unload -w /System/Library/LaunchDaemons/com.apple.CommCenter.plist
	launchctl load -w /System/Library/LaunchDaemons/com.apple.CommCenter.plist

	cp com.apple.CommCenter.plist.vanilla com.apple.CommCenter.plist


</pre>
<p>
The <code>launchctl</code> lines are not very interesting as they merely unload and reload the CommCenter deamon. But what is done before and afer is a bit more worth mentioning: Because the CommCenter not only handles the modem but also the WIFI connection, once you unload the CommCenter your SSH terminal will HANG. You are literally sawing off the branch you are sitting on. It is hence a necessity to script the re-loading....but there is more:<br/>
<br/>
Because we modified the plist and it is saved on hard-drive: if we have a bug in our interceptor library we may potentially brick the device and require a full DFU restore ! So in order to take into account a worse case scenario the script also remove the interceptor library from the plist, this way the device can restart safely: This is just an idiot proof security.
<br/><br/><br/>
<u>Results:</u><br/>
<br/>
<br/>

<u>Booting</u><br/>
<br/>
<pre class="long">


	[send] at			# Modem Are you there ?
	[send] at
	[send] at
	[send] at
	[recv] AT			# Yes I am !

	[send] ate0			# Set modem to "no echo" mode
	[recv] ate0 OK

	[send] at+cmee=1		# Require error code to be returned as code (opposed to verbose at+cmee=2)
	[recv] OK

	[send] at+ipr=750000		# Set the terminal speed
	[recv] OK

	[send] at+xdrv=0,41,25		# Call method 41 on device 0 (speakers)
	[recv] +XDRV: 0,41,1,0
	[recv] OK
		   RV: 0,41,1,0
 
	[send] at+xtransportmode	# Switch to binary code instead of commands
	[recv] OK

	[send] at+cscs="HEX"		# Set the TE character set to HEX
	[recv] OK

	[send] at+xthumb?
	[recv] +XTHUMB: "1E2834B6CE739AB36EF9454B7997FCD30208398C","E93B43F3EF6DAED516A2D4B9BAD5494DC81E92D3"
	[recv] OK

	[send] at+xgendata          # Request modem's firmware description
	[recv] +XGENDATA: "","DEV_ICE_MODEM_04.05.04_G","EEP_VERSION:208","EEP_REVISION:1","BOOTLOADER_VERSION:3.9_M3S2"
	[recv] OK

	[send] at+xdrv=10,2		 # Call a function for a device, format is at+xdrv:deviceId,functionId,params ...
	[recv] :+XDRV: 10,2,0
	[recv] OK

	[send] at+xl1set="psvon"

	[send] at+cmux=0,0,0,1500	# Set the multiplexing mode 
	[recv] OK

	[open] '/dev/dlci.h5-baseband.call'
	[open] '/dev/dlci.h5-baseband.reg'
	[open] '/dev/dlci.h5-baseband.sms'
	[open] '/dev/dlci.h5-baseband.low'
	[open] '/dev/dlci.h5-baseband.pdp_ctl'
	[open] '/dev/dlci.h5-baseband.chatty'
	[open] '/dev/dlci.h5-baseband.pdp_0'
	[open] '/dev/dlci.h5-baseband.pdp_1'


	# The rest of the registration occurs in /dev/dlci.h5-baseband.reg
	# The two main used pseudo terminal after this are of course /dev/dlci.h5-baseband.call 
	# and /dev/dlci.h5-baseband.sms
	
</pre>
<p>
<u>Receiving a (fictional) SMS:</u><br/>
<p>
<pre class="long">
	

	# Receiving an unsollicited text message (AT+CMT). 

	[recv] AT+CMT=10307919127163385F901000B914161387976F0000066C8721E640C8B592090F28D76838661793B3C5E83D
      0657959079AD2D36C3628EDA697E5E539BD4C06A5DD203A3A3D07C1DFF3343DFD76837E202ABA0E92C1E86850339C0
      7C96031180846D3C9642ED80C046F8350C72675154B01


</pre>
<p>
Text message are PDU encoded, you can find plenty of online decoder. Here is the plain text version
<pre class="long">


	SMSC: 		+19726133589
	Receiver: 	+1416839XXXX
	Payload: 	Hey Fab,  John Carmack here: Still interested in this position ? Thu 20th May 2010 04:22.03PM



</pre>
<p>


<u>Receiving a call :</u>
<pre class="long">

	
	
	[recv] RING					# Trigger the phone to ring
	[recv] +CLIP: "",128,,,,2			# No caller ID :/ !
	[recv] +XCALLSTAT: 1,4
	[recv] RING[recv] +CLIP: "",128,,,,2
	[send] ata					# Local user decided to accept the incoming call
	[recv] +XCALLSTAT: 1,0				# Reporting call status is enabled (1), voice is active (0)
	[recv] OK
	[recv] +XCALLSTAT: 1,6				# Reporting call status is enabled (1), voice is disconnected (6)
	[send] at+ceer					# Local user hang up
	[recv] NO CARRIER				# Connection is indeed terminated from the other hand
	[recv] +CEER: "Release","Normal call clearing"	#Collect informations on call
	[recv] OK

</pre>
<p>
<u>Note :</u> I was surprised to find RING command notifications note only in the <code>call</code> channel but also in the <code>sms</code> channel but it actually makes a lot of sense when connect to EDGE/GPRS: Since text message and call are not supported simultaneously the sms pseudo-terminal must remain silent during a call.<br/>
<br/>
<u>Fails :</u><br/>
<br/>
Overall, I was pretty happy with the result and I managed to understand better the AT communications but I was unable to capture properly a text message sent or the name of the carrier (the response associated via a <code>AT+COPS=?</code> request). There is probably a bug in my parsing as I stop tracing every message after the first CR character. The fact that the pseudo-terminal is not setup as raw did not help at all.
<br/>
<h3>Android and pseudo-terminal MITM
			</h3><br/>
			<p id="paperbox">
<a href="index2.php">Next page</a>
			</p>






<!-- <h2>Comments</h2>
<p> -->


     <!-- <div id="disqus_thread"></div> -->
    <!-- <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'fabiensanglardswebsite'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || 
                document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript> -->
    <!--<a href="http://disqus.com" class="dsq-brlink">comments powered by <span class="logo-disqus">Disqus</span></a> -->
<!--     




</p> -->

 <h2 style="padding: 0px; margin: 0px;">&nbsp;</h2>
<div style="text-align:center ;">@</div>

		</div>
</div>

	<script src="../lazy_load/jquery.min.js" type="text/javascript" charset="utf-8"></script>
 	

  	<script src="../lazy_load/jquery.lazyload.min.js?v=3" type="text/javascript" charset="utf-8"></script>
	<script type="text/javascript" charset="utf-8">
		      $(function() {
		          $("img").lazyload({
		              effect : "fadeIn"
		          });
		      });
    </script>	
	</body>

</html>



